
assembly_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f50  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .persistent   00000020  10000000  10000000  00030000  2**0
                  ALLOC
  2 .data         000004e4  10000020  00001f50  00020020  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000217c  10000504  00002434  00020504  2**2
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00020504  2**0
                  CONTENTS, READONLY
  5 .comment      000000a7  00000000  00000000  0002052d  2**0
                  CONTENTS, READONLY
  6 .debug_info   00008c2d  00000000  00000000  000205d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 0000233e  00000000  00000000  00029201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_loc    00002ca9  00000000  00000000  0002b53f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_aranges 000004e8  00000000  00000000  0002e1e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_line   00004341  00000000  00000000  0002e6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    00002230  00000000  00000000  00032a11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  00000b18  00000000  00000000  00034c44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000548  00000000  00000000  0003575c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <_NVIC_Handler_Functions>:
       0:	e0 3f 00 10 61 11 00 00 b5 11 00 00 b5 11 00 00     .?..a...........
      10:	b5 11 00 00 b5 11 00 00 b5 11 00 00 00 00 00 00     ................
      20:	00 00 00 00 00 00 00 00 00 00 00 00 b5 11 00 00     ................
      30:	b5 11 00 00 00 00 00 00 b5 11 00 00 b5 11 00 00     ................
      40:	b5 11 00 00 2d 07 00 00 b5 11 00 00 b5 11 00 00     ....-...........
      50:	b5 11 00 00 b5 11 00 00 b5 11 00 00 b5 11 00 00     ................
      60:	b5 11 00 00 b5 11 00 00 b5 11 00 00 b5 11 00 00     ................
      70:	b5 11 00 00 b5 11 00 00 b5 11 00 00 b5 11 00 00     ................
      80:	b5 11 00 00 b5 11 00 00 b5 11 00 00 b5 11 00 00     ................
      90:	b5 11 00 00 b5 11 00 00 b5 11 00 00 b5 11 00 00     ................
      a0:	5d 11 00 00 b5 11 00 00 51 07 00 00 b5 11 00 00     ].......Q.......
      b0:	b5 11 00 00 b5 11 00 00 b5 11 00 00 b5 11 00 00     ................
      c0:	b5 11 00 00 b5 11 00 00 b5 11 00 00                 ............

000000cc <deregister_tm_clones>:
      cc:	4803      	ldr	r0, [pc, #12]	; (dc <deregister_tm_clones+0x10>)
      ce:	4b04      	ldr	r3, [pc, #16]	; (e0 <deregister_tm_clones+0x14>)
      d0:	4283      	cmp	r3, r0
      d2:	d002      	beq.n	da <deregister_tm_clones+0xe>
      d4:	4b03      	ldr	r3, [pc, #12]	; (e4 <deregister_tm_clones+0x18>)
      d6:	b103      	cbz	r3, da <deregister_tm_clones+0xe>
      d8:	4718      	bx	r3
      da:	4770      	bx	lr
      dc:	10000504 	.word	0x10000504
      e0:	10000504 	.word	0x10000504
      e4:	00000000 	.word	0x00000000

000000e8 <register_tm_clones>:
      e8:	4805      	ldr	r0, [pc, #20]	; (100 <register_tm_clones+0x18>)
      ea:	4906      	ldr	r1, [pc, #24]	; (104 <register_tm_clones+0x1c>)
      ec:	1a0b      	subs	r3, r1, r0
      ee:	0fd9      	lsrs	r1, r3, #31
      f0:	eb01 01a3 	add.w	r1, r1, r3, asr #2
      f4:	1049      	asrs	r1, r1, #1
      f6:	d002      	beq.n	fe <register_tm_clones+0x16>
      f8:	4b03      	ldr	r3, [pc, #12]	; (108 <register_tm_clones+0x20>)
      fa:	b103      	cbz	r3, fe <register_tm_clones+0x16>
      fc:	4718      	bx	r3
      fe:	4770      	bx	lr
     100:	10000504 	.word	0x10000504
     104:	10000504 	.word	0x10000504
     108:	00000000 	.word	0x00000000

0000010c <__do_global_dtors_aux>:
     10c:	b510      	push	{r4, lr}
     10e:	4c06      	ldr	r4, [pc, #24]	; (128 <__do_global_dtors_aux+0x1c>)
     110:	7823      	ldrb	r3, [r4, #0]
     112:	b943      	cbnz	r3, 126 <__do_global_dtors_aux+0x1a>
     114:	f7ff ffda 	bl	cc <deregister_tm_clones>
     118:	4b04      	ldr	r3, [pc, #16]	; (12c <__do_global_dtors_aux+0x20>)
     11a:	b113      	cbz	r3, 122 <__do_global_dtors_aux+0x16>
     11c:	4804      	ldr	r0, [pc, #16]	; (130 <__do_global_dtors_aux+0x24>)
     11e:	f3af 8000 	nop.w
     122:	2301      	movs	r3, #1
     124:	7023      	strb	r3, [r4, #0]
     126:	bd10      	pop	{r4, pc}
     128:	10000504 	.word	0x10000504
     12c:	00000000 	.word	0x00000000
     130:	00001f28 	.word	0x00001f28

00000134 <frame_dummy>:
     134:	b508      	push	{r3, lr}
     136:	4b04      	ldr	r3, [pc, #16]	; (148 <frame_dummy+0x14>)
     138:	b11b      	cbz	r3, 142 <frame_dummy+0xe>
     13a:	4904      	ldr	r1, [pc, #16]	; (14c <frame_dummy+0x18>)
     13c:	4804      	ldr	r0, [pc, #16]	; (150 <frame_dummy+0x1c>)
     13e:	f3af 8000 	nop.w
     142:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     146:	e7cf      	b.n	e8 <register_tm_clones>
     148:	00000000 	.word	0x00000000
     14c:	10000508 	.word	0x10000508
     150:	00001f28 	.word	0x00001f28

00000154 <atexit>:
     154:	2300      	movs	r3, #0
     156:	4601      	mov	r1, r0
     158:	461a      	mov	r2, r3
     15a:	4618      	mov	r0, r3
     15c:	f000 b83e 	b.w	1dc <__register_exitproc>

00000160 <__libc_fini_array>:
     160:	b538      	push	{r3, r4, r5, lr}
     162:	4c0a      	ldr	r4, [pc, #40]	; (18c <__libc_fini_array+0x2c>)
     164:	4d0a      	ldr	r5, [pc, #40]	; (190 <__libc_fini_array+0x30>)
     166:	1b64      	subs	r4, r4, r5
     168:	10a4      	asrs	r4, r4, #2
     16a:	d00a      	beq.n	182 <__libc_fini_array+0x22>
     16c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
     170:	3b01      	subs	r3, #1
     172:	eb05 0583 	add.w	r5, r5, r3, lsl #2
     176:	3c01      	subs	r4, #1
     178:	f855 3904 	ldr.w	r3, [r5], #-4
     17c:	4798      	blx	r3
     17e:	2c00      	cmp	r4, #0
     180:	d1f9      	bne.n	176 <__libc_fini_array+0x16>
     182:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     186:	f001 bed9 	b.w	1f3c <_fini>
     18a:	bf00      	nop
     18c:	00001f4c 	.word	0x00001f4c
     190:	00001f48 	.word	0x00001f48

00000194 <__libc_init_array>:
     194:	b570      	push	{r4, r5, r6, lr}
     196:	4e0d      	ldr	r6, [pc, #52]	; (1cc <__libc_init_array+0x38>)
     198:	4d0d      	ldr	r5, [pc, #52]	; (1d0 <__libc_init_array+0x3c>)
     19a:	1b76      	subs	r6, r6, r5
     19c:	10b6      	asrs	r6, r6, #2
     19e:	d006      	beq.n	1ae <__libc_init_array+0x1a>
     1a0:	2400      	movs	r4, #0
     1a2:	3401      	adds	r4, #1
     1a4:	f855 3b04 	ldr.w	r3, [r5], #4
     1a8:	4798      	blx	r3
     1aa:	42a6      	cmp	r6, r4
     1ac:	d1f9      	bne.n	1a2 <__libc_init_array+0xe>
     1ae:	4e09      	ldr	r6, [pc, #36]	; (1d4 <__libc_init_array+0x40>)
     1b0:	4d09      	ldr	r5, [pc, #36]	; (1d8 <__libc_init_array+0x44>)
     1b2:	f001 feb9 	bl	1f28 <_init>
     1b6:	1b76      	subs	r6, r6, r5
     1b8:	10b6      	asrs	r6, r6, #2
     1ba:	d006      	beq.n	1ca <__libc_init_array+0x36>
     1bc:	2400      	movs	r4, #0
     1be:	3401      	adds	r4, #1
     1c0:	f855 3b04 	ldr.w	r3, [r5], #4
     1c4:	4798      	blx	r3
     1c6:	42a6      	cmp	r6, r4
     1c8:	d1f9      	bne.n	1be <__libc_init_array+0x2a>
     1ca:	bd70      	pop	{r4, r5, r6, pc}
     1cc:	00001f34 	.word	0x00001f34
     1d0:	00001f34 	.word	0x00001f34
     1d4:	00001f3c 	.word	0x00001f3c
     1d8:	00001f34 	.word	0x00001f34

000001dc <__register_exitproc>:
     1dc:	b4f0      	push	{r4, r5, r6, r7}
     1de:	4c17      	ldr	r4, [pc, #92]	; (23c <__register_exitproc+0x60>)
     1e0:	6825      	ldr	r5, [r4, #0]
     1e2:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
     1e6:	b30c      	cbz	r4, 22c <__register_exitproc+0x50>
     1e8:	6865      	ldr	r5, [r4, #4]
     1ea:	2d1f      	cmp	r5, #31
     1ec:	dc23      	bgt.n	236 <__register_exitproc+0x5a>
     1ee:	b938      	cbnz	r0, 200 <__register_exitproc+0x24>
     1f0:	2000      	movs	r0, #0
     1f2:	1c6b      	adds	r3, r5, #1
     1f4:	3502      	adds	r5, #2
     1f6:	6063      	str	r3, [r4, #4]
     1f8:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
     1fc:	bcf0      	pop	{r4, r5, r6, r7}
     1fe:	4770      	bx	lr
     200:	2601      	movs	r6, #1
     202:	eb04 0c85 	add.w	ip, r4, r5, lsl #2
     206:	f8cc 2088 	str.w	r2, [ip, #136]	; 0x88
     20a:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
     20e:	fa06 f205 	lsl.w	r2, r6, r5
     212:	4317      	orrs	r7, r2
     214:	2802      	cmp	r0, #2
     216:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
     21a:	f8cc 3108 	str.w	r3, [ip, #264]	; 0x108
     21e:	d1e7      	bne.n	1f0 <__register_exitproc+0x14>
     220:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
     224:	431a      	orrs	r2, r3
     226:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
     22a:	e7e1      	b.n	1f0 <__register_exitproc+0x14>
     22c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
     230:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
     234:	e7d8      	b.n	1e8 <__register_exitproc+0xc>
     236:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     23a:	e7df      	b.n	1fc <__register_exitproc+0x20>
     23c:	00001df8 	.word	0x00001df8

00000240 <register_fini>:
     240:	4b02      	ldr	r3, [pc, #8]	; (24c <register_fini+0xc>)
     242:	b113      	cbz	r3, 24a <register_fini+0xa>
     244:	4802      	ldr	r0, [pc, #8]	; (250 <register_fini+0x10>)
     246:	f7ff bf85 	b.w	154 <atexit>
     24a:	4770      	bx	lr
     24c:	00000000 	.word	0x00000000
     250:	00000161 	.word	0x00000161

00000254 <dma_init>:
		T0IR |= TIR_MR0_Interrupt;
	}
}

static void dma_init()
{
     254:	b510      	push	{r4, lr}
	/* power up GPDMA controller */
	PCONP |= PCONP_PCGPDMA;
     256:	4a22      	ldr	r2, [pc, #136]	; (2e0 <dma_init+0x8c>)

	/* zero out channel configs and clear interrupts */
	DMACC0Config = 0;
     258:	4922      	ldr	r1, [pc, #136]	; (2e4 <dma_init+0x90>)
	PCONP |= PCONP_PCGPDMA;
     25a:	6813      	ldr	r3, [r2, #0]
	DMACC7Config = 0;
	DMACIntTCClear = 0xFF;
	DMACIntErrClr = 0xFF;

	/* DMA linked lists */
	rx_dma_lli1.src = (u32)&(DIO_SSP_DR);
     25c:	4c22      	ldr	r4, [pc, #136]	; (2e8 <dma_init+0x94>)
	PCONP |= PCONP_PCGPDMA;
     25e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
     262:	6013      	str	r3, [r2, #0]
	DMACC0Config = 0;
     264:	2300      	movs	r3, #0
	DMACC1Config = 0;
     266:	4a21      	ldr	r2, [pc, #132]	; (2ec <dma_init+0x98>)
	DMACC0Config = 0;
     268:	600b      	str	r3, [r1, #0]
	DMACC1Config = 0;
     26a:	6013      	str	r3, [r2, #0]
	DMACC2Config = 0;
     26c:	6213      	str	r3, [r2, #32]
	DMACC3Config = 0;
     26e:	6413      	str	r3, [r2, #64]	; 0x40
	DMACC4Config = 0;
     270:	6613      	str	r3, [r2, #96]	; 0x60
	DMACC5Config = 0;
     272:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	DMACC6Config = 0;
     276:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	DMACC7Config = 0;
     27a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	DMACIntTCClear = 0xFF;
     27e:	23ff      	movs	r3, #255	; 0xff
     280:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
     284:	6013      	str	r3, [r2, #0]
	DMACIntErrClr = 0xFF;
     286:	6093      	str	r3, [r2, #8]
	rx_dma_lli1.src = (u32)&(DIO_SSP_DR);
     288:	4b19      	ldr	r3, [pc, #100]	; (2f0 <dma_init+0x9c>)
	rx_dma_lli1.dest = (u32)&rxbuf1[0];
     28a:	4a1a      	ldr	r2, [pc, #104]	; (2f4 <dma_init+0xa0>)
	rx_dma_lli1.src = (u32)&(DIO_SSP_DR);
     28c:	601c      	str	r4, [r3, #0]
	rx_dma_lli1.dest = (u32)&rxbuf1[0];
     28e:	605a      	str	r2, [r3, #4]
	rx_dma_lli1.next_lli = (u32)&rx_dma_lli2;
     290:	4a19      	ldr	r2, [pc, #100]	; (2f8 <dma_init+0xa4>)
	rx_dma_lli1.control = (DMA_SIZE) |
     292:	481a      	ldr	r0, [pc, #104]	; (2fc <dma_init+0xa8>)
			(0 << 18) |        /* source width 8 bits */
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	rx_dma_lli2.src = (u32)&(DIO_SSP_DR);
     294:	6014      	str	r4, [r2, #0]
	rx_dma_lli2.dest = (u32)&rxbuf2[0];
     296:	4c1a      	ldr	r4, [pc, #104]	; (300 <dma_init+0xac>)
	rx_dma_lli1.control = (DMA_SIZE) |
     298:	60d8      	str	r0, [r3, #12]
	rx_dma_lli2.next_lli = (u32)&rx_dma_lli1;
     29a:	e9c2 4301 	strd	r4, r3, [r2, #4]
	rx_dma_lli2.control = (DMA_SIZE) |
     29e:	60d0      	str	r0, [r2, #12]
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	/* disable DMA interrupts */
	ISER0 &= ~ISER0_ISE_DMA;
     2a0:	4818      	ldr	r0, [pc, #96]	; (304 <dma_init+0xb0>)
	rx_dma_lli1.next_lli = (u32)&rx_dma_lli2;
     2a2:	609a      	str	r2, [r3, #8]
	ISER0 &= ~ISER0_ISE_DMA;
     2a4:	6802      	ldr	r2, [r0, #0]
     2a6:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
     2aa:	6002      	str	r2, [r0, #0]

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
     2ac:	2001      	movs	r0, #1
     2ae:	4a16      	ldr	r2, [pc, #88]	; (308 <dma_init+0xb4>)
     2b0:	6010      	str	r0, [r2, #0]
	while (!(DMACConfig & DMACConfig_E));
     2b2:	6810      	ldr	r0, [r2, #0]
     2b4:	07c0      	lsls	r0, r0, #31
     2b6:	d5fc      	bpl.n	2b2 <dma_init+0x5e>

	/* configure DMA channel 1 */
	DMACC0SrcAddr = rx_dma_lli1.src;
     2b8:	6818      	ldr	r0, [r3, #0]
     2ba:	4a14      	ldr	r2, [pc, #80]	; (30c <dma_init+0xb8>)
     2bc:	6010      	str	r0, [r2, #0]
	DMACC0DestAddr = rx_dma_lli1.dest;
     2be:	6858      	ldr	r0, [r3, #4]
     2c0:	6050      	str	r0, [r2, #4]
	DMACC0LLI = rx_dma_lli1.next_lli;
     2c2:	6898      	ldr	r0, [r3, #8]
     2c4:	6090      	str	r0, [r2, #8]
	DMACC0Control = rx_dma_lli1.control;
     2c6:	68da      	ldr	r2, [r3, #12]
     2c8:	4b11      	ldr	r3, [pc, #68]	; (310 <dma_init+0xbc>)
     2ca:	601a      	str	r2, [r3, #0]
	DMACC0Config =
     2cc:	f24d 0306 	movw	r3, #53254	; 0xd006
     2d0:	600b      	str	r3, [r1, #0]
			(0x2 << 11) |           /* peripheral to memory */
			DMACCxConfig_IE |       /* allow error interrupts */
			DMACCxConfig_ITC;       /* allow terminal count interrupts */

	/* reset interrupt counters */
	rx_tc = 0;
     2d2:	2300      	movs	r3, #0
     2d4:	4a0f      	ldr	r2, [pc, #60]	; (314 <dma_init+0xc0>)
     2d6:	6013      	str	r3, [r2, #0]
	rx_err = 0;
     2d8:	4a0f      	ldr	r2, [pc, #60]	; (318 <dma_init+0xc4>)
     2da:	6013      	str	r3, [r2, #0]
}
     2dc:	bd10      	pop	{r4, pc}
     2de:	bf00      	nop
     2e0:	400fc0c4 	.word	0x400fc0c4
     2e4:	50004110 	.word	0x50004110
     2e8:	40030008 	.word	0x40030008
     2ec:	50004130 	.word	0x50004130
     2f0:	10002634 	.word	0x10002634
     2f4:	10002649 	.word	0x10002649
     2f8:	100005ec 	.word	0x100005ec
     2fc:	88009032 	.word	0x88009032
     300:	10002600 	.word	0x10002600
     304:	e000e100 	.word	0xe000e100
     308:	50004030 	.word	0x50004030
     30c:	50004100 	.word	0x50004100
     310:	5000410c 	.word	0x5000410c
     314:	100005e8 	.word	0x100005e8
     318:	1000267c 	.word	0x1000267c

0000031c <dio_ssp_start>:
}

static void dio_ssp_start()
{
	/* make sure the (active low) slave select signal is not active */
	DIO_SSEL_SET;
     31c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     320:	4b0c      	ldr	r3, [pc, #48]	; (354 <dio_ssp_start+0x38>)

	/* enable rx DMA on DIO_SSP */
	DIO_SSP_DMACR |= SSPDMACR_RXDMAE;
     322:	490d      	ldr	r1, [pc, #52]	; (358 <dio_ssp_start+0x3c>)
	DIO_SSEL_SET;
     324:	601a      	str	r2, [r3, #0]
	DIO_SSP_DMACR |= SSPDMACR_RXDMAE;
     326:	680b      	ldr	r3, [r1, #0]
     328:	f043 0301 	orr.w	r3, r3, #1
     32c:	600b      	str	r3, [r1, #0]
	DIO_SSP_CR1 |= SSPCR1_SSE;
     32e:	f851 3c20 	ldr.w	r3, [r1, #-32]
     332:	f043 0302 	orr.w	r3, r3, #2
     336:	f841 3c20 	str.w	r3, [r1, #-32]
	
	/* enable DMA */
	DMACC0Config |= DMACCxConfig_E;
     33a:	4908      	ldr	r1, [pc, #32]	; (35c <dio_ssp_start+0x40>)
     33c:	680b      	ldr	r3, [r1, #0]
     33e:	f043 0301 	orr.w	r3, r3, #1
     342:	600b      	str	r3, [r1, #0]
	ISER0 |= ISER0_ISE_DMA;
     344:	4906      	ldr	r1, [pc, #24]	; (360 <dio_ssp_start+0x44>)
     346:	680b      	ldr	r3, [r1, #0]
     348:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
     34c:	600b      	str	r3, [r1, #0]

	/* activate slave select pin */
	DIO_SSEL_CLR;
     34e:	4b05      	ldr	r3, [pc, #20]	; (364 <dio_ssp_start+0x48>)
     350:	601a      	str	r2, [r3, #0]
}
     352:	4770      	bx	lr
     354:	2009c098 	.word	0x2009c098
     358:	40030024 	.word	0x40030024
     35c:	50004110 	.word	0x50004110
     360:	e000e100 	.word	0xe000e100
     364:	2009c09c 	.word	0x2009c09c

00000368 <usb_vendor_request_handler>:
{
     368:	b570      	push	{r4, r5, r6, lr}
     36a:	b08a      	sub	sp, #40	; 0x28
	u8 *pbData = *ppbData;
     36c:	7843      	ldrb	r3, [r0, #1]
{
     36e:	460c      	mov	r4, r1
	u8 *pbData = *ppbData;
     370:	6815      	ldr	r5, [r2, #0]
	switch (pSetup->bRequest) {
     372:	2b21      	cmp	r3, #33	; 0x21
     374:	f200 8141 	bhi.w	5fa <usb_vendor_request_handler+0x292>
     378:	e8df f013 	tbh	[pc, r3, lsl #1]
     37c:	0022002c 	.word	0x0022002c
     380:	002e013f 	.word	0x002e013f
     384:	003b0034 	.word	0x003b0034
     388:	00430040 	.word	0x00430040
     38c:	004c0048 	.word	0x004c0048
     390:	00e90051 	.word	0x00e90051
     394:	011500f2 	.word	0x011500f2
     398:	0057006d 	.word	0x0057006d
     39c:	00aa00a5 	.word	0x00aa00a5
     3a0:	00b100af 	.word	0x00b100af
     3a4:	00df00b7 	.word	0x00df00b7
     3a8:	00e500e2 	.word	0x00e500e2
     3ac:	0112010a 	.word	0x0112010a
     3b0:	0118013f 	.word	0x0118013f
     3b4:	00c500bb 	.word	0x00c500bb
     3b8:	00ce00d1 	.word	0x00ce00d1
     3bc:	012f00d4 	.word	0x012f00d4
		rx_pkts += pSetup->wValue;
     3c0:	4b8f      	ldr	r3, [pc, #572]	; (600 <usb_vendor_request_handler+0x298>)
     3c2:	8842      	ldrh	r2, [r0, #2]
     3c4:	6819      	ldr	r1, [r3, #0]
     3c6:	440a      	add	r2, r1
     3c8:	601a      	str	r2, [r3, #0]
		if (rx_pkts == 0)
     3ca:	681a      	ldr	r2, [r3, #0]
     3cc:	b912      	cbnz	r2, 3d4 <usb_vendor_request_handler+0x6c>
			rx_pkts = 0xFFFFFFFF;
     3ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     3d2:	601a      	str	r2, [r3, #0]
		*piLen = 0;
     3d4:	2300      	movs	r3, #0
     3d6:	e074      	b.n	4c2 <usb_vendor_request_handler+0x15a>
		pbData[0] = (USRLED) ? 1 : 0;
     3d8:	4b8a      	ldr	r3, [pc, #552]	; (604 <usb_vendor_request_handler+0x29c>)
     3da:	681b      	ldr	r3, [r3, #0]
     3dc:	f3c3 0340 	ubfx	r3, r3, #1, #1
		pbData[0] = modulation;
     3e0:	702b      	strb	r3, [r5, #0]
     3e2:	e08c      	b.n	4fe <usb_vendor_request_handler+0x196>
		if (pSetup->wValue)
     3e4:	2302      	movs	r3, #2
     3e6:	8842      	ldrh	r2, [r0, #2]
		if (pSetup->wValue)
     3e8:	b1ea      	cbz	r2, 426 <usb_vendor_request_handler+0xbe>
			CC1V8_SET;
     3ea:	4a87      	ldr	r2, [pc, #540]	; (608 <usb_vendor_request_handler+0x2a0>)
			HGM_CLR;
     3ec:	6013      	str	r3, [r2, #0]
	return TRUE;
     3ee:	2001      	movs	r0, #1
		break;
     3f0:	e087      	b.n	502 <usb_vendor_request_handler+0x19a>
		pbData[0] = (RXLED) ? 1 : 0;
     3f2:	4b84      	ldr	r3, [pc, #528]	; (604 <usb_vendor_request_handler+0x29c>)
     3f4:	681b      	ldr	r3, [r3, #0]
     3f6:	f3c3 1300 	ubfx	r3, r3, #4, #1
     3fa:	e7f1      	b.n	3e0 <usb_vendor_request_handler+0x78>
		if (pSetup->wValue)
     3fc:	2310      	movs	r3, #16
     3fe:	8842      	ldrh	r2, [r0, #2]
     400:	e7f2      	b.n	3e8 <usb_vendor_request_handler+0x80>
		pbData[0] = (TXLED) ? 1 : 0;
     402:	4b80      	ldr	r3, [pc, #512]	; (604 <usb_vendor_request_handler+0x29c>)
		pbData[0] = (HGM) ? 1 : 0;
     404:	681b      	ldr	r3, [r3, #0]
     406:	f3c3 2300 	ubfx	r3, r3, #8, #1
     40a:	e7e9      	b.n	3e0 <usb_vendor_request_handler+0x78>
		if (pSetup->wValue)
     40c:	f44f 7380 	mov.w	r3, #256	; 0x100
     410:	8842      	ldrh	r2, [r0, #2]
     412:	e7e9      	b.n	3e8 <usb_vendor_request_handler+0x80>
		pbData[0] = (CC1V8) ? 1 : 0;
     414:	4b7b      	ldr	r3, [pc, #492]	; (604 <usb_vendor_request_handler+0x29c>)
     416:	681b      	ldr	r3, [r3, #0]
     418:	f3c3 2340 	ubfx	r3, r3, #9, #1
     41c:	e7e0      	b.n	3e0 <usb_vendor_request_handler+0x78>
		if (pSetup->wValue)
     41e:	f44f 7300 	mov.w	r3, #512	; 0x200
     422:	8842      	ldrh	r2, [r0, #2]
     424:	e7e0      	b.n	3e8 <usb_vendor_request_handler+0x80>
			CC1V8_CLR;
     426:	4a79      	ldr	r2, [pc, #484]	; (60c <usb_vendor_request_handler+0x2a4>)
     428:	e7e0      	b.n	3ec <usb_vendor_request_handler+0x84>
		command[0] = 54; /* read part number */
     42a:	2336      	movs	r3, #54	; 0x36
     42c:	9300      	str	r3, [sp, #0]
		iap_entry(command, result);
     42e:	4b78      	ldr	r3, [pc, #480]	; (610 <usb_vendor_request_handler+0x2a8>)
     430:	4668      	mov	r0, sp
     432:	681b      	ldr	r3, [r3, #0]
     434:	a905      	add	r1, sp, #20
     436:	4798      	blx	r3
		pbData[0] = result[0] & 0xFF; /* status */
     438:	9b05      	ldr	r3, [sp, #20]
     43a:	702b      	strb	r3, [r5, #0]
		pbData[1] = result[1] & 0xFF;
     43c:	9b06      	ldr	r3, [sp, #24]
     43e:	706b      	strb	r3, [r5, #1]
		pbData[2] = (result[1] >> 8) & 0xFF;
     440:	9b06      	ldr	r3, [sp, #24]
     442:	0a1b      	lsrs	r3, r3, #8
     444:	70ab      	strb	r3, [r5, #2]
		pbData[3] = (result[1] >> 16) & 0xFF;
     446:	f8bd 301a 	ldrh.w	r3, [sp, #26]
     44a:	70eb      	strb	r3, [r5, #3]
		pbData[4] = (result[1] >> 24) & 0xFF;
     44c:	f89d 301b 	ldrb.w	r3, [sp, #27]
		pbData[4] = rr.reply_num;
     450:	712b      	strb	r3, [r5, #4]
		*piLen = 5;
     452:	2305      	movs	r3, #5
     454:	e035      	b.n	4c2 <usb_vendor_request_handler+0x15a>
		command[0] = 58; /* read device serial number */
     456:	233a      	movs	r3, #58	; 0x3a
     458:	9300      	str	r3, [sp, #0]
		iap_entry(command, result);
     45a:	4b6d      	ldr	r3, [pc, #436]	; (610 <usb_vendor_request_handler+0x2a8>)
     45c:	4668      	mov	r0, sp
     45e:	681b      	ldr	r3, [r3, #0]
     460:	a905      	add	r1, sp, #20
     462:	4798      	blx	r3
		pbData[0] = result[0] & 0xFF; /* status */
     464:	9b05      	ldr	r3, [sp, #20]
     466:	702b      	strb	r3, [r5, #0]
		pbData[1] = result[1] & 0xFF;
     468:	9b06      	ldr	r3, [sp, #24]
     46a:	706b      	strb	r3, [r5, #1]
		pbData[2] = (result[1] >> 8) & 0xFF;
     46c:	9b06      	ldr	r3, [sp, #24]
     46e:	0a1b      	lsrs	r3, r3, #8
     470:	70ab      	strb	r3, [r5, #2]
		pbData[3] = (result[1] >> 16) & 0xFF;
     472:	f8bd 301a 	ldrh.w	r3, [sp, #26]
     476:	70eb      	strb	r3, [r5, #3]
		pbData[4] = (result[1] >> 24) & 0xFF;
     478:	f89d 301b 	ldrb.w	r3, [sp, #27]
     47c:	712b      	strb	r3, [r5, #4]
		pbData[5] = result[2] & 0xFF;
     47e:	9b07      	ldr	r3, [sp, #28]
     480:	716b      	strb	r3, [r5, #5]
		pbData[6] = (result[2] >> 8) & 0xFF;
     482:	9b07      	ldr	r3, [sp, #28]
     484:	0a1b      	lsrs	r3, r3, #8
     486:	71ab      	strb	r3, [r5, #6]
		pbData[7] = (result[2] >> 16) & 0xFF;
     488:	f8bd 301e 	ldrh.w	r3, [sp, #30]
     48c:	71eb      	strb	r3, [r5, #7]
		pbData[8] = (result[2] >> 24) & 0xFF;
     48e:	f89d 301f 	ldrb.w	r3, [sp, #31]
     492:	722b      	strb	r3, [r5, #8]
		pbData[9] = result[3] & 0xFF;
     494:	9b08      	ldr	r3, [sp, #32]
     496:	726b      	strb	r3, [r5, #9]
		pbData[10] = (result[3] >> 8) & 0xFF;
     498:	9b08      	ldr	r3, [sp, #32]
     49a:	0a1b      	lsrs	r3, r3, #8
     49c:	72ab      	strb	r3, [r5, #10]
		pbData[11] = (result[3] >> 16) & 0xFF;
     49e:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
     4a2:	72eb      	strb	r3, [r5, #11]
		pbData[12] = (result[3] >> 24) & 0xFF;
     4a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
     4a8:	732b      	strb	r3, [r5, #12]
		pbData[13] = result[4] & 0xFF;
     4aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
     4ac:	736b      	strb	r3, [r5, #13]
		pbData[14] = (result[4] >> 8) & 0xFF;
     4ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
     4b0:	0a1b      	lsrs	r3, r3, #8
     4b2:	73ab      	strb	r3, [r5, #14]
		pbData[15] = (result[4] >> 16) & 0xFF;
     4b4:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
     4b8:	73eb      	strb	r3, [r5, #15]
		pbData[16] = (result[4] >> 24) & 0xFF;
     4ba:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
     4be:	742b      	strb	r3, [r5, #16]
		*piLen = 17;
     4c0:	2311      	movs	r3, #17
		*piLen = 0;
     4c2:	6023      	str	r3, [r4, #0]
		break;
     4c4:	e793      	b.n	3ee <usb_vendor_request_handler+0x86>
		pbData[0] = (PAEN) ? 1 : 0;
     4c6:	4b53      	ldr	r3, [pc, #332]	; (614 <usb_vendor_request_handler+0x2ac>)
     4c8:	681b      	ldr	r3, [r3, #0]
     4ca:	f3c3 13c0 	ubfx	r3, r3, #7, #1
     4ce:	e787      	b.n	3e0 <usb_vendor_request_handler+0x78>
		if (pSetup->wValue)
     4d0:	2380      	movs	r3, #128	; 0x80
     4d2:	8842      	ldrh	r2, [r0, #2]
		if (pSetup->wValue)
     4d4:	b13a      	cbz	r2, 4e6 <usb_vendor_request_handler+0x17e>
			HGM_SET;
     4d6:	4a50      	ldr	r2, [pc, #320]	; (618 <usb_vendor_request_handler+0x2b0>)
     4d8:	e788      	b.n	3ec <usb_vendor_request_handler+0x84>
		pbData[0] = (HGM) ? 1 : 0;
     4da:	4b4e      	ldr	r3, [pc, #312]	; (614 <usb_vendor_request_handler+0x2ac>)
     4dc:	e792      	b.n	404 <usb_vendor_request_handler+0x9c>
		if (pSetup->wValue)
     4de:	f44f 7380 	mov.w	r3, #256	; 0x100
     4e2:	8842      	ldrh	r2, [r0, #2]
     4e4:	e7f6      	b.n	4d4 <usb_vendor_request_handler+0x16c>
			HGM_CLR;
     4e6:	4a4d      	ldr	r2, [pc, #308]	; (61c <usb_vendor_request_handler+0x2b4>)
     4e8:	e780      	b.n	3ec <usb_vendor_request_handler+0x84>
		requested_mode = MODE_TX_TEST;
     4ea:	2203      	movs	r2, #3
     4ec:	4b44      	ldr	r3, [pc, #272]	; (600 <usb_vendor_request_handler+0x298>)
		requested_mode = MODE_IDLE;
     4ee:	605a      	str	r2, [r3, #4]
		break;
     4f0:	e77d      	b.n	3ee <usb_vendor_request_handler+0x86>
		pbData[0] = cc2400_get(FREND) & 0x7;
     4f2:	2005      	movs	r0, #5
     4f4:	f000 ff48 	bl	1388 <cc2400_get>
     4f8:	f000 0007 	and.w	r0, r0, #7
     4fc:	7028      	strb	r0, [r5, #0]
		*piLen = 1;
     4fe:	2001      	movs	r0, #1
     500:	6020      	str	r0, [r4, #0]
}
     502:	b00a      	add	sp, #40	; 0x28
     504:	bd70      	pop	{r4, r5, r6, pc}
		if( pSetup->wValue < 8 ) {
     506:	8841      	ldrh	r1, [r0, #2]
     508:	2907      	cmp	r1, #7
     50a:	d876      	bhi.n	5fa <usb_vendor_request_handler+0x292>
			cc2400_set(FREND, 8 | pSetup->wValue);
     50c:	2005      	movs	r0, #5
     50e:	f041 0108 	orr.w	r1, r1, #8
     512:	f000 ff42 	bl	139a <cc2400_set>
		break;
     516:	e76a      	b.n	3ee <usb_vendor_request_handler+0x86>
		requested_mode = MODE_RANGE_TEST;
     518:	2205      	movs	r2, #5
     51a:	4b39      	ldr	r3, [pc, #228]	; (600 <usb_vendor_request_handler+0x298>)
     51c:	e7e7      	b.n	4ee <usb_vendor_request_handler+0x186>
		requested_mode = MODE_REPEATER;
     51e:	2206      	movs	r2, #6
     520:	4b37      	ldr	r3, [pc, #220]	; (600 <usb_vendor_request_handler+0x298>)
     522:	e7e4      	b.n	4ee <usb_vendor_request_handler+0x186>
		pbData[0] = rr.valid;
     524:	4b3e      	ldr	r3, [pc, #248]	; (620 <usb_vendor_request_handler+0x2b8>)
     526:	781a      	ldrb	r2, [r3, #0]
     528:	702a      	strb	r2, [r5, #0]
		pbData[1] = rr.request_pa;
     52a:	785a      	ldrb	r2, [r3, #1]
     52c:	706a      	strb	r2, [r5, #1]
		pbData[2] = rr.request_num;
     52e:	789a      	ldrb	r2, [r3, #2]
     530:	70aa      	strb	r2, [r5, #2]
		pbData[3] = rr.reply_pa;
     532:	78da      	ldrb	r2, [r3, #3]
     534:	70ea      	strb	r2, [r5, #3]
		pbData[4] = rr.reply_num;
     536:	791b      	ldrb	r3, [r3, #4]
     538:	e78a      	b.n	450 <usb_vendor_request_handler+0xe8>
		requested_mode = MODE_IDLE;
     53a:	2200      	movs	r2, #0
     53c:	4b30      	ldr	r3, [pc, #192]	; (600 <usb_vendor_request_handler+0x298>)
     53e:	e7d6      	b.n	4ee <usb_vendor_request_handler+0x186>
		pbData[0] = modulation;
     540:	4b2f      	ldr	r3, [pc, #188]	; (600 <usb_vendor_request_handler+0x298>)
     542:	689b      	ldr	r3, [r3, #8]
     544:	e74c      	b.n	3e0 <usb_vendor_request_handler+0x78>
		modulation = pSetup->wValue;
     546:	8842      	ldrh	r2, [r0, #2]
     548:	4b2d      	ldr	r3, [pc, #180]	; (600 <usb_vendor_request_handler+0x298>)
     54a:	609a      	str	r2, [r3, #8]
		break;
     54c:	e74f      	b.n	3ee <usb_vendor_request_handler+0x86>
		pbData[0] = channel & 0xFF;
     54e:	4b35      	ldr	r3, [pc, #212]	; (624 <usb_vendor_request_handler+0x2bc>)
     550:	881a      	ldrh	r2, [r3, #0]
     552:	702a      	strb	r2, [r5, #0]
		pbData[1] = (channel >> 8) & 0xFF;
     554:	881b      	ldrh	r3, [r3, #0]
     556:	f3c3 2307 	ubfx	r3, r3, #8, #8
     55a:	706b      	strb	r3, [r5, #1]
		*piLen = 2;
     55c:	2302      	movs	r3, #2
     55e:	e7b0      	b.n	4c2 <usb_vendor_request_handler+0x15a>
		channel = pSetup->wValue;
     560:	4b30      	ldr	r3, [pc, #192]	; (624 <usb_vendor_request_handler+0x2bc>)
     562:	8842      	ldrh	r2, [r0, #2]
     564:	801a      	strh	r2, [r3, #0]
		channel = MAX(channel, MIN_FREQ);
     566:	f640 02dc 	movw	r2, #2268	; 0x8dc
     56a:	8819      	ldrh	r1, [r3, #0]
     56c:	b289      	uxth	r1, r1
     56e:	4291      	cmp	r1, r2
		channel = MIN(channel, MAX_FREQ);
     570:	f640 21e9 	movw	r1, #2793	; 0xae9
		channel = MAX(channel, MIN_FREQ);
     574:	bf84      	itt	hi
     576:	881a      	ldrhhi	r2, [r3, #0]
     578:	b292      	uxthhi	r2, r2
     57a:	801a      	strh	r2, [r3, #0]
		channel = MIN(channel, MAX_FREQ);
     57c:	881a      	ldrh	r2, [r3, #0]
     57e:	b292      	uxth	r2, r2
     580:	428a      	cmp	r2, r1
     582:	bf8e      	itee	hi
     584:	f640 22ea 	movwhi	r2, #2794	; 0xaea
     588:	881a      	ldrhls	r2, [r3, #0]
     58a:	b292      	uxthls	r2, r2
     58c:	801a      	strh	r2, [r3, #0]
		break;
     58e:	e72e      	b.n	3ee <usb_vendor_request_handler+0x86>
		command[0] = 57;
     590:	2339      	movs	r3, #57	; 0x39
     592:	9300      	str	r3, [sp, #0]
		iap_entry(command, result);
     594:	4b1e      	ldr	r3, [pc, #120]	; (610 <usb_vendor_request_handler+0x2a8>)
     596:	4668      	mov	r0, sp
     598:	681b      	ldr	r3, [r3, #0]
     59a:	a905      	add	r1, sp, #20
     59c:	4798      	blx	r3
		*piLen = 0; /* should never return */
     59e:	e719      	b.n	3d4 <usb_vendor_request_handler+0x6c>
		bootloader_ctrl = DFU_MODE;
     5a0:	4b21      	ldr	r3, [pc, #132]	; (628 <usb_vendor_request_handler+0x2c0>)
     5a2:	4a22      	ldr	r2, [pc, #136]	; (62c <usb_vendor_request_handler+0x2c4>)
     5a4:	601a      	str	r2, [r3, #0]
		reset();
     5a6:	f000 ffd1 	bl	154c <reset>
		break;
     5aa:	e720      	b.n	3ee <usb_vendor_request_handler+0x86>
		if (pSetup->wValue < 2049 || pSetup->wValue > 3072 || 
     5ac:	f46f 6500 	mvn.w	r5, #2048	; 0x800
     5b0:	8842      	ldrh	r2, [r0, #2]
     5b2:	1953      	adds	r3, r2, r5
     5b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
     5b8:	d21f      	bcs.n	5fa <usb_vendor_request_handler+0x292>
     5ba:	f46f 6100 	mvn.w	r1, #2048	; 0x800
				pSetup->wIndex < 2049 || pSetup->wIndex > 3072 ||
     5be:	8883      	ldrh	r3, [r0, #4]
		if (pSetup->wValue < 2049 || pSetup->wValue > 3072 || 
     5c0:	1859      	adds	r1, r3, r1
     5c2:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
     5c6:	d218      	bcs.n	5fa <usb_vendor_request_handler+0x292>
				pSetup->wIndex < 2049 || pSetup->wIndex > 3072 ||
     5c8:	429a      	cmp	r2, r3
     5ca:	d816      	bhi.n	5fa <usb_vendor_request_handler+0x292>
		low_freq = pSetup->wValue;
     5cc:	4915      	ldr	r1, [pc, #84]	; (624 <usb_vendor_request_handler+0x2bc>)
     5ce:	804a      	strh	r2, [r1, #2]
		requested_mode = MODE_SPECAN;
     5d0:	2204      	movs	r2, #4
		high_freq = pSetup->wIndex;
     5d2:	808b      	strh	r3, [r1, #4]
		requested_mode = MODE_SPECAN;
     5d4:	4b0a      	ldr	r3, [pc, #40]	; (600 <usb_vendor_request_handler+0x298>)
     5d6:	605a      	str	r2, [r3, #4]
     5d8:	e6fc      	b.n	3d4 <usb_vendor_request_handler+0x6c>
		pbData[0] = 0x00;
     5da:	2300      	movs	r3, #0
		length = (u8)strlen(GIT_REVISION);
     5dc:	4814      	ldr	r0, [pc, #80]	; (630 <usb_vendor_request_handler+0x2c8>)
		pbData[0] = 0x00;
     5de:	702b      	strb	r3, [r5, #0]
		pbData[1] = 0x00;
     5e0:	706b      	strb	r3, [r5, #1]
		length = (u8)strlen(GIT_REVISION);
     5e2:	f001 fbdb 	bl	1d9c <strlen>
		pbData[2] = length;
     5e6:	b2c6      	uxtb	r6, r0
		memcpy(&pbData[3], GIT_REVISION, length);
     5e8:	4632      	mov	r2, r6
		length = (u8)strlen(GIT_REVISION);
     5ea:	70a8      	strb	r0, [r5, #2]
		memcpy(&pbData[3], GIT_REVISION, length);
     5ec:	4910      	ldr	r1, [pc, #64]	; (630 <usb_vendor_request_handler+0x2c8>)
     5ee:	1ce8      	adds	r0, r5, #3
		*piLen = 2 + 1 + length;
     5f0:	3603      	adds	r6, #3
		memcpy(&pbData[3], GIT_REVISION, length);
     5f2:	f001 fb5d 	bl	1cb0 <memcpy>
		*piLen = 2 + 1 + length;
     5f6:	6026      	str	r6, [r4, #0]
     5f8:	e6f9      	b.n	3ee <usb_vendor_request_handler+0x86>
			return FALSE;
     5fa:	2000      	movs	r0, #0
     5fc:	e781      	b.n	502 <usb_vendor_request_handler+0x19a>
     5fe:	bf00      	nop
     600:	10000520 	.word	0x10000520
     604:	2009c034 	.word	0x2009c034
     608:	2009c038 	.word	0x2009c038
     60c:	2009c03c 	.word	0x2009c03c
     610:	00001efc 	.word	0x00001efc
     614:	2009c054 	.word	0x2009c054
     618:	2009c058 	.word	0x2009c058
     61c:	2009c05c 	.word	0x2009c05c
     620:	10002644 	.word	0x10002644
     624:	10000450 	.word	0x10000450
     628:	1000001c 	.word	0x1000001c
     62c:	4305bb21 	.word	0x4305bb21
     630:	00001dfc 	.word	0x00001dfc

00000634 <queue_init>:
	head = 0;
     634:	2200      	movs	r2, #0
     636:	4b02      	ldr	r3, [pc, #8]	; (640 <queue_init+0xc>)
     638:	60da      	str	r2, [r3, #12]
	tail = 0;
     63a:	611a      	str	r2, [r3, #16]
}
     63c:	4770      	bx	lr
     63e:	bf00      	nop
     640:	10000520 	.word	0x10000520

00000644 <enqueue>:
{
     644:	b570      	push	{r4, r5, r6, lr}
	u8 h = head & 0x7F;
     646:	4b18      	ldr	r3, [pc, #96]	; (6a8 <enqueue+0x64>)
     648:	68dc      	ldr	r4, [r3, #12]
	u8 t = tail & 0x7F;
     64a:	691a      	ldr	r2, [r3, #16]
	if (h == n)
     64c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	u8 t = tail & 0x7F;
     650:	f002 027f 	and.w	r2, r2, #127	; 0x7f
	u8 n = (t + 1) & 0x7F;
     654:	1c51      	adds	r1, r2, #1
	if (h == n)
     656:	f001 017f 	and.w	r1, r1, #127	; 0x7f
     65a:	428c      	cmp	r4, r1
     65c:	d021      	beq.n	6a2 <enqueue+0x5e>
	fifo[t].clkn_high = clkn_high;
     65e:	4913      	ldr	r1, [pc, #76]	; (6ac <enqueue+0x68>)
     660:	0195      	lsls	r5, r2, #6
     662:	780c      	ldrb	r4, [r1, #0]
     664:	4912      	ldr	r1, [pc, #72]	; (6b0 <enqueue+0x6c>)
     666:	eb01 1282 	add.w	r2, r1, r2, lsl #6
     66a:	70d4      	strb	r4, [r2, #3]
	fifo[t].clk100ns = CLK100NS;
     66c:	4c11      	ldr	r4, [pc, #68]	; (6b4 <enqueue+0x70>)
     66e:	6824      	ldr	r4, [r4, #0]
     670:	6054      	str	r4, [r2, #4]
	USRLED_SET;
     672:	2402      	movs	r4, #2
     674:	4a10      	ldr	r2, [pc, #64]	; (6b8 <enqueue+0x74>)
     676:	6014      	str	r4, [r2, #0]
	for (i = 0; i < DMA_SIZE; i++)
     678:	f105 020e 	add.w	r2, r5, #14
     67c:	1e44      	subs	r4, r0, #1
     67e:	440a      	add	r2, r1
     680:	3031      	adds	r0, #49	; 0x31
		fifo[t].data[i] = buf[i];
     682:	f814 6f01 	ldrb.w	r6, [r4, #1]!
	for (i = 0; i < DMA_SIZE; i++)
     686:	4284      	cmp	r4, r0
		fifo[t].data[i] = buf[i];
     688:	f802 6b01 	strb.w	r6, [r2], #1
	for (i = 0; i < DMA_SIZE; i++)
     68c:	d1f9      	bne.n	682 <enqueue+0x3e>
	fifo[t].status = status;
     68e:	7d1a      	ldrb	r2, [r3, #20]
     690:	4429      	add	r1, r5
     692:	704a      	strb	r2, [r1, #1]
	status = 0;
     694:	2200      	movs	r2, #0
	return 1;
     696:	2001      	movs	r0, #1
	status = 0;
     698:	751a      	strb	r2, [r3, #20]
	++tail;
     69a:	691a      	ldr	r2, [r3, #16]
     69c:	3201      	adds	r2, #1
     69e:	611a      	str	r2, [r3, #16]
}
     6a0:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
     6a2:	2000      	movs	r0, #0
     6a4:	e7fc      	b.n	6a0 <enqueue+0x5c>
     6a6:	bf00      	nop
     6a8:	10000520 	.word	0x10000520
     6ac:	100005fc 	.word	0x100005fc
     6b0:	10000600 	.word	0x10000600
     6b4:	40004008 	.word	0x40004008
     6b8:	2009c038 	.word	0x2009c038

000006bc <dequeue>:
{
     6bc:	b510      	push	{r4, lr}
	u8 h = head & 0x7F;
     6be:	4c0d      	ldr	r4, [pc, #52]	; (6f4 <dequeue+0x38>)
     6c0:	68e3      	ldr	r3, [r4, #12]
	u8 t = tail & 0x7F;
     6c2:	6922      	ldr	r2, [r4, #16]
	u8 h = head & 0x7F;
     6c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	if (h == t) {
     6c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
     6cc:	4293      	cmp	r3, r2
     6ce:	d104      	bne.n	6da <dequeue+0x1e>
		USRLED_CLR;
     6d0:	2202      	movs	r2, #2
		return 0;
     6d2:	2000      	movs	r0, #0
		USRLED_CLR;
     6d4:	4b08      	ldr	r3, [pc, #32]	; (6f8 <dequeue+0x3c>)
     6d6:	601a      	str	r2, [r3, #0]
}
     6d8:	bd10      	pop	{r4, pc}
	USBHwEPWrite(BULK_IN_EP, (u8 *)&fifo[h], sizeof(usb_pkt_rx));
     6da:	4908      	ldr	r1, [pc, #32]	; (6fc <dequeue+0x40>)
     6dc:	2240      	movs	r2, #64	; 0x40
     6de:	eb01 1183 	add.w	r1, r1, r3, lsl #6
     6e2:	2082      	movs	r0, #130	; 0x82
     6e4:	f001 f8aa 	bl	183c <USBHwEPWrite>
	++head;
     6e8:	68e3      	ldr	r3, [r4, #12]
	return 1;
     6ea:	2001      	movs	r0, #1
	++head;
     6ec:	3301      	adds	r3, #1
     6ee:	60e3      	str	r3, [r4, #12]
	return 1;
     6f0:	e7f2      	b.n	6d8 <dequeue+0x1c>
     6f2:	bf00      	nop
     6f4:	10000520 	.word	0x10000520
     6f8:	2009c03c 	.word	0x2009c03c
     6fc:	10000600 	.word	0x10000600

00000700 <ubertooth_usb_init>:
{
     700:	b508      	push	{r3, lr}
	USBInit();
     702:	f000 ffd3 	bl	16ac <USBInit>
	USBRegisterDescriptors(abDescriptors);
     706:	4806      	ldr	r0, [pc, #24]	; (720 <ubertooth_usb_init+0x20>)
     708:	f001 f9f2 	bl	1af0 <USBRegisterDescriptors>
	USBRegisterRequestHandler(REQTYPE_TYPE_VENDOR, usb_vendor_request_handler, abVendorReqData);
     70c:	4a05      	ldr	r2, [pc, #20]	; (724 <ubertooth_usb_init+0x24>)
     70e:	4906      	ldr	r1, [pc, #24]	; (728 <ubertooth_usb_init+0x28>)
     710:	2002      	movs	r0, #2
     712:	f000 ffc1 	bl	1698 <USBRegisterRequestHandler>
	USBHwConnect(TRUE);
     716:	2001      	movs	r0, #1
     718:	f001 f85f 	bl	17da <USBHwConnect>
}
     71c:	2000      	movs	r0, #0
     71e:	bd08      	pop	{r3, pc}
     720:	00001e07 	.word	0x00001e07
     724:	10000535 	.word	0x10000535
     728:	00000369 	.word	0x00000369

0000072c <TIMER0_IRQHandler>:
	if (T0IR & TIR_MR0_Interrupt) {
     72c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
     730:	6813      	ldr	r3, [r2, #0]
     732:	07db      	lsls	r3, r3, #31
     734:	d508      	bpl.n	748 <TIMER0_IRQHandler+0x1c>
		++clkn_high;
     736:	4905      	ldr	r1, [pc, #20]	; (74c <TIMER0_IRQHandler+0x20>)
     738:	780b      	ldrb	r3, [r1, #0]
     73a:	3301      	adds	r3, #1
     73c:	b2db      	uxtb	r3, r3
     73e:	700b      	strb	r3, [r1, #0]
		T0IR |= TIR_MR0_Interrupt;
     740:	6813      	ldr	r3, [r2, #0]
     742:	f043 0301 	orr.w	r3, r3, #1
     746:	6013      	str	r3, [r2, #0]
}
     748:	4770      	bx	lr
     74a:	bf00      	nop
     74c:	100005fc 	.word	0x100005fc

00000750 <DMA_IRQHandler>:
	if (DMACIntStat & (1 << 0)) {
     750:	4b0f      	ldr	r3, [pc, #60]	; (790 <DMA_IRQHandler+0x40>)
     752:	681b      	ldr	r3, [r3, #0]
     754:	07d9      	lsls	r1, r3, #31
     756:	d519      	bpl.n	78c <DMA_IRQHandler+0x3c>
		if (DMACIntTCStat & (1 << 0)) {
     758:	4b0e      	ldr	r3, [pc, #56]	; (794 <DMA_IRQHandler+0x44>)
     75a:	681b      	ldr	r3, [r3, #0]
     75c:	07da      	lsls	r2, r3, #31
     75e:	d508      	bpl.n	772 <DMA_IRQHandler+0x22>
			DMACIntTCClear |= (1 << 0);
     760:	4a0d      	ldr	r2, [pc, #52]	; (798 <DMA_IRQHandler+0x48>)
     762:	6813      	ldr	r3, [r2, #0]
     764:	f043 0301 	orr.w	r3, r3, #1
     768:	6013      	str	r3, [r2, #0]
			++rx_tc;
     76a:	4a0c      	ldr	r2, [pc, #48]	; (79c <DMA_IRQHandler+0x4c>)
     76c:	6813      	ldr	r3, [r2, #0]
     76e:	3301      	adds	r3, #1
     770:	6013      	str	r3, [r2, #0]
		if (DMACIntErrStat & (1 << 0)) {
     772:	4b0b      	ldr	r3, [pc, #44]	; (7a0 <DMA_IRQHandler+0x50>)
     774:	681b      	ldr	r3, [r3, #0]
     776:	07db      	lsls	r3, r3, #31
     778:	d508      	bpl.n	78c <DMA_IRQHandler+0x3c>
			DMACIntErrClr |= (1 << 0);
     77a:	4a0a      	ldr	r2, [pc, #40]	; (7a4 <DMA_IRQHandler+0x54>)
     77c:	6813      	ldr	r3, [r2, #0]
     77e:	f043 0301 	orr.w	r3, r3, #1
     782:	6013      	str	r3, [r2, #0]
			++rx_err;
     784:	4a08      	ldr	r2, [pc, #32]	; (7a8 <DMA_IRQHandler+0x58>)
     786:	6813      	ldr	r3, [r2, #0]
     788:	3301      	adds	r3, #1
     78a:	6013      	str	r3, [r2, #0]
}
     78c:	4770      	bx	lr
     78e:	bf00      	nop
     790:	50004000 	.word	0x50004000
     794:	50004004 	.word	0x50004004
     798:	50004008 	.word	0x50004008
     79c:	100005e8 	.word	0x100005e8
     7a0:	5000400c 	.word	0x5000400c
     7a4:	50004010 	.word	0x50004010
     7a8:	1000267c 	.word	0x1000267c

000007ac <cc2400_rx>:

/* start un-buffered rx */
void cc2400_rx()
{
     7ac:	b508      	push	{r3, lr}
	if (modulation == MOD_BT_BASIC_RATE) {
     7ae:	4b2b      	ldr	r3, [pc, #172]	; (85c <cc2400_rx+0xb0>)
     7b0:	689a      	ldr	r2, [r3, #8]
     7b2:	bb9a      	cbnz	r2, 81c <cc2400_rx+0x70>
		cc2400_set(MANAND,  0x7fff);
     7b4:	f647 71ff 	movw	r1, #32767	; 0x7fff
     7b8:	200d      	movs	r0, #13
     7ba:	f000 fdee 	bl	139a <cc2400_set>
		cc2400_set(LMTST,   0x2b22);
     7be:	f642 3122 	movw	r1, #11042	; 0x2b22
     7c2:	2012      	movs	r0, #18
     7c4:	f000 fde9 	bl	139a <cc2400_set>
		cc2400_set(MDMTST0, 0x134b); // without PRNG
     7c8:	f241 314b 	movw	r1, #4939	; 0x134b
     7cc:	2014      	movs	r0, #20
     7ce:	f000 fde4 	bl	139a <cc2400_set>
		cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
     7d2:	f240 1101 	movw	r1, #257	; 0x101
     7d6:	2020      	movs	r0, #32
     7d8:	f000 fddf 	bl	139a <cc2400_set>
		cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
     7dc:	4b20      	ldr	r3, [pc, #128]	; (860 <cc2400_rx+0xb4>)
     7de:	2002      	movs	r0, #2
     7e0:	8819      	ldrh	r1, [r3, #0]
     7e2:	3901      	subs	r1, #1
     7e4:	b289      	uxth	r1, r1
     7e6:	f000 fdd8 	bl	139a <cc2400_set>
		cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
     7ea:	2129      	movs	r1, #41	; 0x29
		cc2400_set(MANAND,  0x7fff);
		cc2400_set(LMTST,   0x2b22);
		cc2400_set(MDMTST0, 0x134b); // without PRNG
		cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
		cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
		cc2400_set(MDMCTRL, 0x0040); // 250 kHz frequency deviation
     7ec:	2003      	movs	r0, #3
     7ee:	f000 fdd4 	bl	139a <cc2400_set>
	} else {
		/* oops */
		return;
	}
	while (!(cc2400_status() & XOSC16M_STABLE));
     7f2:	f000 fde5 	bl	13c0 <cc2400_status>
     7f6:	0642      	lsls	r2, r0, #25
     7f8:	d5fb      	bpl.n	7f2 <cc2400_rx+0x46>
	cc2400_strobe(SFSON);
     7fa:	2061      	movs	r0, #97	; 0x61
     7fc:	f000 fde7 	bl	13ce <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
     800:	f000 fdde 	bl	13c0 <cc2400_status>
     804:	0743      	lsls	r3, r0, #29
     806:	d5fb      	bpl.n	800 <cc2400_rx+0x54>
	cc2400_strobe(SRX);
     808:	2062      	movs	r0, #98	; 0x62
     80a:	f000 fde0 	bl	13ce <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
     80e:	2280      	movs	r2, #128	; 0x80
     810:	4b14      	ldr	r3, [pc, #80]	; (864 <cc2400_rx+0xb8>)
     812:	601a      	str	r2, [r3, #0]
	HGM_SET;
     814:	f44f 7280 	mov.w	r2, #256	; 0x100
     818:	601a      	str	r2, [r3, #0]
#endif
}
     81a:	bd08      	pop	{r3, pc}
	} else if (modulation == MOD_BT_LOW_ENERGY) {
     81c:	689b      	ldr	r3, [r3, #8]
     81e:	2b01      	cmp	r3, #1
     820:	d1fb      	bne.n	81a <cc2400_rx+0x6e>
		cc2400_set(MANAND,  0x7fff);
     822:	f647 71ff 	movw	r1, #32767	; 0x7fff
     826:	200d      	movs	r0, #13
     828:	f000 fdb7 	bl	139a <cc2400_set>
		cc2400_set(LMTST,   0x2b22);
     82c:	f642 3122 	movw	r1, #11042	; 0x2b22
     830:	2012      	movs	r0, #18
     832:	f000 fdb2 	bl	139a <cc2400_set>
		cc2400_set(MDMTST0, 0x134b); // without PRNG
     836:	f241 314b 	movw	r1, #4939	; 0x134b
     83a:	2014      	movs	r0, #20
     83c:	f000 fdad 	bl	139a <cc2400_set>
		cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
     840:	f240 1101 	movw	r1, #257	; 0x101
     844:	2020      	movs	r0, #32
     846:	f000 fda8 	bl	139a <cc2400_set>
		cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
     84a:	4b05      	ldr	r3, [pc, #20]	; (860 <cc2400_rx+0xb4>)
     84c:	2002      	movs	r0, #2
     84e:	8819      	ldrh	r1, [r3, #0]
     850:	3901      	subs	r1, #1
     852:	b289      	uxth	r1, r1
     854:	f000 fda1 	bl	139a <cc2400_set>
		cc2400_set(MDMCTRL, 0x0040); // 250 kHz frequency deviation
     858:	2140      	movs	r1, #64	; 0x40
     85a:	e7c7      	b.n	7ec <cc2400_rx+0x40>
     85c:	10000520 	.word	0x10000520
     860:	10000450 	.word	0x10000450
     864:	2009c058 	.word	0x2009c058

00000868 <cc2400_txtest>:

void cc2400_txtest()
{
     868:	b510      	push	{r4, lr}
#ifdef TX_ENABLE
	if (modulation == MOD_BT_BASIC_RATE) {
     86a:	4c27      	ldr	r4, [pc, #156]	; (908 <cc2400_txtest+0xa0>)
     86c:	68a3      	ldr	r3, [r4, #8]
     86e:	bb83      	cbnz	r3, 8d2 <cc2400_txtest+0x6a>
		cc2400_set(MANAND,  0x7fff);
     870:	f647 71ff 	movw	r1, #32767	; 0x7fff
     874:	200d      	movs	r0, #13
     876:	f000 fd90 	bl	139a <cc2400_set>
		cc2400_set(LMTST,   0x2b22);
     87a:	f642 3122 	movw	r1, #11042	; 0x2b22
     87e:	2012      	movs	r0, #18
     880:	f000 fd8b 	bl	139a <cc2400_set>
		cc2400_set(MDMTST0, 0x334b); // with PRNG
     884:	f243 314b 	movw	r1, #13131	; 0x334b
     888:	2014      	movs	r0, #20
     88a:	f000 fd86 	bl	139a <cc2400_set>
		cc2400_set(FSDIV,   channel);
     88e:	4b1f      	ldr	r3, [pc, #124]	; (90c <cc2400_txtest+0xa4>)
     890:	2002      	movs	r0, #2
     892:	8819      	ldrh	r1, [r3, #0]
     894:	b289      	uxth	r1, r1
     896:	f000 fd80 	bl	139a <cc2400_set>
		cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
     89a:	2129      	movs	r1, #41	; 0x29
	} else if (modulation == MOD_BT_LOW_ENERGY) {
		cc2400_set(MANAND,  0x7fff);
		cc2400_set(LMTST,   0x2b22);
		cc2400_set(MDMTST0, 0x334b); // with PRNG
		cc2400_set(FSDIV,   channel);
		cc2400_set(MDMCTRL, 0x0040); // 250 kHz frequency deviation
     89c:	2003      	movs	r0, #3
     89e:	f000 fd7c 	bl	139a <cc2400_set>
	} else {
		/* oops */
		return;
	}
	while (!(cc2400_status() & XOSC16M_STABLE));
     8a2:	f000 fd8d 	bl	13c0 <cc2400_status>
     8a6:	0642      	lsls	r2, r0, #25
     8a8:	d5fb      	bpl.n	8a2 <cc2400_txtest+0x3a>
	cc2400_strobe(SFSON);
     8aa:	2061      	movs	r0, #97	; 0x61
     8ac:	f000 fd8f 	bl	13ce <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
     8b0:	f000 fd86 	bl	13c0 <cc2400_status>
     8b4:	0743      	lsls	r3, r0, #29
     8b6:	d5fb      	bpl.n	8b0 <cc2400_txtest+0x48>
	TXLED_SET;
     8b8:	f44f 7280 	mov.w	r2, #256	; 0x100
     8bc:	4b14      	ldr	r3, [pc, #80]	; (910 <cc2400_txtest+0xa8>)
	cc2400_strobe(STX);
     8be:	2063      	movs	r0, #99	; 0x63
	TXLED_SET;
     8c0:	601a      	str	r2, [r3, #0]
	cc2400_strobe(STX);
     8c2:	f000 fd84 	bl	13ce <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
     8c6:	2280      	movs	r2, #128	; 0x80
     8c8:	4b12      	ldr	r3, [pc, #72]	; (914 <cc2400_txtest+0xac>)
     8ca:	601a      	str	r2, [r3, #0]
#endif
	mode = MODE_TX_TEST;
     8cc:	2303      	movs	r3, #3
     8ce:	62a3      	str	r3, [r4, #40]	; 0x28
#endif
}
     8d0:	bd10      	pop	{r4, pc}
	} else if (modulation == MOD_BT_LOW_ENERGY) {
     8d2:	68a3      	ldr	r3, [r4, #8]
     8d4:	2b01      	cmp	r3, #1
     8d6:	d1fb      	bne.n	8d0 <cc2400_txtest+0x68>
		cc2400_set(MANAND,  0x7fff);
     8d8:	f647 71ff 	movw	r1, #32767	; 0x7fff
     8dc:	200d      	movs	r0, #13
     8de:	f000 fd5c 	bl	139a <cc2400_set>
		cc2400_set(LMTST,   0x2b22);
     8e2:	f642 3122 	movw	r1, #11042	; 0x2b22
     8e6:	2012      	movs	r0, #18
     8e8:	f000 fd57 	bl	139a <cc2400_set>
		cc2400_set(MDMTST0, 0x334b); // with PRNG
     8ec:	f243 314b 	movw	r1, #13131	; 0x334b
     8f0:	2014      	movs	r0, #20
     8f2:	f000 fd52 	bl	139a <cc2400_set>
		cc2400_set(FSDIV,   channel);
     8f6:	4b05      	ldr	r3, [pc, #20]	; (90c <cc2400_txtest+0xa4>)
     8f8:	2002      	movs	r0, #2
     8fa:	8819      	ldrh	r1, [r3, #0]
     8fc:	b289      	uxth	r1, r1
     8fe:	f000 fd4c 	bl	139a <cc2400_set>
		cc2400_set(MDMCTRL, 0x0040); // 250 kHz frequency deviation
     902:	2140      	movs	r1, #64	; 0x40
     904:	e7ca      	b.n	89c <cc2400_txtest+0x34>
     906:	bf00      	nop
     908:	10000520 	.word	0x10000520
     90c:	10000450 	.word	0x10000450
     910:	2009c038 	.word	0x2009c038
     914:	2009c058 	.word	0x2009c058

00000918 <cc2400_rangetest>:
 *     reply number: 1 byte
 *   crc: 2 bytes
 */

void cc2400_rangetest()
{
     918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     91c:	b099      	sub	sp, #100	; 0x64
     91e:	af00      	add	r7, sp, #0
	u8 len = 22;
	u8 pa = 0;
	u8 txbuf[len];
	u8 rxbuf[len];

	mode = MODE_RANGE_TEST;
     920:	2505      	movs	r5, #5
     922:	4b9b      	ldr	r3, [pc, #620]	; (b90 <cc2400_rangetest+0x278>)
	txbuf[0] = len - 1; // length of data (rest of payload)
	txbuf[1] = 0; // request

	// read device serial number
	command[0] = 58;
	iap_entry(command, result);
     924:	f107 011c 	add.w	r1, r7, #28
	mode = MODE_RANGE_TEST;
     928:	629d      	str	r5, [r3, #40]	; 0x28
	txbuf[0] = len - 1; // length of data (rest of payload)
     92a:	2315      	movs	r3, #21
     92c:	863b      	strh	r3, [r7, #48]	; 0x30
	command[0] = 58;
     92e:	233a      	movs	r3, #58	; 0x3a
     930:	60bb      	str	r3, [r7, #8]
	iap_entry(command, result);
     932:	4b98      	ldr	r3, [pc, #608]	; (b94 <cc2400_rangetest+0x27c>)
     934:	f107 0008 	add.w	r0, r7, #8
     938:	681b      	ldr	r3, [r3, #0]
{
     93a:	f8c7 d004 	str.w	sp, [r7, #4]
	iap_entry(command, result);
     93e:	4798      	blx	r3
	if ((result[0] & 0xFF) != 0) //status check
     940:	7f3c      	ldrb	r4, [r7, #28]
     942:	2c00      	cmp	r4, #0
     944:	f040 8120 	bne.w	b88 <cc2400_rangetest+0x270>
		return;
	txbuf[2] = (result[1] >> 24) & 0xFF;
     948:	6a3b      	ldr	r3, [r7, #32]
     94a:	8c3a      	ldrh	r2, [r7, #32]
     94c:	0e19      	lsrs	r1, r3, #24
	txbuf[3] = (result[1] >> 16) & 0xFF;
     94e:	0c1b      	lsrs	r3, r3, #16
     950:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	txbuf[4] = (result[1] >> 8) & 0xFF;
	txbuf[5] = result[1] & 0xFF;
	txbuf[6] = (result[2] >> 24) & 0xFF;
     954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	txbuf[2] = (result[1] >> 24) & 0xFF;
     956:	f887 1032 	strb.w	r1, [r7, #50]	; 0x32
	txbuf[6] = (result[2] >> 24) & 0xFF;
     95a:	0e19      	lsrs	r1, r3, #24
	txbuf[7] = (result[2] >> 16) & 0xFF;
     95c:	0c1b      	lsrs	r3, r3, #16
     95e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	txbuf[8] = (result[2] >> 8) & 0xFF;
	txbuf[9] = result[2] & 0xFF;
	txbuf[10] = (result[3] >> 24) & 0xFF;
     962:	6abb      	ldr	r3, [r7, #40]	; 0x28
	txbuf[6] = (result[2] >> 24) & 0xFF;
     964:	f887 1036 	strb.w	r1, [r7, #54]	; 0x36
	txbuf[10] = (result[3] >> 24) & 0xFF;
     968:	0e19      	lsrs	r1, r3, #24
	txbuf[11] = (result[3] >> 16) & 0xFF;
     96a:	0c1b      	lsrs	r3, r3, #16
     96c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	txbuf[12] = (result[3] >> 8) & 0xFF;
	txbuf[13] = result[3] & 0xFF;
	txbuf[14] = (result[4] >> 24) & 0xFF;
     970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	txbuf[10] = (result[3] >> 24) & 0xFF;
     972:	f887 103a 	strb.w	r1, [r7, #58]	; 0x3a
	txbuf[14] = (result[4] >> 24) & 0xFF;
     976:	0e19      	lsrs	r1, r3, #24
	txbuf[15] = (result[4] >> 16) & 0xFF;
     978:	0c1b      	lsrs	r3, r3, #16
     97a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	txbuf[16] = (result[4] >> 8) & 0xFF;
	txbuf[17] = result[4] & 0xFF;

	txbuf[18] = pa; // request pa
	txbuf[19] = 0; // request number
	txbuf[20] = 0xff; // reply pa
     97e:	f64f 73ff 	movw	r3, #65535	; 0xffff
     982:	ba52      	rev16	r2, r2
	txbuf[4] = (result[1] >> 8) & 0xFF;
     984:	86ba      	strh	r2, [r7, #52]	; 0x34
	txbuf[9] = result[2] & 0xFF;
     986:	8cba      	ldrh	r2, [r7, #36]	; 0x24
	txbuf[21] = 0xff; // reply number

	// Bluetooth-like modulation
	cc2400_set(MANAND,  0x7fff);
     988:	200d      	movs	r0, #13
     98a:	ba52      	rev16	r2, r2
	txbuf[8] = (result[2] >> 8) & 0xFF;
     98c:	873a      	strh	r2, [r7, #56]	; 0x38
	txbuf[13] = result[3] & 0xFF;
     98e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
	txbuf[14] = (result[4] >> 24) & 0xFF;
     990:	f887 103e 	strb.w	r1, [r7, #62]	; 0x3e
     994:	ba52      	rev16	r2, r2
	txbuf[12] = (result[3] >> 8) & 0xFF;
     996:	87ba      	strh	r2, [r7, #60]	; 0x3c
	txbuf[17] = result[4] & 0xFF;
     998:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
	cc2400_set(MANAND,  0x7fff);
     99a:	f647 71ff 	movw	r1, #32767	; 0x7fff
     99e:	ba52      	rev16	r2, r2
	txbuf[16] = (result[4] >> 8) & 0xFF;
     9a0:	f8a7 2040 	strh.w	r2, [r7, #64]	; 0x40
	txbuf[20] = 0xff; // reply pa
     9a4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	cc2400_set(LMTST,   0x2b22);
	cc2400_set(MDMTST0, 0x134b);
	cc2400_set(FSDIV,   channel);
     9a8:	4e7b      	ldr	r6, [pc, #492]	; (b98 <cc2400_rangetest+0x280>)
	cc2400_set(MANAND,  0x7fff);
     9aa:	f000 fcf6 	bl	139a <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
     9ae:	f642 3122 	movw	r1, #11042	; 0x2b22
     9b2:	2012      	movs	r0, #18
     9b4:	f000 fcf1 	bl	139a <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);
     9b8:	f241 314b 	movw	r1, #4939	; 0x134b
     9bc:	2014      	movs	r0, #20
     9be:	f000 fcec 	bl	139a <cc2400_set>
	cc2400_set(FSDIV,   channel);
     9c2:	8831      	ldrh	r1, [r6, #0]
     9c4:	2002      	movs	r0, #2
     9c6:	b289      	uxth	r1, r1
     9c8:	f000 fce7 	bl	139a <cc2400_set>
	cc2400_set(SYNCH,   0xf9ae);
     9cc:	f64f 11ae 	movw	r1, #63918	; 0xf9ae
     9d0:	202d      	movs	r0, #45	; 0x2d
     9d2:	f000 fce2 	bl	139a <cc2400_set>
	cc2400_set(SYNCL,   0x1584);
     9d6:	f241 5184 	movw	r1, #5508	; 0x1584
     9da:	202c      	movs	r0, #44	; 0x2c
     9dc:	f000 fcdd 	bl	139a <cc2400_set>
	cc2400_set(FREND,   8 | pa);
     9e0:	2108      	movs	r1, #8
     9e2:	4628      	mov	r0, r5
     9e4:	f000 fcd9 	bl	139a <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029);
     9e8:	2129      	movs	r1, #41	; 0x29
     9ea:	2003      	movs	r0, #3
     9ec:	f000 fcd5 	bl	139a <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
     9f0:	f000 fce6 	bl	13c0 <cc2400_status>
     9f4:	0641      	lsls	r1, r0, #25
     9f6:	d5fb      	bpl.n	9f0 <cc2400_rangetest+0xd8>
	cc2400_strobe(SFSON);
     9f8:	2061      	movs	r0, #97	; 0x61
     9fa:	f000 fce8 	bl	13ce <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
     9fe:	f000 fcdf 	bl	13c0 <cc2400_status>
     a02:	0742      	lsls	r2, r0, #29
     a04:	d5fb      	bpl.n	9fe <cc2400_rangetest+0xe6>
	TXLED_SET;
     a06:	f44f 7280 	mov.w	r2, #256	; 0x100
     a0a:	4b64      	ldr	r3, [pc, #400]	; (b9c <cc2400_rangetest+0x284>)
#ifdef UBERTOOTH_ONE
	PAEN_SET;
     a0c:	2180      	movs	r1, #128	; 0x80
     a0e:	4698      	mov	r8, r3
	TXLED_SET;
     a10:	601a      	str	r2, [r3, #0]
	PAEN_SET;
     a12:	4a63      	ldr	r2, [pc, #396]	; (ba0 <cc2400_rangetest+0x288>)
     a14:	6011      	str	r1, [r2, #0]
#endif
	for (pa = 0; pa < 8; pa++) {
		cc2400_set(FREND, 8 | pa);
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
     a16:	f04f 0900 	mov.w	r9, #0
     a1a:	b2e5      	uxtb	r5, r4
		cc2400_set(FREND, 8 | pa);
     a1c:	2005      	movs	r0, #5
     a1e:	f045 0108 	orr.w	r1, r5, #8
     a22:	f000 fcba 	bl	139a <cc2400_set>
		txbuf[18] = pa;
     a26:	f887 5042 	strb.w	r5, [r7, #66]	; 0x42
			txbuf[19] = i;
     a2a:	f887 9043 	strb.w	r9, [r7, #67]	; 0x43
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
     a2e:	200e      	movs	r0, #14
     a30:	f000 fcaa 	bl	1388 <cc2400_get>
     a34:	f000 001f 	and.w	r0, r0, #31
     a38:	280f      	cmp	r0, #15
     a3a:	d1f8      	bne.n	a2e <cc2400_rangetest+0x116>
     a3c:	f107 0530 	add.w	r5, r7, #48	; 0x30
     a40:	46ab      	mov	fp, r5
			// transmit a packet
			for (j = 0; j < len; j++)
     a42:	f04f 0a00 	mov.w	sl, #0
				cc2400_set8(FIFOREG, txbuf[j]);
     a46:	2070      	movs	r0, #112	; 0x70
     a48:	f81b 1b01 	ldrb.w	r1, [fp], #1
			for (j = 0; j < len; j++)
     a4c:	f10a 0a01 	add.w	sl, sl, #1
				cc2400_set8(FIFOREG, txbuf[j]);
     a50:	f000 fcb1 	bl	13b6 <cc2400_set8>
			for (j = 0; j < len; j++)
     a54:	f1ba 0f16 	cmp.w	sl, #22
     a58:	d1f5      	bne.n	a46 <cc2400_rangetest+0x12e>
			cc2400_strobe(STX);
     a5a:	2063      	movs	r0, #99	; 0x63
		for (i = 0; i < 16; i++) {
     a5c:	f109 0901 	add.w	r9, r9, #1
			cc2400_strobe(STX);
     a60:	f000 fcb5 	bl	13ce <cc2400_strobe>
		for (i = 0; i < 16; i++) {
     a64:	f1b9 0f10 	cmp.w	r9, #16
     a68:	d1df      	bne.n	a2a <cc2400_rangetest+0x112>
	for (pa = 0; pa < 8; pa++) {
     a6a:	3401      	adds	r4, #1
     a6c:	2c08      	cmp	r4, #8
     a6e:	d1d2      	bne.n	a16 <cc2400_rangetest+0xfe>
		}
	}
	// sent packet, now look for repeated packet
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
     a70:	200e      	movs	r0, #14
     a72:	f000 fc89 	bl	1388 <cc2400_get>
     a76:	f000 001f 	and.w	r0, r0, #31
     a7a:	280f      	cmp	r0, #15
     a7c:	d1f8      	bne.n	a70 <cc2400_rangetest+0x158>
	TXLED_CLR;
     a7e:	f44f 7380 	mov.w	r3, #256	; 0x100
     a82:	4c48      	ldr	r4, [pc, #288]	; (ba4 <cc2400_rangetest+0x28c>)
	cc2400_strobe(SRFOFF);
     a84:	2064      	movs	r0, #100	; 0x64
	TXLED_CLR;
     a86:	6023      	str	r3, [r4, #0]
	cc2400_strobe(SRFOFF);
     a88:	f000 fca1 	bl	13ce <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
     a8c:	f000 fc98 	bl	13c0 <cc2400_status>
     a90:	0743      	lsls	r3, r0, #29
     a92:	d4fb      	bmi.n	a8c <cc2400_rangetest+0x174>
	cc2400_set(FSDIV, channel - 1);
     a94:	8831      	ldrh	r1, [r6, #0]
     a96:	2002      	movs	r0, #2
     a98:	3901      	subs	r1, #1
     a9a:	b289      	uxth	r1, r1
     a9c:	f000 fc7d 	bl	139a <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
     aa0:	f000 fc8e 	bl	13c0 <cc2400_status>
     aa4:	0640      	lsls	r0, r0, #25
     aa6:	d5fb      	bpl.n	aa0 <cc2400_rangetest+0x188>
	cc2400_strobe(SFSON);
     aa8:	2061      	movs	r0, #97	; 0x61
     aaa:	f000 fc90 	bl	13ce <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
     aae:	f000 fc87 	bl	13c0 <cc2400_status>
     ab2:	0741      	lsls	r1, r0, #29
     ab4:	d5fb      	bpl.n	aae <cc2400_rangetest+0x196>
	RXLED_SET;
     ab6:	2310      	movs	r3, #16
	while (1) {
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
		cc2400_strobe(SRX);
		while (!(cc2400_status() & SYNC_RECEIVED));
		USRLED_SET;
     ab8:	f04f 0a02 	mov.w	sl, #2
	RXLED_SET;
     abc:	f8c8 3000 	str.w	r3, [r8]
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
     ac0:	200e      	movs	r0, #14
     ac2:	f000 fc61 	bl	1388 <cc2400_get>
     ac6:	f000 001f 	and.w	r0, r0, #31
     aca:	280f      	cmp	r0, #15
     acc:	d1f8      	bne.n	ac0 <cc2400_rangetest+0x1a8>
		cc2400_strobe(SRX);
     ace:	2062      	movs	r0, #98	; 0x62
     ad0:	f000 fc7d 	bl	13ce <cc2400_strobe>
		while (!(cc2400_status() & SYNC_RECEIVED));
     ad4:	f000 fc74 	bl	13c0 <cc2400_status>
     ad8:	06c2      	lsls	r2, r0, #27
     ada:	d5fb      	bpl.n	ad4 <cc2400_rangetest+0x1bc>
		USRLED_SET;
     adc:	f107 0648 	add.w	r6, r7, #72	; 0x48
     ae0:	46b3      	mov	fp, r6
		for (j = 0; j < len; j++)
     ae2:	f04f 0900 	mov.w	r9, #0
		USRLED_SET;
     ae6:	f8c8 a000 	str.w	sl, [r8]
			rxbuf[j] = cc2400_get8(FIFOREG);
     aea:	2070      	movs	r0, #112	; 0x70
     aec:	f000 fc5a 	bl	13a4 <cc2400_get8>
		for (j = 0; j < len; j++)
     af0:	f109 0901 	add.w	r9, r9, #1
     af4:	f1b9 0f16 	cmp.w	r9, #22
			rxbuf[j] = cc2400_get8(FIFOREG);
     af8:	f80b 0b01 	strb.w	r0, [fp], #1
		for (j = 0; j < len; j++)
     afc:	d1f5      	bne.n	aea <cc2400_rangetest+0x1d2>
		if (cc2400_status() & STATUS_CRC_OK)
     afe:	f000 fc5f 	bl	13c0 <cc2400_status>
     b02:	0703      	lsls	r3, r0, #28
     b04:	d402      	bmi.n	b0c <cc2400_rangetest+0x1f4>
			break;
		USRLED_CLR;
     b06:	f8c4 a000 	str.w	sl, [r4]
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
     b0a:	e7d9      	b.n	ac0 <cc2400_rangetest+0x1a8>
	}

	// done
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
     b0c:	200e      	movs	r0, #14
     b0e:	f000 fc3b 	bl	1388 <cc2400_get>
     b12:	f000 001f 	and.w	r0, r0, #31
     b16:	280f      	cmp	r0, #15
     b18:	d1f8      	bne.n	b0c <cc2400_rangetest+0x1f4>
	cc2400_strobe(SRFOFF);
     b1a:	2064      	movs	r0, #100	; 0x64
     b1c:	f000 fc57 	bl	13ce <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
     b20:	f000 fc4e 	bl	13c0 <cc2400_status>
     b24:	f010 0004 	ands.w	r0, r0, #4
     b28:	d1fa      	bne.n	b20 <cc2400_rangetest+0x208>
#ifdef UBERTOOTH_ONE
	PAEN_CLR;
     b2a:	2280      	movs	r2, #128	; 0x80
     b2c:	4b1e      	ldr	r3, [pc, #120]	; (ba8 <cc2400_rangetest+0x290>)
     b2e:	601a      	str	r2, [r3, #0]
#endif
	RXLED_CLR;
     b30:	2310      	movs	r3, #16
     b32:	6023      	str	r3, [r4, #0]

	// get test result
	rr.valid       = 1;
	rr.request_pa  = rxbuf[18];
     b34:	f897 105a 	ldrb.w	r1, [r7, #90]	; 0x5a
	rr.valid       = 1;
     b38:	4b1c      	ldr	r3, [pc, #112]	; (bac <cc2400_rangetest+0x294>)
     b3a:	2201      	movs	r2, #1
	rr.request_pa  = rxbuf[18];
     b3c:	7059      	strb	r1, [r3, #1]
	rr.request_num = rxbuf[19];
     b3e:	f897 105b 	ldrb.w	r1, [r7, #91]	; 0x5b
	rr.valid       = 1;
     b42:	701a      	strb	r2, [r3, #0]
	rr.request_num = rxbuf[19];
     b44:	7099      	strb	r1, [r3, #2]
	rr.reply_pa    = rxbuf[20];
     b46:	f897 105c 	ldrb.w	r1, [r7, #92]	; 0x5c
	rr.reply_num   = rxbuf[21];

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
     b4a:	f887 2031 	strb.w	r2, [r7, #49]	; 0x31
	rr.reply_pa    = rxbuf[20];
     b4e:	70d9      	strb	r1, [r3, #3]
	rr.reply_num   = rxbuf[21];
     b50:	f897 105d 	ldrb.w	r1, [r7, #93]	; 0x5d
     b54:	7119      	strb	r1, [r3, #4]
	for (i = 0; i < 18; i++)
     b56:	4601      	mov	r1, r0
		if (rxbuf[i] != txbuf[i])
     b58:	f816 eb01 	ldrb.w	lr, [r6], #1
     b5c:	f815 cb01 	ldrb.w	ip, [r5], #1
	for (i = 0; i < 18; i++)
     b60:	3101      	adds	r1, #1
			rr.valid = 0;
     b62:	45e6      	cmp	lr, ip
     b64:	bf1c      	itt	ne
     b66:	2200      	movne	r2, #0
     b68:	2001      	movne	r0, #1
	for (i = 0; i < 18; i++)
     b6a:	2912      	cmp	r1, #18
     b6c:	d1f4      	bne.n	b58 <cc2400_rangetest+0x240>
     b6e:	b100      	cbz	r0, b72 <cc2400_rangetest+0x25a>
     b70:	701a      	strb	r2, [r3, #0]

	USRLED_CLR;
     b72:	2302      	movs	r3, #2
	mode = MODE_IDLE;
     b74:	2200      	movs	r2, #0
	USRLED_CLR;
     b76:	6023      	str	r3, [r4, #0]
	mode = MODE_IDLE;
     b78:	4b05      	ldr	r3, [pc, #20]	; (b90 <cc2400_rangetest+0x278>)
     b7a:	629a      	str	r2, [r3, #40]	; 0x28
	if (requested_mode == MODE_RANGE_TEST)
     b7c:	6859      	ldr	r1, [r3, #4]
     b7e:	2905      	cmp	r1, #5
		requested_mode = MODE_IDLE;
     b80:	bf08      	it	eq
     b82:	605a      	streq	r2, [r3, #4]
     b84:	f8d7 d004 	ldr.w	sp, [r7, #4]
#endif
}
     b88:	3764      	adds	r7, #100	; 0x64
     b8a:	46bd      	mov	sp, r7
     b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     b90:	10000520 	.word	0x10000520
     b94:	00001efc 	.word	0x00001efc
     b98:	10000450 	.word	0x10000450
     b9c:	2009c038 	.word	0x2009c038
     ba0:	2009c058 	.word	0x2009c058
     ba4:	2009c03c 	.word	0x2009c03c
     ba8:	2009c05c 	.word	0x2009c05c
     bac:	10002644 	.word	0x10002644

00000bb0 <cc2400_repeater>:

/* This is the repeater implementation to be used with cc2400_rangetest(). */
void cc2400_repeater()
{
     bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     bb4:	b087      	sub	sp, #28
		cc2400_set(FREND,   0x0008); // minimum tx power
		cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
		while (!(cc2400_status() & XOSC16M_STABLE));
		cc2400_strobe(SFSON);
		while (!(cc2400_status() & FS_LOCK));
		RXLED_SET;
     bb6:	f8df 9188 	ldr.w	r9, [pc, #392]	; d40 <cc2400_repeater+0x190>
	mode = MODE_REPEATER;
     bba:	2206      	movs	r2, #6
		cc2400_set(FSDIV,   channel - 1);
     bbc:	2502      	movs	r5, #2
     bbe:	46ca      	mov	sl, r9
	mode = MODE_REPEATER;
     bc0:	4b5b      	ldr	r3, [pc, #364]	; (d30 <cc2400_repeater+0x180>)
     bc2:	629a      	str	r2, [r3, #40]	; 0x28
		cc2400_set(MANAND,  0x7fff);
     bc4:	f647 71ff 	movw	r1, #32767	; 0x7fff
     bc8:	200d      	movs	r0, #13
     bca:	f000 fbe6 	bl	139a <cc2400_set>
		cc2400_set(FSDIV,   channel - 1);
     bce:	4f59      	ldr	r7, [pc, #356]	; (d34 <cc2400_repeater+0x184>)
		cc2400_set(LMTST,   0x2b22);
     bd0:	f642 3122 	movw	r1, #11042	; 0x2b22
     bd4:	2012      	movs	r0, #18
     bd6:	f000 fbe0 	bl	139a <cc2400_set>
		cc2400_set(MDMTST0, 0x134b);
     bda:	f241 314b 	movw	r1, #4939	; 0x134b
     bde:	2014      	movs	r0, #20
     be0:	f000 fbdb 	bl	139a <cc2400_set>
		cc2400_set(FSDIV,   channel - 1);
     be4:	8839      	ldrh	r1, [r7, #0]
     be6:	2002      	movs	r0, #2
     be8:	3901      	subs	r1, #1
     bea:	b289      	uxth	r1, r1
     bec:	f000 fbd5 	bl	139a <cc2400_set>
		cc2400_set(SYNCH,   0xf9ae);
     bf0:	f64f 11ae 	movw	r1, #63918	; 0xf9ae
     bf4:	202d      	movs	r0, #45	; 0x2d
     bf6:	f000 fbd0 	bl	139a <cc2400_set>
		cc2400_set(SYNCL,   0x1584);
     bfa:	f241 5184 	movw	r1, #5508	; 0x1584
     bfe:	202c      	movs	r0, #44	; 0x2c
     c00:	f000 fbcb 	bl	139a <cc2400_set>
		cc2400_set(FREND,   0x0008); // minimum tx power
     c04:	2108      	movs	r1, #8
     c06:	2005      	movs	r0, #5
     c08:	f000 fbc7 	bl	139a <cc2400_set>
		cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
     c0c:	2129      	movs	r1, #41	; 0x29
     c0e:	2003      	movs	r0, #3
     c10:	f000 fbc3 	bl	139a <cc2400_set>
		while (!(cc2400_status() & XOSC16M_STABLE));
     c14:	f000 fbd4 	bl	13c0 <cc2400_status>
     c18:	0641      	lsls	r1, r0, #25
     c1a:	d5fb      	bpl.n	c14 <cc2400_repeater+0x64>
		cc2400_strobe(SFSON);
     c1c:	2061      	movs	r0, #97	; 0x61
     c1e:	f000 fbd6 	bl	13ce <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
     c22:	f000 fbcd 	bl	13c0 <cc2400_status>
     c26:	0742      	lsls	r2, r0, #29
     c28:	d5fb      	bpl.n	c22 <cc2400_repeater+0x72>
		RXLED_SET;
     c2a:	2310      	movs	r3, #16
     c2c:	f8c9 3000 	str.w	r3, [r9]
		TXLED_CLR;
     c30:	f44f 7380 	mov.w	r3, #256	; 0x100
     c34:	4c40      	ldr	r4, [pc, #256]	; (d38 <cc2400_repeater+0x188>)
		USRLED_CLR;
#ifdef UBERTOOTH_ONE
		PAEN_SET;
     c36:	2280      	movs	r2, #128	; 0x80
     c38:	46a0      	mov	r8, r4
		TXLED_CLR;
     c3a:	6023      	str	r3, [r4, #0]
		PAEN_SET;
     c3c:	4b3f      	ldr	r3, [pc, #252]	; (d3c <cc2400_repeater+0x18c>)
		USRLED_CLR;
     c3e:	6025      	str	r5, [r4, #0]
		PAEN_SET;
     c40:	601a      	str	r2, [r3, #0]
#endif
		while (1) {
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
     c42:	200e      	movs	r0, #14
     c44:	f000 fba0 	bl	1388 <cc2400_get>
     c48:	f000 001f 	and.w	r0, r0, #31
     c4c:	280f      	cmp	r0, #15
     c4e:	d1f8      	bne.n	c42 <cc2400_repeater+0x92>
			USRLED_CLR;
			cc2400_strobe(SRX);
     c50:	2062      	movs	r0, #98	; 0x62
			USRLED_CLR;
     c52:	f8c8 5000 	str.w	r5, [r8]
			cc2400_strobe(SRX);
     c56:	f000 fbba 	bl	13ce <cc2400_strobe>
			while (!(cc2400_status() & SYNC_RECEIVED));
     c5a:	f000 fbb1 	bl	13c0 <cc2400_status>
     c5e:	06c3      	lsls	r3, r0, #27
     c60:	d5fb      	bpl.n	c5a <cc2400_repeater+0xaa>
			USRLED_SET;
     c62:	46eb      	mov	fp, sp
			for (i = 0; i < len; i++)
     c64:	2600      	movs	r6, #0
			USRLED_SET;
     c66:	f8ca 5000 	str.w	r5, [sl]
				buf[i] = cc2400_get8(FIFOREG);
     c6a:	2070      	movs	r0, #112	; 0x70
     c6c:	f000 fb9a 	bl	13a4 <cc2400_get8>
			for (i = 0; i < len; i++)
     c70:	3601      	adds	r6, #1
     c72:	2e16      	cmp	r6, #22
				buf[i] = cc2400_get8(FIFOREG);
     c74:	f80b 0b01 	strb.w	r0, [fp], #1
			for (i = 0; i < len; i++)
     c78:	d1f7      	bne.n	c6a <cc2400_repeater+0xba>
			if (cc2400_status() & STATUS_CRC_OK)
     c7a:	f000 fba1 	bl	13c0 <cc2400_status>
     c7e:	0706      	lsls	r6, r0, #28
     c80:	d5df      	bpl.n	c42 <cc2400_repeater+0x92>
				break;
		}
		// got packet, now repeat it
		i = 2000000; while (--i); // allow time for requester to switch to rx
		USRLED_CLR;
		RXLED_CLR;
     c82:	2310      	movs	r3, #16
		USRLED_CLR;
     c84:	6025      	str	r5, [r4, #0]
		cc2400_strobe(SRFOFF);
     c86:	2064      	movs	r0, #100	; 0x64
		RXLED_CLR;
     c88:	6023      	str	r3, [r4, #0]
		cc2400_strobe(SRFOFF);
     c8a:	f000 fba0 	bl	13ce <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
     c8e:	f000 fb97 	bl	13c0 <cc2400_status>
     c92:	0740      	lsls	r0, r0, #29
     c94:	d4fb      	bmi.n	c8e <cc2400_repeater+0xde>
		while (!(cc2400_status() & XOSC16M_STABLE));
     c96:	f000 fb93 	bl	13c0 <cc2400_status>
     c9a:	0641      	lsls	r1, r0, #25
     c9c:	d5fb      	bpl.n	c96 <cc2400_repeater+0xe6>
		cc2400_set(FSDIV, channel);
     c9e:	8839      	ldrh	r1, [r7, #0]
     ca0:	2002      	movs	r0, #2
     ca2:	b289      	uxth	r1, r1
     ca4:	f000 fb79 	bl	139a <cc2400_set>
		while (!(cc2400_status() & XOSC16M_STABLE));
     ca8:	f000 fb8a 	bl	13c0 <cc2400_status>
     cac:	0642      	lsls	r2, r0, #25
     cae:	d5fb      	bpl.n	ca8 <cc2400_repeater+0xf8>
		cc2400_strobe(SFSON);
     cb0:	2061      	movs	r0, #97	; 0x61
     cb2:	f000 fb8c 	bl	13ce <cc2400_strobe>
		TXLED_SET;
     cb6:	f44f 7380 	mov.w	r3, #256	; 0x100
     cba:	f8ca 3000 	str.w	r3, [sl]
		buf[0] = len - 1; // length of data (rest of payload)
     cbe:	f240 1315 	movw	r3, #277	; 0x115
     cc2:	2600      	movs	r6, #0
     cc4:	f8ad 3000 	strh.w	r3, [sp]
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
     cc8:	b2f7      	uxtb	r7, r6
			cc2400_set(FREND, 8 | pa);
     cca:	f047 0108 	orr.w	r1, r7, #8
     cce:	2005      	movs	r0, #5
     cd0:	f000 fb63 	bl	139a <cc2400_set>
			buf[20] = pa;
     cd4:	f88d 7014 	strb.w	r7, [sp, #20]
			for (i = 0; i < 16; i++) {
     cd8:	2700      	movs	r7, #0
				buf[21] = i;
     cda:	f88d 7015 	strb.w	r7, [sp, #21]
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
     cde:	200e      	movs	r0, #14
     ce0:	f000 fb52 	bl	1388 <cc2400_get>
     ce4:	f000 001f 	and.w	r0, r0, #31
     ce8:	280f      	cmp	r0, #15
     cea:	d1f8      	bne.n	cde <cc2400_repeater+0x12e>
     cec:	46eb      	mov	fp, sp
					for (j = 0; j < len; j++)
     cee:	f04f 0800 	mov.w	r8, #0
						cc2400_set8(FIFOREG, buf[j]);
     cf2:	2070      	movs	r0, #112	; 0x70
     cf4:	f81b 1b01 	ldrb.w	r1, [fp], #1
					for (j = 0; j < len; j++)
     cf8:	f108 0801 	add.w	r8, r8, #1
						cc2400_set8(FIFOREG, buf[j]);
     cfc:	f000 fb5b 	bl	13b6 <cc2400_set8>
					for (j = 0; j < len; j++)
     d00:	f1b8 0f16 	cmp.w	r8, #22
     d04:	d1f5      	bne.n	cf2 <cc2400_repeater+0x142>
				cc2400_strobe(STX);
     d06:	2063      	movs	r0, #99	; 0x63
			for (i = 0; i < 16; i++) {
     d08:	3701      	adds	r7, #1
				cc2400_strobe(STX);
     d0a:	f000 fb60 	bl	13ce <cc2400_strobe>
			for (i = 0; i < 16; i++) {
     d0e:	2f10      	cmp	r7, #16
     d10:	d1e3      	bne.n	cda <cc2400_repeater+0x12a>
		for (pa = 0; pa < 8; pa++) {
     d12:	3601      	adds	r6, #1
     d14:	2e08      	cmp	r6, #8
     d16:	d1d7      	bne.n	cc8 <cc2400_repeater+0x118>
			}
		}
		TXLED_CLR;
     d18:	f44f 7380 	mov.w	r3, #256	; 0x100
		cc2400_strobe(SRFOFF);
     d1c:	2064      	movs	r0, #100	; 0x64
		TXLED_CLR;
     d1e:	6023      	str	r3, [r4, #0]
		cc2400_strobe(SRFOFF);
     d20:	f000 fb55 	bl	13ce <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
     d24:	f000 fb4c 	bl	13c0 <cc2400_status>
     d28:	0743      	lsls	r3, r0, #29
     d2a:	d4fb      	bmi.n	d24 <cc2400_repeater+0x174>
     d2c:	e74a      	b.n	bc4 <cc2400_repeater+0x14>
     d2e:	bf00      	nop
     d30:	10000520 	.word	0x10000520
     d34:	10000450 	.word	0x10000450
     d38:	2009c03c 	.word	0x2009c03c
     d3c:	2009c058 	.word	0x2009c058
     d40:	2009c038 	.word	0x2009c038

00000d44 <bt_stream_rx>:
	}
#endif
}

void bt_stream_rx()
{
     d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8 *tmp = NULL;
	u8 epstat;
	int i;

	RXLED_SET;
     d48:	2210      	movs	r2, #16
     d4a:	4b2a      	ldr	r3, [pc, #168]	; (df4 <bt_stream_rx+0xb0>)
	dio_ssp_init();
	dma_init();
	dio_ssp_start();
	cc2400_rx();

	while (rx_pkts) {
     d4c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; e08 <bt_stream_rx+0xc4>
	RXLED_SET;
     d50:	601a      	str	r2, [r3, #0]
	queue_init();
     d52:	f7ff fc6f 	bl	634 <queue_init>
	dio_ssp_init();
     d56:	4644      	mov	r4, r8
     d58:	f000 fa8e 	bl	1278 <dio_ssp_init>
	dma_init();
     d5c:	f7ff fa7a 	bl	254 <dma_init>
	dio_ssp_start();
     d60:	f7ff fadc 	bl	31c <dio_ssp_start>
	cc2400_rx();
     d64:	f7ff fd22 	bl	7ac <cc2400_rx>
		/* wait for DMA transfer */
		while ((rx_tc == 0) && (rx_err == 0));
     d68:	4d23      	ldr	r5, [pc, #140]	; (df8 <bt_stream_rx+0xb4>)
	while (rx_pkts) {
     d6a:	f8d8 3000 	ldr.w	r3, [r8]
     d6e:	2b00      	cmp	r3, #0
     d70:	d03b      	beq.n	dea <bt_stream_rx+0xa6>
     d72:	4f22      	ldr	r7, [pc, #136]	; (dfc <bt_stream_rx+0xb8>)
		while ((rx_tc == 0) && (rx_err == 0));
     d74:	682b      	ldr	r3, [r5, #0]
     d76:	b913      	cbnz	r3, d7e <bt_stream_rx+0x3a>
     d78:	683b      	ldr	r3, [r7, #0]
     d7a:	2b00      	cmp	r3, #0
     d7c:	d0fa      	beq.n	d74 <bt_stream_rx+0x30>
		if (rx_tc % 2) {
     d7e:	682b      	ldr	r3, [r5, #0]
     d80:	07d9      	lsls	r1, r3, #31
			/* swap buffers */
			tmp = active_rxbuf;
     d82:	bf42      	ittt	mi
     d84:	4b1e      	ldrmi	r3, [pc, #120]	; (e00 <bt_stream_rx+0xbc>)
			active_rxbuf = idle_rxbuf;
     d86:	e9d3 2102 	ldrdmi	r2, r1, [r3, #8]
			idle_rxbuf = tmp;
     d8a:	e9c3 1202 	strdmi	r1, r2, [r3, #8]
		}
		if (rx_err)
     d8e:	683b      	ldr	r3, [r7, #0]
     d90:	b11b      	cbz	r3, d9a <bt_stream_rx+0x56>
			status |= DMA_ERROR;
     d92:	7d23      	ldrb	r3, [r4, #20]
     d94:	f043 0302 	orr.w	r3, r3, #2
     d98:	7523      	strb	r3, [r4, #20]
		if (rx_tc) {
     d9a:	682b      	ldr	r3, [r5, #0]
     d9c:	b173      	cbz	r3, dbc <bt_stream_rx+0x78>
			if (rx_tc > 1)
     d9e:	682b      	ldr	r3, [r5, #0]
     da0:	2b01      	cmp	r3, #1
				status |= DMA_OVERFLOW;
     da2:	bf82      	ittt	hi
     da4:	7d23      	ldrbhi	r3, [r4, #20]
     da6:	f043 0301 	orrhi.w	r3, r3, #1
     daa:	7523      	strbhi	r3, [r4, #20]
			if (enqueue(idle_rxbuf))
     dac:	4b14      	ldr	r3, [pc, #80]	; (e00 <bt_stream_rx+0xbc>)
     dae:	68d8      	ldr	r0, [r3, #12]
     db0:	f7ff fc48 	bl	644 <enqueue>
     db4:	b1a0      	cbz	r0, de0 <bt_stream_rx+0x9c>
				--rx_pkts;
     db6:	6823      	ldr	r3, [r4, #0]
     db8:	3b01      	subs	r3, #1
     dba:	6023      	str	r3, [r4, #0]
			else
				status |= FIFO_OVERFLOW;
		}

		/* send via USB */
		epstat = USBHwEPGetStatus(BULK_IN_EP);
     dbc:	2082      	movs	r0, #130	; 0x82
     dbe:	f000 fd17 	bl	17f0 <USBHwEPGetStatus>
		if (!(epstat & EPSTAT_B1FULL))
     dc2:	0682      	lsls	r2, r0, #26
		epstat = USBHwEPGetStatus(BULK_IN_EP);
     dc4:	4606      	mov	r6, r0
		if (!(epstat & EPSTAT_B1FULL))
     dc6:	d401      	bmi.n	dcc <bt_stream_rx+0x88>
			dequeue();
     dc8:	f7ff fc78 	bl	6bc <dequeue>
		if (!(epstat & EPSTAT_B2FULL))
     dcc:	0673      	lsls	r3, r6, #25
     dce:	d401      	bmi.n	dd4 <bt_stream_rx+0x90>
			dequeue();
     dd0:	f7ff fc74 	bl	6bc <dequeue>
		USBHwISR();
     dd4:	f000 fd98 	bl	1908 <USBHwISR>

		rx_tc = 0;
     dd8:	2300      	movs	r3, #0
     dda:	602b      	str	r3, [r5, #0]
		rx_err = 0;
     ddc:	603b      	str	r3, [r7, #0]
     dde:	e7c4      	b.n	d6a <bt_stream_rx+0x26>
				status |= FIFO_OVERFLOW;
     de0:	7d23      	ldrb	r3, [r4, #20]
     de2:	f043 0304 	orr.w	r3, r3, #4
     de6:	7523      	strb	r3, [r4, #20]
     de8:	e7e8      	b.n	dbc <bt_stream_rx+0x78>
	}
	//FIXME turn off rx
	RXLED_CLR;
     dea:	2210      	movs	r2, #16
     dec:	4b05      	ldr	r3, [pc, #20]	; (e04 <bt_stream_rx+0xc0>)
     dee:	601a      	str	r2, [r3, #0]
}
     df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     df4:	2009c038 	.word	0x2009c038
     df8:	100005e8 	.word	0x100005e8
     dfc:	1000267c 	.word	0x1000267c
     e00:	10000450 	.word	0x10000450
     e04:	2009c03c 	.word	0x2009c03c
     e08:	10000520 	.word	0x10000520

00000e0c <specan>:

/* spectrum analysis */
void specan()
{
     e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     e10:	b08e      	sub	sp, #56	; 0x38
	u8 epstat;
	u16 f;
	u8 i = 0;
	u8 buf[DMA_SIZE];

	RXLED_SET;
     e12:	2210      	movs	r2, #16
     e14:	4b3d      	ldr	r3, [pc, #244]	; (f0c <specan+0x100>)
     e16:	601a      	str	r2, [r3, #0]

	queue_init();
     e18:	f7ff fc0c 	bl	634 <queue_init>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
     e1c:	2280      	movs	r2, #128	; 0x80
     e1e:	4b3c      	ldr	r3, [pc, #240]	; (f10 <specan+0x104>)
	//HGM_SET;
#endif
	cc2400_set(MANAND,  0x7fff);
     e20:	f647 71ff 	movw	r1, #32767	; 0x7fff
	PAEN_SET;
     e24:	601a      	str	r2, [r3, #0]
	cc2400_set(MANAND,  0x7fff);
     e26:	200d      	movs	r0, #13
     e28:	f000 fab7 	bl	139a <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
     e2c:	f642 3122 	movw	r1, #11042	; 0x2b22
     e30:	2012      	movs	r0, #18
     e32:	f000 fab2 	bl	139a <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
     e36:	f241 314b 	movw	r1, #4939	; 0x134b
     e3a:	2014      	movs	r0, #20
     e3c:	f000 faad 	bl	139a <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
     e40:	f240 1101 	movw	r1, #257	; 0x101
     e44:	2020      	movs	r0, #32
     e46:	f000 faa8 	bl	139a <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
     e4a:	2129      	movs	r1, #41	; 0x29
     e4c:	2003      	movs	r0, #3
     e4e:	f000 faa4 	bl	139a <cc2400_set>
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
     e52:	f000 fab5 	bl	13c0 <cc2400_status>
     e56:	0644      	lsls	r4, r0, #25
     e58:	d5fb      	bpl.n	e52 <specan+0x46>
	while ((cc2400_status() & FS_LOCK));
     e5a:	f000 fab1 	bl	13c0 <cc2400_status>
     e5e:	f010 0404 	ands.w	r4, r0, #4
     e62:	d1fa      	bne.n	e5a <specan+0x4e>

	while (requested_mode == MODE_SPECAN) {
     e64:	4f2b      	ldr	r7, [pc, #172]	; (f14 <specan+0x108>)
		for (f = low_freq; f < high_freq + 1; f++) {
     e66:	f8df 80b4 	ldr.w	r8, [pc, #180]	; f1c <specan+0x110>
	while (requested_mode == MODE_SPECAN) {
     e6a:	687b      	ldr	r3, [r7, #4]
     e6c:	2b04      	cmp	r3, #4
     e6e:	d007      	beq.n	e80 <specan+0x74>

			cc2400_strobe(SRFOFF);
			while ((cc2400_status() & FS_LOCK));
		}
	}
	mode = MODE_IDLE;
     e70:	2300      	movs	r3, #0
	RXLED_CLR;
     e72:	2210      	movs	r2, #16
	mode = MODE_IDLE;
     e74:	62bb      	str	r3, [r7, #40]	; 0x28
	RXLED_CLR;
     e76:	4b28      	ldr	r3, [pc, #160]	; (f18 <specan+0x10c>)
     e78:	601a      	str	r2, [r3, #0]
}
     e7a:	b00e      	add	sp, #56	; 0x38
     e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (f = low_freq; f < high_freq + 1; f++) {
     e80:	f8b8 6002 	ldrh.w	r6, [r8, #2]
     e84:	f8b8 3004 	ldrh.w	r3, [r8, #4]
     e88:	b2b6      	uxth	r6, r6
     e8a:	b29b      	uxth	r3, r3
     e8c:	42b3      	cmp	r3, r6
     e8e:	d3ec      	bcc.n	e6a <specan+0x5e>
			cc2400_set(FSDIV, f - 1);
     e90:	1e71      	subs	r1, r6, #1
     e92:	2002      	movs	r0, #2
     e94:	b289      	uxth	r1, r1
     e96:	f000 fa80 	bl	139a <cc2400_set>
			cc2400_strobe(SFSON);
     e9a:	2061      	movs	r0, #97	; 0x61
     e9c:	f000 fa97 	bl	13ce <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
     ea0:	f000 fa8e 	bl	13c0 <cc2400_status>
     ea4:	0740      	lsls	r0, r0, #29
     ea6:	d5fb      	bpl.n	ea0 <specan+0x94>
			cc2400_strobe(SRX);
     ea8:	2062      	movs	r0, #98	; 0x62
     eaa:	f000 fa90 	bl	13ce <cc2400_strobe>
			buf[3 * i] = (f >> 8) & 0xFF;
     eae:	eb04 0544 	add.w	r5, r4, r4, lsl #1
     eb2:	ab0e      	add	r3, sp, #56	; 0x38
     eb4:	441d      	add	r5, r3
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
     eb6:	2006      	movs	r0, #6
			buf[3 * i] = (f >> 8) & 0xFF;
     eb8:	0a33      	lsrs	r3, r6, #8
     eba:	f805 3c34 	strb.w	r3, [r5, #-52]
			buf[(3 * i) + 1] = f  & 0xFF;
     ebe:	f805 6c33 	strb.w	r6, [r5, #-51]
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
     ec2:	f000 fa61 	bl	1388 <cc2400_get>
			i++;
     ec6:	3401      	adds	r4, #1
     ec8:	b2e4      	uxtb	r4, r4
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
     eca:	0a00      	lsrs	r0, r0, #8
			if (i == 16) {
     ecc:	2c10      	cmp	r4, #16
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
     ece:	f805 0c32 	strb.w	r0, [r5, #-50]
			if (i == 16) {
     ed2:	d111      	bne.n	ef8 <specan+0xec>
				enqueue(buf);
     ed4:	a801      	add	r0, sp, #4
     ed6:	f7ff fbb5 	bl	644 <enqueue>
				epstat = USBHwEPGetStatus(BULK_IN_EP);
     eda:	2082      	movs	r0, #130	; 0x82
     edc:	f000 fc88 	bl	17f0 <USBHwEPGetStatus>
				if (!(epstat & EPSTAT_B1FULL))
     ee0:	0681      	lsls	r1, r0, #26
				epstat = USBHwEPGetStatus(BULK_IN_EP);
     ee2:	4604      	mov	r4, r0
				if (!(epstat & EPSTAT_B1FULL))
     ee4:	d401      	bmi.n	eea <specan+0xde>
					dequeue();
     ee6:	f7ff fbe9 	bl	6bc <dequeue>
				if (!(epstat & EPSTAT_B2FULL))
     eea:	0662      	lsls	r2, r4, #25
     eec:	d401      	bmi.n	ef2 <specan+0xe6>
					dequeue();
     eee:	f7ff fbe5 	bl	6bc <dequeue>
				USBHwISR();
     ef2:	f000 fd09 	bl	1908 <USBHwISR>
				i = 0;
     ef6:	2400      	movs	r4, #0
			cc2400_strobe(SRFOFF);
     ef8:	2064      	movs	r0, #100	; 0x64
     efa:	f000 fa68 	bl	13ce <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK));
     efe:	f000 fa5f 	bl	13c0 <cc2400_status>
     f02:	0743      	lsls	r3, r0, #29
     f04:	d4fb      	bmi.n	efe <specan+0xf2>
		for (f = low_freq; f < high_freq + 1; f++) {
     f06:	3601      	adds	r6, #1
     f08:	e7bc      	b.n	e84 <specan+0x78>
     f0a:	bf00      	nop
     f0c:	2009c038 	.word	0x2009c038
     f10:	2009c058 	.word	0x2009c058
     f14:	10000520 	.word	0x10000520
     f18:	2009c03c 	.word	0x2009c03c
     f1c:	10000450 	.word	0x10000450

00000f20 <find_giac>:

/* an ugly but effective way to identify a GIAC (inquiry packet) */
int find_giac(u8 *buf)
{
     f20:	b5f0      	push	{r4, r5, r6, r7, lr}
     f22:	b08f      	sub	sp, #60	; 0x3c
	int i, j;
	const uint8_t giac[8][7] = {
     f24:	466a      	mov	r2, sp
{
     f26:	4605      	mov	r5, r0
     f28:	4616      	mov	r6, r2
	const uint8_t giac[8][7] = {
     f2a:	4b1c      	ldr	r3, [pc, #112]	; (f9c <find_giac+0x7c>)
     f2c:	f103 0738 	add.w	r7, r3, #56	; 0x38
     f30:	4614      	mov	r4, r2
     f32:	6818      	ldr	r0, [r3, #0]
     f34:	6859      	ldr	r1, [r3, #4]
     f36:	3308      	adds	r3, #8
     f38:	c403      	stmia	r4!, {r0, r1}
     f3a:	42bb      	cmp	r3, r7
     f3c:	4622      	mov	r2, r4
     f3e:	d1f7      	bne.n	f30 <find_giac+0x10>
			{0x75, 0xc5, 0x8c, 0xc7, 0x33, 0x45, 0xe7},
			{0xeb, 0x8b, 0x19, 0x8e, 0x66, 0x8b, 0xce},
			{0x1d, 0x71, 0x63, 0x31, 0xcc, 0xd1, 0x79},
			{0x3a, 0xe2, 0xc6, 0x63, 0x99, 0xa2, 0xf3}};

    for (i = 0; i < (DMA_SIZE - 6); i++)
     f40:	4628      	mov	r0, r5
     f42:	f105 042c 	add.w	r4, r5, #44	; 0x2c
			for (j = 0; j < 8; j++)
     f46:	4633      	mov	r3, r6
     f48:	2200      	movs	r2, #0
	        	if (buf[i] == giac[j][0]
     f4a:	f810 1b01 	ldrb.w	r1, [r0], #1
     f4e:	781d      	ldrb	r5, [r3, #0]
     f50:	428d      	cmp	r5, r1
     f52:	d117      	bne.n	f84 <find_giac+0x64>
						&& buf[i + 1] == giac[j][1]
     f54:	7807      	ldrb	r7, [r0, #0]
     f56:	785d      	ldrb	r5, [r3, #1]
     f58:	42af      	cmp	r7, r5
     f5a:	d113      	bne.n	f84 <find_giac+0x64>
						&& buf[i + 2] == giac[j][2]
     f5c:	7847      	ldrb	r7, [r0, #1]
     f5e:	789d      	ldrb	r5, [r3, #2]
     f60:	42af      	cmp	r7, r5
     f62:	d10f      	bne.n	f84 <find_giac+0x64>
						&& buf[i + 3] == giac[j][3]
     f64:	7887      	ldrb	r7, [r0, #2]
     f66:	78dd      	ldrb	r5, [r3, #3]
     f68:	42af      	cmp	r7, r5
     f6a:	d10b      	bne.n	f84 <find_giac+0x64>
						&& buf[i + 4] == giac[j][4]
     f6c:	78c7      	ldrb	r7, [r0, #3]
     f6e:	791d      	ldrb	r5, [r3, #4]
     f70:	42af      	cmp	r7, r5
     f72:	d107      	bne.n	f84 <find_giac+0x64>
						&& buf[i + 5] == giac[j][5]
     f74:	7907      	ldrb	r7, [r0, #4]
     f76:	795d      	ldrb	r5, [r3, #5]
     f78:	42af      	cmp	r7, r5
     f7a:	d103      	bne.n	f84 <find_giac+0x64>
						&& buf[i + 6] == giac[j][6])
     f7c:	7947      	ldrb	r7, [r0, #5]
     f7e:	799d      	ldrb	r5, [r3, #6]
     f80:	42af      	cmp	r7, r5
     f82:	d008      	beq.n	f96 <find_giac+0x76>
			for (j = 0; j < 8; j++)
     f84:	3201      	adds	r2, #1
     f86:	2a08      	cmp	r2, #8
     f88:	f103 0307 	add.w	r3, r3, #7
     f8c:	d1df      	bne.n	f4e <find_giac+0x2e>
    for (i = 0; i < (DMA_SIZE - 6); i++)
     f8e:	42a0      	cmp	r0, r4
     f90:	d1d9      	bne.n	f46 <find_giac+0x26>
					return 1;

	return 0;
     f92:	2000      	movs	r0, #0
     f94:	e000      	b.n	f98 <find_giac+0x78>
					return 1;
     f96:	2001      	movs	r0, #1
}
     f98:	b00f      	add	sp, #60	; 0x3c
     f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f9c:	00001ec4 	.word	0x00001ec4

00000fa0 <bt_test_rx>:

void bt_test_rx()
{
     fa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8 *tmp = NULL;
	int i;
	int countdown = 0;
	int num_giacs = 0;
     fa4:	2400      	movs	r4, #0
	dio_ssp_start();
	cc2400_rx();

	while (num_giacs < 20) {
		/* wait for DMA transfer */
		while ((rx_tc == 0) && (rx_err == 0));
     fa6:	f8df a09c 	ldr.w	sl, [pc, #156]	; 1044 <bt_test_rx+0xa4>
	dio_ssp_init();
     faa:	f000 f965 	bl	1278 <dio_ssp_init>
	int countdown = 0;
     fae:	4625      	mov	r5, r4
	dma_init();
     fb0:	f7ff f950 	bl	254 <dma_init>
	dio_ssp_start();
     fb4:	4657      	mov	r7, sl
     fb6:	f7ff f9b1 	bl	31c <dio_ssp_start>
			} else {
				if (countdown == 0) {
					/* win if more than 32 GIACs seen during this countdown */
					//if (num_giacs > 32)
						//break;
					USRLED_CLR;
     fba:	f04f 0b02 	mov.w	fp, #2
	cc2400_rx();
     fbe:	f7ff fbf5 	bl	7ac <cc2400_rx>
				TXLED_CLR;
     fc2:	f44f 7180 	mov.w	r1, #256	; 0x100
     fc6:	f8df 8080 	ldr.w	r8, [pc, #128]	; 1048 <bt_test_rx+0xa8>
			tmp = active_rxbuf;
     fca:	4e1c      	ldr	r6, [pc, #112]	; (103c <bt_test_rx+0x9c>)
			RXLED_CLR;
     fcc:	f8df 907c 	ldr.w	r9, [pc, #124]	; 104c <bt_test_rx+0xac>
		while ((rx_tc == 0) && (rx_err == 0));
     fd0:	f8da 0000 	ldr.w	r0, [sl]
     fd4:	b918      	cbnz	r0, fde <bt_test_rx+0x3e>
     fd6:	f8d8 0000 	ldr.w	r0, [r8]
     fda:	2800      	cmp	r0, #0
     fdc:	d0f8      	beq.n	fd0 <bt_test_rx+0x30>
		if (rx_tc % 2) {
     fde:	6838      	ldr	r0, [r7, #0]
     fe0:	07c3      	lsls	r3, r0, #31
			active_rxbuf = idle_rxbuf;
     fe2:	bf44      	itt	mi
     fe4:	e9d6 3002 	ldrdmi	r3, r0, [r6, #8]
			idle_rxbuf = tmp;
     fe8:	e9c6 0302 	strdmi	r0, r3, [r6, #8]
		if (rx_err)
     fec:	f8d8 0000 	ldr.w	r0, [r8]
     ff0:	b110      	cbz	r0, ff8 <bt_test_rx+0x58>
			RXLED_CLR;
     ff2:	2310      	movs	r3, #16
     ff4:	f8c9 3000 	str.w	r3, [r9]
		if (rx_tc) {
     ff8:	6838      	ldr	r0, [r7, #0]
     ffa:	b178      	cbz	r0, 101c <bt_test_rx+0x7c>
			if (rx_tc > 1)
     ffc:	6838      	ldr	r0, [r7, #0]
     ffe:	2801      	cmp	r0, #1
				TXLED_CLR;
    1000:	bf88      	it	hi
    1002:	f8c9 1000 	strhi.w	r1, [r9]
			if (find_giac(idle_rxbuf)) {
    1006:	68f0      	ldr	r0, [r6, #12]
    1008:	f7ff ff8a 	bl	f20 <find_giac>
    100c:	f44f 7180 	mov.w	r1, #256	; 0x100
    1010:	4a0b      	ldr	r2, [pc, #44]	; (1040 <bt_test_rx+0xa0>)
    1012:	b158      	cbz	r0, 102c <bt_test_rx+0x8c>
				countdown = 100;
    1014:	2564      	movs	r5, #100	; 0x64
				USRLED_SET;
    1016:	f8c2 b000 	str.w	fp, [r2]
				num_giacs++;
    101a:	3401      	adds	r4, #1
					--countdown;
				}
			}
		}

		rx_tc = 0;
    101c:	2000      	movs	r0, #0
	while (num_giacs < 20) {
    101e:	2c14      	cmp	r4, #20
		rx_tc = 0;
    1020:	6038      	str	r0, [r7, #0]
		rx_err = 0;
    1022:	f8c8 0000 	str.w	r0, [r8]
	while (num_giacs < 20) {
    1026:	d1d3      	bne.n	fd0 <bt_test_rx+0x30>
	}
	//FIXME turn off rx
}
    1028:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (countdown == 0) {
    102c:	b91d      	cbnz	r5, 1036 <bt_test_rx+0x96>
					num_giacs = 0;
    102e:	462c      	mov	r4, r5
					USRLED_CLR;
    1030:	f8c9 b000 	str.w	fp, [r9]
					num_giacs = 0;
    1034:	e7f2      	b.n	101c <bt_test_rx+0x7c>
					--countdown;
    1036:	3d01      	subs	r5, #1
    1038:	e7f0      	b.n	101c <bt_test_rx+0x7c>
    103a:	bf00      	nop
    103c:	10000450 	.word	0x10000450
    1040:	2009c038 	.word	0x2009c038
    1044:	100005e8 	.word	0x100005e8
    1048:	1000267c 	.word	0x1000267c
    104c:	2009c03c 	.word	0x2009c03c

00001050 <main>:
	u32 i = 400 * ms;
	while (--i);
}

int main()
{
    1050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;

	gpio_init();
    1052:	f000 f8f7 	bl	1244 <gpio_init>

	/* blinky */
	for (i = 0; i < 2; i++) {
		TXLED_SET;
    1056:	f44f 7680 	mov.w	r6, #256	; 0x100
		RXLED_SET;
		USRLED_SET;
    105a:	2302      	movs	r3, #2
		RXLED_SET;
    105c:	2510      	movs	r5, #16
		TXLED_SET;
    105e:	4f37      	ldr	r7, [pc, #220]	; (113c <main+0xec>)
		waitms(200);
		TXLED_CLR;
    1060:	4c37      	ldr	r4, [pc, #220]	; (1140 <main+0xf0>)
		TXLED_SET;
    1062:	603e      	str	r6, [r7, #0]
		RXLED_SET;
    1064:	603d      	str	r5, [r7, #0]
		USRLED_SET;
    1066:	603b      	str	r3, [r7, #0]
		TXLED_CLR;
    1068:	6026      	str	r6, [r4, #0]
		RXLED_CLR;
    106a:	6025      	str	r5, [r4, #0]
		USRLED_CLR;
    106c:	6023      	str	r3, [r4, #0]
		TXLED_SET;
    106e:	603e      	str	r6, [r7, #0]
		RXLED_SET;
    1070:	603d      	str	r5, [r7, #0]
		USRLED_SET;
    1072:	603b      	str	r3, [r7, #0]
		TXLED_CLR;
    1074:	6026      	str	r6, [r4, #0]
		RXLED_CLR;
    1076:	6025      	str	r5, [r4, #0]
		USRLED_CLR;
    1078:	6023      	str	r3, [r4, #0]
		waitms(200);
	}

	/* cc2400_test */
	cc2400_init();
    107a:	f000 f969 	bl	1350 <cc2400_init>
	TXLED_SET;
    107e:	603e      	str	r6, [r7, #0]
	waitms(200);
	TXLED_CLR;
    1080:	6026      	str	r6, [r4, #0]
	waitms(200);
	cc2400_reset();
    1082:	f000 f9ab 	bl	13dc <cc2400_reset>
	TXLED_SET;
    1086:	603e      	str	r6, [r7, #0]
	waitms(200);
	TXLED_CLR;
	waitms(200);
	if (cc2400_get(AGCCTRL) != 0xf700)
    1088:	2004      	movs	r0, #4
	TXLED_CLR;
    108a:	6026      	str	r6, [r4, #0]
	if (cc2400_get(AGCCTRL) != 0xf700)
    108c:	f000 f97c 	bl	1388 <cc2400_get>
    1090:	f5b0 4f77 	cmp.w	r0, #63232	; 0xf700
    1094:	d000      	beq.n	1098 <main+0x48>
		while(1);
    1096:	e7fe      	b.n	1096 <main+0x46>
	TXLED_SET;
    1098:	603e      	str	r6, [r7, #0]
	waitms(200);

	/* clock_test */
	clock_start();
    109a:	f000 f9b5 	bl	1408 <clock_start>
    109e:	2604      	movs	r6, #4
	for (i = 0; i < 4; i++) {
		RXLED_SET;
		wait(2);
    10a0:	2002      	movs	r0, #2
		RXLED_SET;
    10a2:	603d      	str	r5, [r7, #0]
		wait(2);
    10a4:	f000 f89e 	bl	11e4 <wait>
		RXLED_CLR;
		wait(2);
    10a8:	2002      	movs	r0, #2
		RXLED_CLR;
    10aa:	6025      	str	r5, [r4, #0]
		wait(2);
    10ac:	f000 f89a 	bl	11e4 <wait>
	for (i = 0; i < 4; i++) {
    10b0:	3e01      	subs	r6, #1
    10b2:	d1f5      	bne.n	10a0 <main+0x50>
	T0TCR = TCR_Counter_Reset;
    10b4:	2402      	movs	r4, #2
	T0PR = 4;
    10b6:	2104      	movs	r1, #4
	T0TCR = TCR_Counter_Reset;
    10b8:	4a22      	ldr	r2, [pc, #136]	; (1144 <main+0xf4>)
	clkn_high = 0;
    10ba:	4b23      	ldr	r3, [pc, #140]	; (1148 <main+0xf8>)
	}
	RXLED_SET;
    10bc:	603d      	str	r5, [r7, #0]
	T0TCR = TCR_Counter_Reset;
    10be:	6014      	str	r4, [r2, #0]
	clkn_high = 0;
    10c0:	701e      	strb	r6, [r3, #0]
	T0PR = 4;
    10c2:	4b22      	ldr	r3, [pc, #136]	; (114c <main+0xfc>)
	 */
	ubertooth_usb_init();

	while (1) {
		USBHwISR();
		if (rx_pkts)
    10c4:	4d22      	ldr	r5, [pc, #136]	; (1150 <main+0x100>)
	T0PR = 4;
    10c6:	6019      	str	r1, [r3, #0]
	T0MR0 = 3276799999;
    10c8:	4922      	ldr	r1, [pc, #136]	; (1154 <main+0x104>)
    10ca:	60d9      	str	r1, [r3, #12]
	T0MCR = TMCR_MR0R | TMCR_MR0I;
    10cc:	2103      	movs	r1, #3
    10ce:	6099      	str	r1, [r3, #8]
	ISER0 |= ISER0_ISE_TIMER0;
    10d0:	4921      	ldr	r1, [pc, #132]	; (1158 <main+0x108>)
    10d2:	680b      	ldr	r3, [r1, #0]
    10d4:	4323      	orrs	r3, r4
    10d6:	600b      	str	r3, [r1, #0]
	T0TCR = TCR_Counter_Enable;
    10d8:	2301      	movs	r3, #1
    10da:	6013      	str	r3, [r2, #0]
	bt_test_rx();
    10dc:	f7ff ff60 	bl	fa0 <bt_test_rx>
	USRLED_SET;
    10e0:	603c      	str	r4, [r7, #0]
	ubertooth_usb_init();
    10e2:	f7ff fb0d 	bl	700 <ubertooth_usb_init>
    10e6:	462c      	mov	r4, r5
		USBHwISR();
    10e8:	f000 fc0e 	bl	1908 <USBHwISR>
		if (rx_pkts)
    10ec:	682b      	ldr	r3, [r5, #0]
    10ee:	b113      	cbz	r3, 10f6 <main+0xa6>
			bt_stream_rx();
    10f0:	f7ff fe28 	bl	d44 <bt_stream_rx>
    10f4:	e7f8      	b.n	10e8 <main+0x98>
		else if (requested_mode == MODE_TX_TEST && mode != MODE_TX_TEST)
    10f6:	686b      	ldr	r3, [r5, #4]
    10f8:	2b03      	cmp	r3, #3
    10fa:	d105      	bne.n	1108 <main+0xb8>
    10fc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    10fe:	2b03      	cmp	r3, #3
    1100:	d002      	beq.n	1108 <main+0xb8>
			cc2400_txtest();
    1102:	f7ff fbb1 	bl	868 <cc2400_txtest>
    1106:	e7ef      	b.n	10e8 <main+0x98>
		else if (requested_mode == MODE_RANGE_TEST && mode != MODE_RANGE_TEST)
    1108:	6863      	ldr	r3, [r4, #4]
    110a:	2b05      	cmp	r3, #5
    110c:	d105      	bne.n	111a <main+0xca>
    110e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1110:	2b05      	cmp	r3, #5
    1112:	d002      	beq.n	111a <main+0xca>
			cc2400_rangetest();
    1114:	f7ff fc00 	bl	918 <cc2400_rangetest>
    1118:	e7e6      	b.n	10e8 <main+0x98>
		else if (requested_mode == MODE_REPEATER && mode != MODE_REPEATER)
    111a:	6863      	ldr	r3, [r4, #4]
    111c:	2b06      	cmp	r3, #6
    111e:	d104      	bne.n	112a <main+0xda>
    1120:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1122:	2b06      	cmp	r3, #6
    1124:	d001      	beq.n	112a <main+0xda>
			cc2400_repeater();
    1126:	f7ff fd43 	bl	bb0 <cc2400_repeater>
		else if (requested_mode == MODE_SPECAN && mode != MODE_SPECAN)
    112a:	6863      	ldr	r3, [r4, #4]
    112c:	2b04      	cmp	r3, #4
    112e:	d1db      	bne.n	10e8 <main+0x98>
    1130:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1132:	2b04      	cmp	r3, #4
    1134:	d0d8      	beq.n	10e8 <main+0x98>
			specan();
    1136:	f7ff fe69 	bl	e0c <specan>
    113a:	e7d5      	b.n	10e8 <main+0x98>
    113c:	2009c038 	.word	0x2009c038
    1140:	2009c03c 	.word	0x2009c03c
    1144:	40004004 	.word	0x40004004
    1148:	100005fc 	.word	0x100005fc
    114c:	4000400c 	.word	0x4000400c
    1150:	10000520 	.word	0x10000520
    1154:	c34fffff 	.word	0xc34fffff
    1158:	e000e100 	.word	0xe000e100

0000115c <USB_IRQHandler>:
	return fifo_get(&rxfifo, &c) ? c : EOF;
}

void USB_IRQHandler()
{
	USBHwISR();
    115c:	f000 bbd4 	b.w	1908 <USBHwISR>

00001160 <Reset_Handler>:
extern void __libc_init_array(void);
extern int main(void);

/* Reset Handler */
void Reset_Handler(void)
{
    1160:	b508      	push	{r3, lr}
	unsigned long *src, *dest;

	// Copy the data segment initializers from flash to SRAM
	src = &_etext;
	for(dest = &_data; dest < &_edata; )
    1162:	4b0d      	ldr	r3, [pc, #52]	; (1198 <Reset_Handler+0x38>)
	src = &_etext;
    1164:	4a0d      	ldr	r2, [pc, #52]	; (119c <Reset_Handler+0x3c>)
	for(dest = &_data; dest < &_edata; )
    1166:	490e      	ldr	r1, [pc, #56]	; (11a0 <Reset_Handler+0x40>)
    1168:	428b      	cmp	r3, r1
    116a:	d30c      	bcc.n	1186 <Reset_Handler+0x26>

	// Initialize the .bss segment of memory to zeros
	src = &_bss;
	while (src < &_ebss)
	{
		*src++ = 0;
    116c:	2100      	movs	r1, #0
	src = &_bss;
    116e:	4b0d      	ldr	r3, [pc, #52]	; (11a4 <Reset_Handler+0x44>)
	while (src < &_ebss)
    1170:	4a0d      	ldr	r2, [pc, #52]	; (11a8 <Reset_Handler+0x48>)
    1172:	4293      	cmp	r3, r2
    1174:	d30c      	bcc.n	1190 <Reset_Handler+0x30>
	}

	__libc_init_array();
    1176:	f7ff f80d 	bl	194 <__libc_init_array>

	// Set the vector table location.
	SCB_VTOR = (uint32_t)&_interrupt_vector_table;
    117a:	4a0c      	ldr	r2, [pc, #48]	; (11ac <Reset_Handler+0x4c>)
    117c:	4b0c      	ldr	r3, [pc, #48]	; (11b0 <Reset_Handler+0x50>)
    117e:	601a      	str	r2, [r3, #0]

	main();
    1180:	f7ff ff66 	bl	1050 <main>

	// In case main() fails, have something to breakpoint
	while (1) {;}
    1184:	e7fe      	b.n	1184 <Reset_Handler+0x24>
		*dest++ = *src++;
    1186:	f852 0b04 	ldr.w	r0, [r2], #4
    118a:	f843 0b04 	str.w	r0, [r3], #4
    118e:	e7eb      	b.n	1168 <Reset_Handler+0x8>
		*src++ = 0;
    1190:	f843 1b04 	str.w	r1, [r3], #4
    1194:	e7ed      	b.n	1172 <Reset_Handler+0x12>
    1196:	bf00      	nop
    1198:	10000020 	.word	0x10000020
    119c:	00001f50 	.word	0x00001f50
    11a0:	10000504 	.word	0x10000504
    11a4:	10000504 	.word	0x10000504
    11a8:	10002680 	.word	0x10002680
    11ac:	00000000 	.word	0x00000000
    11b0:	e000ed08 	.word	0xe000ed08

000011b4 <ADC_IRQHandler>:
extern unsigned long _StackTop;

extern void Reset_Handler(void);

/* Default interrupt handler */
static void Default_Handler(void) { while(1) {;} }
    11b4:	e7fe      	b.n	11b4 <ADC_IRQHandler>
    11b6:	0000      	movs	r0, r0

000011b8 <wait_us>:
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
    11b8:	08c3      	lsrs	r3, r0, #3
    11ba:	eb03 0390 	add.w	r3, r3, r0, lsr #2
    11be:	eb03 1390 	add.w	r3, r3, r0, lsr #6
    11c2:	eb03 13d0 	add.w	r3, r3, r0, lsr #7
    11c6:	eb03 2390 	add.w	r3, r3, r0, lsr #10
    11ca:	eb03 20d0 	add.w	r0, r3, r0, lsr #11
	wait_us_counter =
    11ce:	4b04      	ldr	r3, [pc, #16]	; (11e0 <wait_us+0x28>)
    11d0:	6058      	str	r0, [r3, #4]
	while(--wait_us_counter);
    11d2:	685a      	ldr	r2, [r3, #4]
    11d4:	3a01      	subs	r2, #1
    11d6:	605a      	str	r2, [r3, #4]
    11d8:	2a00      	cmp	r2, #0
    11da:	d1fa      	bne.n	11d2 <wait_us+0x1a>
}
    11dc:	4770      	bx	lr
    11de:	bf00      	nop
    11e0:	1000054c 	.word	0x1000054c

000011e4 <wait>:
	wait_us(seconds * 1000000);
    11e4:	4b01      	ldr	r3, [pc, #4]	; (11ec <wait+0x8>)
    11e6:	4358      	muls	r0, r3
    11e8:	f7ff bfe6 	b.w	11b8 <wait_us>
    11ec:	000f4240 	.word	0x000f4240

000011f0 <all_pins_off>:
}

void all_pins_off(void)
{
	/* configure all pins for GPIO */
	PINSEL0 = 0;
    11f0:	2300      	movs	r3, #0
    11f2:	4a10      	ldr	r2, [pc, #64]	; (1234 <all_pins_off+0x44>)
    11f4:	6013      	str	r3, [r2, #0]
	PINSEL1 = 0;
    11f6:	6053      	str	r3, [r2, #4]
	PINSEL2 = 0;
    11f8:	6093      	str	r3, [r2, #8]
	PINSEL3 = 0;
    11fa:	60d3      	str	r3, [r2, #12]
	PINSEL4 = 0;
    11fc:	6113      	str	r3, [r2, #16]
	PINSEL7 = 0;
    11fe:	61d3      	str	r3, [r2, #28]
	PINSEL9 = 0;
    1200:	6253      	str	r3, [r2, #36]	; 0x24
	PINSEL10 = 0;
    1202:	6293      	str	r3, [r2, #40]	; 0x28

	/* configure all pins as inputs */
	FIO0DIR = 0;
    1204:	4a0c      	ldr	r2, [pc, #48]	; (1238 <all_pins_off+0x48>)
    1206:	6013      	str	r3, [r2, #0]
	FIO1DIR = 0;
    1208:	6213      	str	r3, [r2, #32]
	FIO2DIR = 0;
    120a:	6413      	str	r3, [r2, #64]	; 0x40
	FIO3DIR = 0;
    120c:	6613      	str	r3, [r2, #96]	; 0x60
	FIO4DIR = 0;
    120e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

	/* pull-up on every pin */
	PINMODE0 = 0;
    1212:	4a0a      	ldr	r2, [pc, #40]	; (123c <all_pins_off+0x4c>)
    1214:	6013      	str	r3, [r2, #0]
	PINMODE1 = 0;
    1216:	6053      	str	r3, [r2, #4]
	PINMODE2 = 0;
    1218:	6093      	str	r3, [r2, #8]
	PINMODE3 = 0;
    121a:	60d3      	str	r3, [r2, #12]
	PINMODE4 = 0;
    121c:	6113      	str	r3, [r2, #16]
	PINMODE7 = 0;
    121e:	61d3      	str	r3, [r2, #28]
	PINMODE9 = 0;
    1220:	6253      	str	r3, [r2, #36]	; 0x24

	/* set all outputs low */
	FIO0PIN = 0;
    1222:	4a07      	ldr	r2, [pc, #28]	; (1240 <all_pins_off+0x50>)
    1224:	6013      	str	r3, [r2, #0]
	FIO1PIN = 0;
    1226:	6213      	str	r3, [r2, #32]
	FIO2PIN = 0;
    1228:	6413      	str	r3, [r2, #64]	; 0x40
	FIO3PIN = 0;
    122a:	6613      	str	r3, [r2, #96]	; 0x60
	FIO4PIN = 0;
    122c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
    1230:	4770      	bx	lr
    1232:	bf00      	nop
    1234:	4002c000 	.word	0x4002c000
    1238:	2009c000 	.word	0x2009c000
    123c:	4002c040 	.word	0x4002c040
    1240:	2009c014 	.word	0x2009c014

00001244 <gpio_init>:
{
    1244:	b508      	push	{r3, lr}
	all_pins_off();
    1246:	f7ff ffd3 	bl	11f0 <all_pins_off>
	FIO0DIR = 0;
    124a:	2300      	movs	r3, #0
	FIO1DIR = (PIN_USRLED | PIN_RXLED | PIN_TXLED | PIN_CC3V3 |
    124c:	f24c 7112 	movw	r1, #50962	; 0xc712
	FIO0DIR = 0;
    1250:	4a08      	ldr	r2, [pc, #32]	; (1274 <gpio_init+0x30>)
    1252:	6013      	str	r3, [r2, #0]
	FIO1DIR = (PIN_USRLED | PIN_RXLED | PIN_TXLED | PIN_CC3V3 |
    1254:	6211      	str	r1, [r2, #32]
	FIO2DIR = (PIN_CSN | PIN_SCLK | PIN_MOSI | PIN_PAEN | PIN_HGM);
    1256:	f240 11b1 	movw	r1, #433	; 0x1b1
    125a:	6411      	str	r1, [r2, #64]	; 0x40
	FIO4DIR = (PIN_TX | PIN_SSEL1);
    125c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
	FIO3DIR = 0;
    1260:	6613      	str	r3, [r2, #96]	; 0x60
	FIO4DIR = (PIN_TX | PIN_SSEL1);
    1262:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
	FIO0PIN = 0;
    1266:	6153      	str	r3, [r2, #20]
	FIO1PIN = 0;
    1268:	6353      	str	r3, [r2, #52]	; 0x34
	FIO2PIN = 0;
    126a:	6553      	str	r3, [r2, #84]	; 0x54
	FIO3PIN = 0;
    126c:	6753      	str	r3, [r2, #116]	; 0x74
	FIO4PIN = 0;
    126e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
    1272:	bd08      	pop	{r3, pc}
    1274:	2009c000 	.word	0x2009c000

00001278 <dio_ssp_init>:
	/* set P1.18 as MOSI0 */
	PINSEL1 = (PINSEL1 & ~(3 << 4)) | (2 << 4);
#endif
#if defined UBERTOOTH_ONE || defined TC13BADGE
	/* set P0.7 as SCK1 */
	PINSEL0 = (PINSEL0 & ~(3 << 14)) | (2 << 14);
    1278:	4b11      	ldr	r3, [pc, #68]	; (12c0 <dio_ssp_init+0x48>)
    127a:	681a      	ldr	r2, [r3, #0]
    127c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
    1280:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    1284:	601a      	str	r2, [r3, #0]

	/* set P0.6 as SSEL1 */
	PINSEL0 = (PINSEL0 & ~(3 << 12)) | (2 << 12);
    1286:	681a      	ldr	r2, [r3, #0]
    1288:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    128c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    1290:	601a      	str	r2, [r3, #0]

	/* set P0.8 as MISO1 */
	PINSEL0 = (PINSEL0 & ~(3 << 16)) | (2 << 16);
    1292:	681a      	ldr	r2, [r3, #0]
    1294:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    1298:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    129c:	601a      	str	r2, [r3, #0]

	/* set P0.9 as MOSI1 */
	PINSEL0 = (PINSEL0 & ~(3 << 18)) | (2 << 18);
    129e:	681a      	ldr	r2, [r3, #0]
    12a0:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
    12a4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    12a8:	601a      	str	r2, [r3, #0]
	 * interface.  Since the CC2400 doesn't have a slave select output, we
	 * control it with this.  DIO_SSEL should already be configured by
	 * gpio_init().  We set it high by default because it is an active low
	 * signal.
	 */
	DIO_SSEL_SET;
    12aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    12ae:	4b05      	ldr	r3, [pc, #20]	; (12c4 <dio_ssp_init+0x4c>)
    12b0:	601a      	str	r2, [r3, #0]

	/* configure DIO_SSP */
	DIO_SSP_CR0 = (0x7 /* 8 bit transfer */ | SSPCR0_CPOL | SSPCR0_CPHA);
    12b2:	22c7      	movs	r2, #199	; 0xc7
    12b4:	4b04      	ldr	r3, [pc, #16]	; (12c8 <dio_ssp_init+0x50>)
    12b6:	601a      	str	r2, [r3, #0]
	DIO_SSP_CR1 = (SSPCR1_MS | SSPCR1_SOD);
    12b8:	220c      	movs	r2, #12
    12ba:	605a      	str	r2, [r3, #4]
}
    12bc:	4770      	bx	lr
    12be:	bf00      	nop
    12c0:	4002c000 	.word	0x4002c000
    12c4:	2009c098 	.word	0x2009c098
    12c8:	40030000 	.word	0x40030000

000012cc <atest_init>:
	 * ADC can optionally be configured for ATEST1 and ATEST2, but for now we
	 * set them as floating inputs.
	 */

	/* P0.25 is ATEST1, P0.26 is ATEST2 */
	PINSEL1 &= ~((0x3 << 20) | (0x3 << 18)); // set as GPIO
    12cc:	4a09      	ldr	r2, [pc, #36]	; (12f4 <atest_init+0x28>)
    12ce:	6813      	ldr	r3, [r2, #0]
    12d0:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
    12d4:	6013      	str	r3, [r2, #0]
	FIO0DIR &= ~(0x3 << 25); // set as input
    12d6:	4a08      	ldr	r2, [pc, #32]	; (12f8 <atest_init+0x2c>)
    12d8:	6813      	ldr	r3, [r2, #0]
    12da:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
    12de:	6013      	str	r3, [r2, #0]
	PINMODE1 |= (0x5 << 19); // no pull-up/pull-down
    12e0:	4b06      	ldr	r3, [pc, #24]	; (12fc <atest_init+0x30>)
    12e2:	681a      	ldr	r2, [r3, #0]
    12e4:	f442 1220 	orr.w	r2, r2, #2621440	; 0x280000
    12e8:	601a      	str	r2, [r3, #0]
	PINMODE1 &= ~(0x5 << 18); // no pull-up/pull-down
    12ea:	681a      	ldr	r2, [r3, #0]
    12ec:	f422 12a0 	bic.w	r2, r2, #1310720	; 0x140000
    12f0:	601a      	str	r2, [r3, #0]
}
    12f2:	4770      	bx	lr
    12f4:	4002c004 	.word	0x4002c004
    12f8:	2009c000 	.word	0x2009c000
    12fc:	4002c044 	.word	0x4002c044

00001300 <cc2400_spi>:
 * 2. We're saving the second SPI peripheral for an expansion port.
 * 3. The CC2400 needs CSN held low for the entire transaction which the
 *    LPC17xx SPI peripheral won't do without some workaround anyway.
 */
u32 cc2400_spi(u8 len, u32 data)
{
    1300:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32 msb = 1 << (len - 1);
    1302:	1e45      	subs	r5, r0, #1
{
    1304:	4603      	mov	r3, r0

	/* start transaction by dropping CSN */
	CSN_CLR;
    1306:	2020      	movs	r0, #32
	u32 msb = 1 << (len - 1);
    1308:	2401      	movs	r4, #1
			MOSI_SET;
		else
			MOSI_CLR;
		data <<= 1;

		SCLK_SET;
    130a:	2710      	movs	r7, #16
	CSN_CLR;
    130c:	4a0d      	ldr	r2, [pc, #52]	; (1344 <cc2400_spi+0x44>)
		/* Save a few cycles by avoiding the compare/branch */
		data |= !!MISO;
    130e:	f8df c03c 	ldr.w	ip, [pc, #60]	; 134c <cc2400_spi+0x4c>
	CSN_CLR;
    1312:	6010      	str	r0, [r2, #0]
	while (len--) {
    1314:	4608      	mov	r0, r1
    1316:	490c      	ldr	r1, [pc, #48]	; (1348 <cc2400_spi+0x48>)
	u32 msb = 1 << (len - 1);
    1318:	fa04 f505 	lsl.w	r5, r4, r5
	while (len--) {
    131c:	3b01      	subs	r3, #1
    131e:	b2db      	uxtb	r3, r3
    1320:	2bff      	cmp	r3, #255	; 0xff
    1322:	d102      	bne.n	132a <cc2400_spi+0x2a>
		SCLK_CLR;
	}

	/* end transaction by raising CSN */
	CSN_SET;
    1324:	2320      	movs	r3, #32
    1326:	600b      	str	r3, [r1, #0]

	return data;
}
    1328:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (data & msb)
    132a:	4228      	tst	r0, r5
			MOSI_SET;
    132c:	bf14      	ite	ne
    132e:	600c      	strne	r4, [r1, #0]
			MOSI_CLR;
    1330:	6014      	streq	r4, [r2, #0]
		SCLK_SET;
    1332:	600f      	str	r7, [r1, #0]
		data |= !!MISO;
    1334:	f8dc 6000 	ldr.w	r6, [ip]
		SCLK_CLR;
    1338:	6017      	str	r7, [r2, #0]
		data |= !!MISO;
    133a:	f3c6 0640 	ubfx	r6, r6, #1, #1
    133e:	ea46 0040 	orr.w	r0, r6, r0, lsl #1
		SCLK_CLR;
    1342:	e7eb      	b.n	131c <cc2400_spi+0x1c>
    1344:	2009c05c 	.word	0x2009c05c
    1348:	2009c058 	.word	0x2009c058
    134c:	2009c054 	.word	0x2009c054

00001350 <cc2400_init>:
{
    1350:	b508      	push	{r3, lr}
	atest_init();
    1352:	f7ff ffbb 	bl	12cc <atest_init>
	CC1V8_SET;
    1356:	f44f 7300 	mov.w	r3, #512	; 0x200
    135a:	4908      	ldr	r1, [pc, #32]	; (137c <cc2400_init+0x2c>)
	wait_us(50);
    135c:	2032      	movs	r0, #50	; 0x32
	CC1V8_SET;
    135e:	600b      	str	r3, [r1, #0]
	wait_us(50);
    1360:	f7ff ff2a 	bl	11b8 <wait_us>
	CSN_SET;
    1364:	2220      	movs	r2, #32
    1366:	4b06      	ldr	r3, [pc, #24]	; (1380 <cc2400_init+0x30>)

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    1368:	2018      	movs	r0, #24
	CSN_SET;
    136a:	601a      	str	r2, [r3, #0]
	CC3V3_SET;
    136c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    1370:	600b      	str	r3, [r1, #0]
	cc2400_spi(24, out);
    1372:	4904      	ldr	r1, [pc, #16]	; (1384 <cc2400_init+0x34>)
}
    1374:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	cc2400_spi(24, out);
    1378:	f7ff bfc2 	b.w	1300 <cc2400_spi>
    137c:	2009c038 	.word	0x2009c038
    1380:	2009c058 	.word	0x2009c058
    1384:	000d7fff 	.word	0x000d7fff

00001388 <cc2400_get>:
{
    1388:	b508      	push	{r3, lr}
	u32 out = (reg | 0x80) << 16;
    138a:	f040 0180 	orr.w	r1, r0, #128	; 0x80
	in = cc2400_spi(24, out);
    138e:	0409      	lsls	r1, r1, #16
    1390:	2018      	movs	r0, #24
    1392:	f7ff ffb5 	bl	1300 <cc2400_spi>
}
    1396:	b280      	uxth	r0, r0
    1398:	bd08      	pop	{r3, pc}

0000139a <cc2400_set>:
	cc2400_spi(24, out);
    139a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    139e:	2018      	movs	r0, #24
    13a0:	f7ff bfae 	b.w	1300 <cc2400_spi>

000013a4 <cc2400_get8>:
}

/* read 8 bit value from a register */
u8 cc2400_get8(u8 reg)
{
    13a4:	b508      	push	{r3, lr}
	u16 in;

	u16 out = (reg | 0x80) << 8;
    13a6:	f040 0180 	orr.w	r1, r0, #128	; 0x80
	in = cc2400_spi(16, out);
    13aa:	0209      	lsls	r1, r1, #8
    13ac:	2010      	movs	r0, #16
    13ae:	f7ff ffa7 	bl	1300 <cc2400_spi>
	return in & 0xFF;
}
    13b2:	b2c0      	uxtb	r0, r0
    13b4:	bd08      	pop	{r3, pc}

000013b6 <cc2400_set8>:

/* write 8 bit value to a register */
void cc2400_set8(u8 reg, u8 val)
{
	u32 out = (reg << 8) | val;
	cc2400_spi(16, out);
    13b6:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
    13ba:	2010      	movs	r0, #16
    13bc:	f7ff bfa0 	b.w	1300 <cc2400_spi>

000013c0 <cc2400_status>:
	CSN_SET;
}

/* get the status */
u8 cc2400_status()
{
    13c0:	b508      	push	{r3, lr}
	return cc2400_spi(8, 0);
    13c2:	2100      	movs	r1, #0
    13c4:	2008      	movs	r0, #8
    13c6:	f7ff ff9b 	bl	1300 <cc2400_spi>
}
    13ca:	b2c0      	uxtb	r0, r0
    13cc:	bd08      	pop	{r3, pc}

000013ce <cc2400_strobe>:

/* strobe register, return status */
u8 cc2400_strobe(u8 reg)
{
    13ce:	b508      	push	{r3, lr}
    13d0:	4601      	mov	r1, r0
	return cc2400_spi(8, reg);
    13d2:	2008      	movs	r0, #8
    13d4:	f7ff ff94 	bl	1300 <cc2400_spi>
}
    13d8:	b2c0      	uxtb	r0, r0
    13da:	bd08      	pop	{r3, pc}

000013dc <cc2400_reset>:
/*
 * Warning: This should only be called when running on the internal oscillator.
 * Otherwise use clock_start().
 */
void cc2400_reset()
{
    13dc:	b508      	push	{r3, lr}
	cc2400_spi(24, out);
    13de:	2100      	movs	r1, #0
    13e0:	2018      	movs	r0, #24
    13e2:	f7ff ff8d 	bl	1300 <cc2400_spi>
	cc2400_set(MAIN, 0x0000);
	while (cc2400_get(MAIN) != 0x0000);
    13e6:	2000      	movs	r0, #0
    13e8:	f7ff ffce 	bl	1388 <cc2400_get>
    13ec:	2800      	cmp	r0, #0
    13ee:	d1fa      	bne.n	13e6 <cc2400_reset+0xa>
	cc2400_spi(24, out);
    13f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    13f4:	2018      	movs	r0, #24
    13f6:	f7ff ff83 	bl	1300 <cc2400_spi>
	cc2400_set(MAIN, 0x8000);
	while (cc2400_get(MAIN) != 0x8000);
    13fa:	2000      	movs	r0, #0
    13fc:	f7ff ffc4 	bl	1388 <cc2400_get>
    1400:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    1404:	d1f9      	bne.n	13fa <cc2400_reset+0x1e>
}
    1406:	bd08      	pop	{r3, pc}

00001408 <clock_start>:

/* activate the CC2400's 16 MHz oscillator and sync LPC175x to it */
void clock_start()
{
    1408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* configure flash accelerator for higher clock rate */
	FLASHCFG = (0x03A | (FLASHTIM << 12));
    140c:	f244 023a 	movw	r2, #16442	; 0x403a
    1410:	4b40      	ldr	r3, [pc, #256]	; (1514 <clock_start+0x10c>)

	/* switch to the internal oscillator if necessary */
	CLKSRCSEL = 0;
    1412:	4e41      	ldr	r6, [pc, #260]	; (1518 <clock_start+0x110>)
	FLASHCFG = (0x03A | (FLASHTIM << 12));
    1414:	601a      	str	r2, [r3, #0]
	CLKSRCSEL = 0;
    1416:	2300      	movs	r3, #0

	/* disconnect PLL0 */
	PLL0CON &= ~PLL0CON_PLLC0;
    1418:	4d40      	ldr	r5, [pc, #256]	; (151c <clock_start+0x114>)
	CLKSRCSEL = 0;
    141a:	6033      	str	r3, [r6, #0]
	PLL0CON &= ~PLL0CON_PLLC0;
    141c:	682b      	ldr	r3, [r5, #0]
	PLL0FEED_SEQUENCE;
    141e:	4c40      	ldr	r4, [pc, #256]	; (1520 <clock_start+0x118>)
	PLL0CON &= ~PLL0CON_PLLC0;
    1420:	f023 0302 	bic.w	r3, r3, #2
    1424:	602b      	str	r3, [r5, #0]
	PLL0FEED_SEQUENCE;
    1426:	23aa      	movs	r3, #170	; 0xaa
    1428:	6023      	str	r3, [r4, #0]
    142a:	2355      	movs	r3, #85	; 0x55
    142c:	6023      	str	r3, [r4, #0]
	while (PLL0STAT & PLL0STAT_PLLC0_STAT);
    142e:	4b3d      	ldr	r3, [pc, #244]	; (1524 <clock_start+0x11c>)
    1430:	461f      	mov	r7, r3
    1432:	681a      	ldr	r2, [r3, #0]
    1434:	0190      	lsls	r0, r2, #6
    1436:	d4fc      	bmi.n	1432 <clock_start+0x2a>

	/* turn off PLL0 */
	PLL0CON &= ~PLL0CON_PLLE0;
    1438:	682b      	ldr	r3, [r5, #0]
    143a:	f023 0301 	bic.w	r3, r3, #1
    143e:	602b      	str	r3, [r5, #0]
	PLL0FEED_SEQUENCE;
    1440:	23aa      	movs	r3, #170	; 0xaa
    1442:	6023      	str	r3, [r4, #0]
    1444:	2355      	movs	r3, #85	; 0x55
    1446:	6023      	str	r3, [r4, #0]
	while (PLL0STAT & PLL0STAT_PLLE0_STAT);
    1448:	683b      	ldr	r3, [r7, #0]
    144a:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
    144e:	d1fb      	bne.n	1448 <clock_start+0x40>

	/* temporarily set CPU clock divider to 1 */
	CCLKCFG = 0;
    1450:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 1548 <clock_start+0x140>
    1454:	f8c8 3000 	str.w	r3, [r8]

	/* configure CC2400 oscillator, output carrier sense on GIO6 */
	cc2400_reset();
    1458:	f7ff ffc0 	bl	13dc <cc2400_reset>
	cc2400_spi(24, out);
    145c:	2018      	movs	r0, #24
    145e:	4932      	ldr	r1, [pc, #200]	; (1528 <clock_start+0x120>)
    1460:	f7ff ff4e 	bl	1300 <cc2400_spi>
	cc2400_set(IOCFG, (GIO_CARRIER_SENSE_N << 9) | (GIO_CLK_16M << 3));
	cc2400_strobe(SXOSCON);
    1464:	2060      	movs	r0, #96	; 0x60
    1466:	f7ff ffb2 	bl	13ce <cc2400_strobe>
	while (!(cc2400_status() & XOSC16M_STABLE));
    146a:	f7ff ffa9 	bl	13c0 <cc2400_status>
    146e:	0641      	lsls	r1, r0, #25
    1470:	d5fb      	bpl.n	146a <clock_start+0x62>

	/* activate main oscillator */
	SCS = SCS_OSCEN;
    1472:	2220      	movs	r2, #32
    1474:	4b2d      	ldr	r3, [pc, #180]	; (152c <clock_start+0x124>)
    1476:	601a      	str	r2, [r3, #0]
	while (!(SCS & SCS_OSCSTAT));
    1478:	681a      	ldr	r2, [r3, #0]
    147a:	0652      	lsls	r2, r2, #25
    147c:	d5fc      	bpl.n	1478 <clock_start+0x70>
#ifdef TC13BADGE
	PCLKSEL0  = (1 << 2); /* TIMER0 at cclk (30 MHz) */
	PCLKSEL1  = 0;
#else
        // XXX here
	PCLKSEL0  = (2 << 2) | (2 << 4); /* TIMER0 and TIMER1 at cclk/2 (50 MHz) */
    147e:	2228      	movs	r2, #40	; 0x28
    1480:	4b2b      	ldr	r3, [pc, #172]	; (1530 <clock_start+0x128>)
	/* switch to main oscillator */
	CLKSRCSEL = 1;

	/* configure PLL0 */
	PLL0CFG = (MSEL0 << 0) | (NSEL0 << 16);
	PLL0FEED_SEQUENCE;
    1482:	21aa      	movs	r1, #170	; 0xaa
	PCLKSEL0  = (2 << 2) | (2 << 4); /* TIMER0 and TIMER1 at cclk/2 (50 MHz) */
    1484:	601a      	str	r2, [r3, #0]
	PCLKSEL1  = (2 << 12); /* TIMER2 at cclk/2 (50 MHz) */
    1486:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    148a:	605a      	str	r2, [r3, #4]
	CLKSRCSEL = 1;
    148c:	2301      	movs	r3, #1
	PLL0CFG = (MSEL0 << 0) | (NSEL0 << 16);
    148e:	4a29      	ldr	r2, [pc, #164]	; (1534 <clock_start+0x12c>)
	CLKSRCSEL = 1;
    1490:	6033      	str	r3, [r6, #0]
	PLL0CFG = (MSEL0 << 0) | (NSEL0 << 16);
    1492:	4b29      	ldr	r3, [pc, #164]	; (1538 <clock_start+0x130>)
    1494:	601a      	str	r2, [r3, #0]
	PLL0FEED_SEQUENCE;
    1496:	2255      	movs	r2, #85	; 0x55
    1498:	6021      	str	r1, [r4, #0]
    149a:	6022      	str	r2, [r4, #0]

	/* turn on PLL0 */
	PLL0CON |= PLL0CON_PLLE0;
    149c:	682b      	ldr	r3, [r5, #0]
    149e:	f043 0301 	orr.w	r3, r3, #1
    14a2:	602b      	str	r3, [r5, #0]
	PLL0FEED_SEQUENCE;
    14a4:	6021      	str	r1, [r4, #0]
    14a6:	6022      	str	r2, [r4, #0]
	while (!(PLL0STAT & PLL0STAT_PLLE0_STAT));
    14a8:	683b      	ldr	r3, [r7, #0]
    14aa:	01de      	lsls	r6, r3, #7
    14ac:	d5fc      	bpl.n	14a8 <clock_start+0xa0>

	/* set CPU clock divider */
	CCLKCFG = CCLKSEL;
    14ae:	2303      	movs	r3, #3
    14b0:	f8c8 3000 	str.w	r3, [r8]

	/* connect PLL0 */
	PLL0CON |= PLL0CON_PLLC0;
    14b4:	682b      	ldr	r3, [r5, #0]
    14b6:	f043 0302 	orr.w	r3, r3, #2
    14ba:	602b      	str	r3, [r5, #0]
	PLL0FEED_SEQUENCE;
    14bc:	23aa      	movs	r3, #170	; 0xaa
    14be:	6023      	str	r3, [r4, #0]
    14c0:	2355      	movs	r3, #85	; 0x55
    14c2:	6023      	str	r3, [r4, #0]
	while (!(PLL0STAT & PLL0STAT_PLLC0_STAT));
    14c4:	683b      	ldr	r3, [r7, #0]
    14c6:	019d      	lsls	r5, r3, #6
    14c8:	d5fc      	bpl.n	14c4 <clock_start+0xbc>

	/* configure PLL1 */
	PLL1CFG = (MSEL1 << 0) | (PSEL1 << 5);
    14ca:	2222      	movs	r2, #34	; 0x22
	PLL1FEED_SEQUENCE;
    14cc:	2055      	movs	r0, #85	; 0x55
    14ce:	24aa      	movs	r4, #170	; 0xaa
	PLL1CFG = (MSEL1 << 0) | (PSEL1 << 5);
    14d0:	4b1a      	ldr	r3, [pc, #104]	; (153c <clock_start+0x134>)
    14d2:	601a      	str	r2, [r3, #0]

	/* turn on PLL1 */
	PLL1CON |= PLL1CON_PLLE1;
    14d4:	4a1a      	ldr	r2, [pc, #104]	; (1540 <clock_start+0x138>)
	PLL1FEED_SEQUENCE;
    14d6:	609c      	str	r4, [r3, #8]
    14d8:	6098      	str	r0, [r3, #8]
	PLL1CON |= PLL1CON_PLLE1;
    14da:	6811      	ldr	r1, [r2, #0]
	PLL1FEED_SEQUENCE;
    14dc:	3308      	adds	r3, #8
	PLL1CON |= PLL1CON_PLLE1;
    14de:	f041 0101 	orr.w	r1, r1, #1
    14e2:	6011      	str	r1, [r2, #0]
	PLL1FEED_SEQUENCE;
	while (!(PLL1STAT & PLL1STAT_PLLE1_STAT));
    14e4:	4917      	ldr	r1, [pc, #92]	; (1544 <clock_start+0x13c>)
	PLL1FEED_SEQUENCE;
    14e6:	601c      	str	r4, [r3, #0]
    14e8:	6018      	str	r0, [r3, #0]
	while (!(PLL1STAT & PLL1STAT_PLLE1_STAT));
    14ea:	4608      	mov	r0, r1
    14ec:	680c      	ldr	r4, [r1, #0]
    14ee:	05e4      	lsls	r4, r4, #23
    14f0:	d5fc      	bpl.n	14ec <clock_start+0xe4>
	while (!(PLL1STAT & PLL1STAT_PLOCK1));
    14f2:	6801      	ldr	r1, [r0, #0]
    14f4:	0549      	lsls	r1, r1, #21
    14f6:	d5fc      	bpl.n	14f2 <clock_start+0xea>

	/* connect PLL1 */
	PLL1CON |= PLL1CON_PLLC1;
    14f8:	6811      	ldr	r1, [r2, #0]
    14fa:	f041 0102 	orr.w	r1, r1, #2
    14fe:	6011      	str	r1, [r2, #0]
	PLL1FEED_SEQUENCE;
    1500:	22aa      	movs	r2, #170	; 0xaa
    1502:	601a      	str	r2, [r3, #0]
    1504:	2255      	movs	r2, #85	; 0x55
    1506:	601a      	str	r2, [r3, #0]
	while (!(PLL1STAT & PLL1STAT_PLLC1_STAT));
    1508:	6803      	ldr	r3, [r0, #0]
    150a:	059b      	lsls	r3, r3, #22
    150c:	d5fc      	bpl.n	1508 <clock_start+0x100>
}
    150e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1512:	bf00      	nop
    1514:	400fc000 	.word	0x400fc000
    1518:	400fc10c 	.word	0x400fc10c
    151c:	400fc080 	.word	0x400fc080
    1520:	400fc08c 	.word	0x400fc08c
    1524:	400fc088 	.word	0x400fc088
    1528:	00081570 	.word	0x00081570
    152c:	400fc1a0 	.word	0x400fc1a0
    1530:	400fc1a8 	.word	0x400fc1a8
    1534:	00010018 	.word	0x00010018
    1538:	400fc084 	.word	0x400fc084
    153c:	400fc0a4 	.word	0x400fc0a4
    1540:	400fc0a0 	.word	0x400fc0a0
    1544:	400fc0a8 	.word	0x400fc0a8
    1548:	400fc104 	.word	0x400fc104

0000154c <reset>:

/* reset the LPC17xx, the cc2400 will be handled by the boot code */
void reset()
{
    154c:	b508      	push	{r3, lr}
	all_pins_off();
    154e:	f7ff fe4f 	bl	11f0 <all_pins_off>

	/* Enable the watchdog with reset enabled */
	USRLED_CLR;
    1552:	2202      	movs	r2, #2
    1554:	4b08      	ldr	r3, [pc, #32]	; (1578 <reset+0x2c>)
	wait_us(seconds * 1000000);
    1556:	4809      	ldr	r0, [pc, #36]	; (157c <reset+0x30>)
	USRLED_CLR;
    1558:	601a      	str	r2, [r3, #0]
	WDMOD |= WDMOD_WDEN | WDMOD_WDRESET;
    155a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    155e:	6813      	ldr	r3, [r2, #0]
    1560:	f043 0303 	orr.w	r3, r3, #3
    1564:	6013      	str	r3, [r2, #0]
	WDFEED_SEQUENCE;
    1566:	22aa      	movs	r2, #170	; 0xaa
    1568:	4b05      	ldr	r3, [pc, #20]	; (1580 <reset+0x34>)
    156a:	601a      	str	r2, [r3, #0]
    156c:	2255      	movs	r2, #85	; 0x55
    156e:	601a      	str	r2, [r3, #0]
	
	/* Set watchdog timeout to 256us (minimum) */
	
	/* sleep for 1s (minimum) */
	wait(1);
}
    1570:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	wait_us(seconds * 1000000);
    1574:	f7ff be20 	b.w	11b8 <wait_us>
    1578:	2009c03c 	.word	0x2009c03c
    157c:	000f4240 	.word	0x000f4240
    1580:	40000008 	.word	0x40000008

00001584 <DataIn>:

/**
	Sends next chunk of data (possibly 0 bytes) to host
 */
static void DataIn(void)
{
    1584:	b538      	push	{r3, r4, r5, lr}
	int iChunk;

	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
    1586:	4c08      	ldr	r4, [pc, #32]	; (15a8 <DataIn+0x24>)
	USBHwEPWrite(0x80, pbData, iChunk);
    1588:	2080      	movs	r0, #128	; 0x80
	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
    158a:	6825      	ldr	r5, [r4, #0]
	USBHwEPWrite(0x80, pbData, iChunk);
    158c:	6861      	ldr	r1, [r4, #4]
	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
    158e:	2d40      	cmp	r5, #64	; 0x40
    1590:	bfa8      	it	ge
    1592:	2540      	movge	r5, #64	; 0x40
	USBHwEPWrite(0x80, pbData, iChunk);
    1594:	462a      	mov	r2, r5
    1596:	f000 f951 	bl	183c <USBHwEPWrite>
	pbData += iChunk;
    159a:	6863      	ldr	r3, [r4, #4]
	iResidue -= iChunk;
    159c:	6822      	ldr	r2, [r4, #0]
	pbData += iChunk;
    159e:	442b      	add	r3, r5
	iResidue -= iChunk;
    15a0:	1b52      	subs	r2, r2, r5
	pbData += iChunk;
    15a2:	6063      	str	r3, [r4, #4]
	iResidue -= iChunk;
    15a4:	6022      	str	r2, [r4, #0]
}
    15a6:	bd38      	pop	{r3, r4, r5, pc}
    15a8:	10000554 	.word	0x10000554

000015ac <_HandleRequest.constprop.0>:
static BOOL _HandleRequest(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
    15ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
	iType = REQTYPE_GET_TYPE(pSetup->bmRequestType);
    15ae:	4810      	ldr	r0, [pc, #64]	; (15f0 <_HandleRequest.constprop.0+0x44>)
    15b0:	7a04      	ldrb	r4, [r0, #8]
    15b2:	4605      	mov	r5, r0
    15b4:	f3c4 1441 	ubfx	r4, r4, #5, #2
	if(iType == REQTYPE_TYPE_VENDOR) {
    15b8:	2c02      	cmp	r4, #2
    15ba:	d10c      	bne.n	15d6 <_HandleRequest.constprop.0+0x2a>
		BOOL fFilterStatus = FALSE;
    15bc:	2300      	movs	r3, #0
		if(USBFilterOsVendorMessage(pSetup, &fFilterStatus, piLen, ppbData)) {
    15be:	f100 0210 	add.w	r2, r0, #16
		BOOL fFilterStatus = FALSE;
    15c2:	9301      	str	r3, [sp, #4]
		if(USBFilterOsVendorMessage(pSetup, &fFilterStatus, piLen, ppbData)) {
    15c4:	a901      	add	r1, sp, #4
    15c6:	1d03      	adds	r3, r0, #4
    15c8:	3008      	adds	r0, #8
    15ca:	f000 fa5d 	bl	1a88 <USBFilterOsVendorMessage>
    15ce:	b110      	cbz	r0, 15d6 <_HandleRequest.constprop.0+0x2a>
			return fFilterStatus;
    15d0:	9801      	ldr	r0, [sp, #4]
}
    15d2:	b003      	add	sp, #12
    15d4:	bd30      	pop	{r4, r5, pc}
	pfnHandler = apfnReqHandlers[iType];
    15d6:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    15da:	6963      	ldr	r3, [r4, #20]
	if (pfnHandler == NULL) {
    15dc:	b12b      	cbz	r3, 15ea <_HandleRequest.constprop.0+0x3e>
	return pfnHandler(pSetup, piLen, ppbData);
    15de:	4a05      	ldr	r2, [pc, #20]	; (15f4 <_HandleRequest.constprop.0+0x48>)
    15e0:	f102 010c 	add.w	r1, r2, #12
    15e4:	1d10      	adds	r0, r2, #4
    15e6:	4798      	blx	r3
    15e8:	e7f3      	b.n	15d2 <_HandleRequest.constprop.0+0x26>
		return FALSE;
    15ea:	4618      	mov	r0, r3
    15ec:	e7f1      	b.n	15d2 <_HandleRequest.constprop.0+0x26>
    15ee:	bf00      	nop
    15f0:	10000554 	.word	0x10000554
    15f4:	10000558 	.word	0x10000558

000015f8 <USBHandleControlTransfer>:
 *
 *	@param [in]	bEP		Endpoint address
 *	@param [in]	bEPStat	Endpoint status
 */
void USBHandleControlTransfer(U8 bEP, U8 bEPStat)
{
    15f8:	b510      	push	{r4, lr}
	int iChunk, iType;

	if (bEP == 0x00) {
    15fa:	2800      	cmp	r0, #0
    15fc:	d147      	bne.n	168e <USBHandleControlTransfer+0x96>
		// OUT transfer
		if (bEPStat & EP_STATUS_SETUP) {
    15fe:	f011 0104 	ands.w	r1, r1, #4
    1602:	4c24      	ldr	r4, [pc, #144]	; (1694 <USBHandleControlTransfer+0x9c>)
    1604:	d023      	beq.n	164e <USBHandleControlTransfer+0x56>
			// setup packet, reset request message state machine
			USBHwEPRead(0x00, (U8 *)&Setup, sizeof(Setup));
    1606:	2208      	movs	r2, #8
    1608:	18a1      	adds	r1, r4, r2
    160a:	f000 f93f 	bl	188c <USBHwEPRead>
			DBG("S%x", Setup.bRequest);

			// defaults for data pointer and residue
			iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
    160e:	7a22      	ldrb	r2, [r4, #8]
    1610:	f3c2 1341 	ubfx	r3, r2, #5, #2
			pbData = apbDataStore[iType];
    1614:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    1618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    161a:	6063      	str	r3, [r4, #4]
			iResidue = Setup.wLength;
    161c:	89e3      	ldrh	r3, [r4, #14]
    161e:	6023      	str	r3, [r4, #0]
			iLen = Setup.wLength;
    1620:	6123      	str	r3, [r4, #16]

			if ((Setup.wLength == 0) ||
    1622:	b10b      	cbz	r3, 1628 <USBHandleControlTransfer+0x30>
    1624:	09d3      	lsrs	r3, r2, #7
    1626:	d034      	beq.n	1692 <USBHandleControlTransfer+0x9a>
				(REQTYPE_GET_DIR(Setup.bmRequestType) == REQTYPE_DIR_TO_HOST)) {
				// ask installed handler to process request
				if (!_HandleRequest(&Setup, &iLen, &pbData)) {
    1628:	f7ff ffc0 	bl	15ac <_HandleRequest.constprop.0>
    162c:	b928      	cbnz	r0, 163a <USBHandleControlTransfer+0x42>
		DataIn();
	}
	else {
		ASSERT(FALSE);
	}
}
    162e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	USBHwEPStall(0x80, TRUE);
    1632:	2101      	movs	r1, #1
    1634:	2080      	movs	r0, #128	; 0x80
    1636:	f000 b8f5 	b.w	1824 <USBHwEPStall>
				iResidue = MIN(iLen, Setup.wLength);
    163a:	89e2      	ldrh	r2, [r4, #14]
    163c:	6923      	ldr	r3, [r4, #16]
    163e:	429a      	cmp	r2, r3
    1640:	bfd4      	ite	le
    1642:	6022      	strle	r2, [r4, #0]
    1644:	6023      	strgt	r3, [r4, #0]
}
    1646:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					DataIn();
    164a:	f7ff bf9b 	b.w	1584 <DataIn>
			if (iResidue > 0) {
    164e:	6822      	ldr	r2, [r4, #0]
    1650:	2a00      	cmp	r2, #0
    1652:	dd17      	ble.n	1684 <USBHandleControlTransfer+0x8c>
				iChunk = USBHwEPRead(0x00, pbData, iResidue);
    1654:	6861      	ldr	r1, [r4, #4]
    1656:	f000 f919 	bl	188c <USBHwEPRead>
				if (iChunk < 0) {
    165a:	2800      	cmp	r0, #0
    165c:	dbe7      	blt.n	162e <USBHandleControlTransfer+0x36>
				pbData += iChunk;
    165e:	6863      	ldr	r3, [r4, #4]
    1660:	4403      	add	r3, r0
    1662:	6063      	str	r3, [r4, #4]
				iResidue -= iChunk;
    1664:	6823      	ldr	r3, [r4, #0]
    1666:	1a18      	subs	r0, r3, r0
    1668:	6020      	str	r0, [r4, #0]
				if (iResidue == 0) {
    166a:	b990      	cbnz	r0, 1692 <USBHandleControlTransfer+0x9a>
					iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
    166c:	7a23      	ldrb	r3, [r4, #8]
    166e:	f3c3 1341 	ubfx	r3, r3, #5, #2
					pbData = apbDataStore[iType];
    1672:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    1676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1678:	6063      	str	r3, [r4, #4]
					if (!_HandleRequest(&Setup, &iLen, &pbData)) {
    167a:	f7ff ff97 	bl	15ac <_HandleRequest.constprop.0>
    167e:	2800      	cmp	r0, #0
    1680:	d1e1      	bne.n	1646 <USBHandleControlTransfer+0x4e>
    1682:	e7d4      	b.n	162e <USBHandleControlTransfer+0x36>
				iChunk = USBHwEPRead(0x00, NULL, 0);
    1684:	460a      	mov	r2, r1
}
    1686:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				iChunk = USBHwEPRead(0x00, NULL, 0);
    168a:	f000 b8ff 	b.w	188c <USBHwEPRead>
	else if (bEP == 0x80) {
    168e:	2880      	cmp	r0, #128	; 0x80
    1690:	d0d9      	beq.n	1646 <USBHandleControlTransfer+0x4e>
}
    1692:	bd10      	pop	{r4, pc}
    1694:	10000554 	.word	0x10000554

00001698 <USBRegisterRequestHandler>:
 */
void USBRegisterRequestHandler(int iType, TFnHandleRequest *pfnHandler, U8 *pbDataStore)
{
	ASSERT(iType >= 0);
	ASSERT(iType < 4);
	apfnReqHandlers[iType] = pfnHandler;
    1698:	4b02      	ldr	r3, [pc, #8]	; (16a4 <USBRegisterRequestHandler+0xc>)
    169a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    169e:	6141      	str	r1, [r0, #20]
	apbDataStore[iType] = pbDataStore;
    16a0:	6242      	str	r2, [r0, #36]	; 0x24
}
    16a2:	4770      	bx	lr
    16a4:	10000554 	.word	0x10000554

000016a8 <HandleUsbReset>:
static void HandleUsbReset(U8 bDevStatus)
{
	if (bDevStatus & DEV_STATUS_RESET) {
		DBG("\n!");
	}
}
    16a8:	4770      	bx	lr
    16aa:	0000      	movs	r0, r0

000016ac <USBInit>:
	installing default callbacks.
	
	@return TRUE if initialisation was successful
 */
BOOL USBInit(void)
{
    16ac:	b510      	push	{r4, lr}
	
	// register bus reset handler
	USBHwRegisterDevIntHandler(HandleUsbReset);
	
	// register control transfer handler on EP0
	USBHwRegisterEPIntHandler(0x00, USBHandleControlTransfer);
    16ae:	4c0e      	ldr	r4, [pc, #56]	; (16e8 <USBInit+0x3c>)
	USBHwInit();
    16b0:	f000 f990 	bl	19d4 <USBHwInit>
	USBHwRegisterDevIntHandler(HandleUsbReset);
    16b4:	480d      	ldr	r0, [pc, #52]	; (16ec <USBInit+0x40>)
    16b6:	f000 f87f 	bl	17b8 <USBHwRegisterDevIntHandler>
	USBHwRegisterEPIntHandler(0x00, USBHandleControlTransfer);
    16ba:	4621      	mov	r1, r4
    16bc:	2000      	movs	r0, #0
    16be:	f000 f861 	bl	1784 <USBHwRegisterEPIntHandler>
	USBHwRegisterEPIntHandler(0x80, USBHandleControlTransfer);
    16c2:	4621      	mov	r1, r4
    16c4:	2080      	movs	r0, #128	; 0x80
    16c6:	f000 f85d 	bl	1784 <USBHwRegisterEPIntHandler>
	
	// setup control endpoints
	USBHwEPConfig(0x00, MAX_PACKET_SIZE0);
    16ca:	2140      	movs	r1, #64	; 0x40
    16cc:	2000      	movs	r0, #0
    16ce:	f000 f83b 	bl	1748 <USBHwEPConfig>
	USBHwEPConfig(0x80, MAX_PACKET_SIZE0);
    16d2:	2140      	movs	r1, #64	; 0x40
    16d4:	2080      	movs	r0, #128	; 0x80
    16d6:	f000 f837 	bl	1748 <USBHwEPConfig>
	
	// register standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_STANDARD, USBHandleStandardRequest, abStdReqData);
    16da:	2000      	movs	r0, #0
    16dc:	4a04      	ldr	r2, [pc, #16]	; (16f0 <USBInit+0x44>)
    16de:	4905      	ldr	r1, [pc, #20]	; (16f4 <USBInit+0x48>)
    16e0:	f7ff ffda 	bl	1698 <USBRegisterRequestHandler>

	return TRUE;
}
    16e4:	2001      	movs	r0, #1
    16e6:	bd10      	pop	{r4, pc}
    16e8:	000015f9 	.word	0x000015f9
    16ec:	000016a9 	.word	0x000016a9
    16f0:	10000588 	.word	0x10000588
    16f4:	00001b51 	.word	0x00001b51

000016f8 <Wait4DevInt>:
    @param [in] dwIntr      Bitmask of interrupts to wait for   
 */
static void Wait4DevInt(U32 dwIntr)
{
    // wait for specific interrupt
    while ((USBDevIntSt & dwIntr) != dwIntr);
    16f8:	4a03      	ldr	r2, [pc, #12]	; (1708 <Wait4DevInt+0x10>)
    16fa:	6813      	ldr	r3, [r2, #0]
    16fc:	ea30 0303 	bics.w	r3, r0, r3
    1700:	d1fb      	bne.n	16fa <Wait4DevInt+0x2>
    // clear the interrupt bits
    USBDevIntClr = dwIntr;
    1702:	4b02      	ldr	r3, [pc, #8]	; (170c <Wait4DevInt+0x14>)
    1704:	6018      	str	r0, [r3, #0]
}
    1706:	4770      	bx	lr
    1708:	5000c200 	.word	0x5000c200
    170c:	5000c208 	.word	0x5000c208

00001710 <USBHwCmd>:
    @param [in] bCmd        Command to send
 */
static void USBHwCmd(U8 bCmd)
{
    // clear CDFULL/CCEMTY
    USBDevIntClr = CDFULL | CCEMTY;
    1710:	2230      	movs	r2, #48	; 0x30
    1712:	4b04      	ldr	r3, [pc, #16]	; (1724 <USBHwCmd+0x14>)
    // write command code
    USBCmdCode = 0x00000500 | (bCmd << 16);
    1714:	0400      	lsls	r0, r0, #16
    1716:	f440 60a0 	orr.w	r0, r0, #1280	; 0x500
    USBDevIntClr = CDFULL | CCEMTY;
    171a:	601a      	str	r2, [r3, #0]
    USBCmdCode = 0x00000500 | (bCmd << 16);
    171c:	6098      	str	r0, [r3, #8]
    Wait4DevInt(CCEMTY);
    171e:	2010      	movs	r0, #16
    1720:	f7ff bfea 	b.w	16f8 <Wait4DevInt>
    1724:	5000c208 	.word	0x5000c208

00001728 <USBHwCmdWrite>:
        
    @param [in] bCmd        Command to send
    @param [in] bData       Data to send
 */
static void USBHwCmdWrite(U8 bCmd, U16 bData)
{
    1728:	b508      	push	{r3, lr}
    // write command code
    USBHwCmd(bCmd);
    172a:	f7ff fff1 	bl	1710 <USBHwCmd>

    // write command data
    USBCmdCode = 0x00000100 | (bData << 16);
    172e:	4b05      	ldr	r3, [pc, #20]	; (1744 <USBHwCmdWrite+0x1c>)
    1730:	0409      	lsls	r1, r1, #16
    1732:	f441 7180 	orr.w	r1, r1, #256	; 0x100
    1736:	6019      	str	r1, [r3, #0]
    Wait4DevInt(CCEMTY);
    1738:	2010      	movs	r0, #16
}
    173a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Wait4DevInt(CCEMTY);
    173e:	f7ff bfdb 	b.w	16f8 <Wait4DevInt>
    1742:	bf00      	nop
    1744:	5000c210 	.word	0x5000c210

00001748 <USBHwEPConfig>:
        
    @param [in] bEP             Endpoint number
    @param [in] wMaxPacketSize  Maximum packet size for this EP
 */
void USBHwEPConfig(U8 bEP, U16 wMaxPacketSize)
{
    1748:	b510      	push	{r4, lr}
    USBReEp |= (1 << idx);
    174a:	2301      	movs	r3, #1
    174c:	4a0b      	ldr	r2, [pc, #44]	; (177c <USBHwEPConfig+0x34>)
    int idx;
    
    idx = EP2IDX(bEP);
    174e:	0044      	lsls	r4, r0, #1
    1750:	f004 041e 	and.w	r4, r4, #30
    1754:	ea44 14d0 	orr.w	r4, r4, r0, lsr #7
    USBReEp |= (1 << idx);
    1758:	6810      	ldr	r0, [r2, #0]
    175a:	40a3      	lsls	r3, r4
    175c:	4303      	orrs	r3, r0
    175e:	6013      	str	r3, [r2, #0]
    USBEpIn = idx;
    1760:	4b07      	ldr	r3, [pc, #28]	; (1780 <USBHwEPConfig+0x38>)
    Wait4DevInt(EP_RLZED);
    1762:	f44f 7080 	mov.w	r0, #256	; 0x100
    USBEpIn = idx;
    1766:	601c      	str	r4, [r3, #0]
    USBMaxPSize = wMaxPSize;
    1768:	6059      	str	r1, [r3, #4]
    Wait4DevInt(EP_RLZED);
    176a:	f7ff ffc5 	bl	16f8 <Wait4DevInt>
    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fEnable ? 0 : EP_DA);
    176e:	f044 0040 	orr.w	r0, r4, #64	; 0x40
    1772:	2100      	movs	r1, #0
    // realise EP
    USBHwEPRealize(idx, wMaxPacketSize);

    // enable EP
    USBHwEPEnable(idx, TRUE);
}
    1774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fEnable ? 0 : EP_DA);
    1778:	f7ff bfd6 	b.w	1728 <USBHwCmdWrite>
    177c:	5000c244 	.word	0x5000c244
    1780:	5000c248 	.word	0x5000c248

00001784 <USBHwRegisterEPIntHandler>:
    idx = EP2IDX(bEP);

    ASSERT(idx<32);

    /* add handler to list of EP handlers */
    _apfnEPIntHandlers[idx / 2] = pfnHandler;
    1784:	4a0a      	ldr	r2, [pc, #40]	; (17b0 <USBHwRegisterEPIntHandler+0x2c>)
    idx = EP2IDX(bEP);
    1786:	0043      	lsls	r3, r0, #1
    1788:	f003 031e 	and.w	r3, r3, #30
    _apfnEPIntHandlers[idx / 2] = pfnHandler;
    178c:	f842 1013 	str.w	r1, [r2, r3, lsl #1]
    idx = EP2IDX(bEP);
    1790:	ea43 10d0 	orr.w	r0, r3, r0, lsr #7
    
    /* enable EP interrupt */
    USBEpIntEn |= (1 << idx);
    1794:	2301      	movs	r3, #1
    1796:	4a07      	ldr	r2, [pc, #28]	; (17b4 <USBHwRegisterEPIntHandler+0x30>)
    1798:	fa03 f000 	lsl.w	r0, r3, r0
    179c:	6811      	ldr	r1, [r2, #0]
    179e:	4308      	orrs	r0, r1
    17a0:	6010      	str	r0, [r2, #0]
    USBDevIntEn |= EP_SLOW;
    17a2:	f852 3c30 	ldr.w	r3, [r2, #-48]
    17a6:	f043 0304 	orr.w	r3, r3, #4
    17aa:	f842 3c30 	str.w	r3, [r2, #-48]
    
    DBG("Registered handler for EP 0x%x\n", bEP);
}
    17ae:	4770      	bx	lr
    17b0:	10000590 	.word	0x10000590
    17b4:	5000c234 	.word	0x5000c234

000017b8 <USBHwRegisterDevIntHandler>:
        
    @param [in] pfnHandler  Callback function
 */
void USBHwRegisterDevIntHandler(TFnDevIntHandler *pfnHandler)
{
    _pfnDevIntHandler = pfnHandler;
    17b8:	4b03      	ldr	r3, [pc, #12]	; (17c8 <USBHwRegisterDevIntHandler+0x10>)
    
    // enable device interrupt
    USBDevIntEn |= DEV_STAT;
    17ba:	4a04      	ldr	r2, [pc, #16]	; (17cc <USBHwRegisterDevIntHandler+0x14>)
    _pfnDevIntHandler = pfnHandler;
    17bc:	6418      	str	r0, [r3, #64]	; 0x40
    USBDevIntEn |= DEV_STAT;
    17be:	6813      	ldr	r3, [r2, #0]
    17c0:	f043 0308 	orr.w	r3, r3, #8
    17c4:	6013      	str	r3, [r2, #0]

    DBG("Registered handler for device status\n");
}
    17c6:	4770      	bx	lr
    17c8:	10000590 	.word	0x10000590
    17cc:	5000c204 	.word	0x5000c204

000017d0 <USBHwSetAddress>:
        
    @param [in] bAddr       Device address to set
 */
void USBHwSetAddress(U8 bAddr)
{
    USBHwCmdWrite(CMD_DEV_SET_ADDRESS, DEV_EN | bAddr);
    17d0:	f040 0180 	orr.w	r1, r0, #128	; 0x80
    17d4:	20d0      	movs	r0, #208	; 0xd0
    17d6:	f7ff bfa7 	b.w	1728 <USBHwCmdWrite>

000017da <USBHwConnect>:
    FIO0CLR = (1<<14);
  else
    FIO0SET = (1<<14);
#endif
#endif
    USBHwCmdWrite(CMD_DEV_STATUS, fConnect ? CON : 0);
    17da:	1e01      	subs	r1, r0, #0
    17dc:	bf18      	it	ne
    17de:	2101      	movne	r1, #1
    17e0:	20fe      	movs	r0, #254	; 0xfe
    17e2:	f7ff bfa1 	b.w	1728 <USBHwCmdWrite>

000017e6 <USBHwNakIntEnable>:
    from NAK interrupt by checking the bits in their bEPStatus argument.
    
    @param [in] bIntBits    Bitmap indicating which NAK interrupts to enable
 */
void USBHwNakIntEnable(U8 bIntBits)
{
    17e6:	4601      	mov	r1, r0
    USBHwCmdWrite(CMD_DEV_SET_MODE, bIntBits);
    17e8:	20f3      	movs	r0, #243	; 0xf3
    17ea:	f7ff bf9d 	b.w	1728 <USBHwCmdWrite>
    17ee:	0000      	movs	r0, r0

000017f0 <USBHwEPGetStatus>:
        
    @param [in] bEP     Endpoint number
    @return Endpoint status byte (containing EP_STATUS_xxx bits)
 */
U8  USBHwEPGetStatus(U8 bEP)
{
    17f0:	b508      	push	{r3, lr}
    int idx = EP2IDX(bEP);
    17f2:	0043      	lsls	r3, r0, #1
    17f4:	f003 031e 	and.w	r3, r3, #30
    17f8:	ea43 11d0 	orr.w	r1, r3, r0, lsr #7
    USBHwCmd(bCmd);
    17fc:	4608      	mov	r0, r1
    17fe:	f7ff ff87 	bl	1710 <USBHwCmd>
    USBCmdCode = 0x00000200 | (bCmd << 16);
    1802:	4b06      	ldr	r3, [pc, #24]	; (181c <USBHwEPGetStatus+0x2c>)
    1804:	0409      	lsls	r1, r1, #16
    1806:	f441 7100 	orr.w	r1, r1, #512	; 0x200
    180a:	6019      	str	r1, [r3, #0]
    Wait4DevInt(CDFULL);
    180c:	2020      	movs	r0, #32
    180e:	f7ff ff73 	bl	16f8 <Wait4DevInt>
    return USBCmdData;
    1812:	4b03      	ldr	r3, [pc, #12]	; (1820 <USBHwEPGetStatus+0x30>)
    1814:	6818      	ldr	r0, [r3, #0]

    return USBHwCmdRead(CMD_EP_SELECT | idx);
}
    1816:	b2c0      	uxtb	r0, r0
    1818:	bd08      	pop	{r3, pc}
    181a:	bf00      	nop
    181c:	5000c210 	.word	0x5000c210
    1820:	5000c214 	.word	0x5000c214

00001824 <USBHwEPStall>:
    @param [in] bEP     Endpoint number
    @param [in] fStall  TRUE to stall, FALSE to unstall
 */
void USBHwEPStall(U8 bEP, BOOL fStall)
{
    int idx = EP2IDX(bEP);
    1824:	0043      	lsls	r3, r0, #1
    1826:	f003 031e 	and.w	r3, r3, #30
    182a:	ea43 10d0 	orr.w	r0, r3, r0, lsr #7

    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fStall ? EP_ST : 0);
    182e:	3900      	subs	r1, #0
    1830:	bf18      	it	ne
    1832:	2101      	movne	r1, #1
    1834:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    1838:	f7ff bf76 	b.w	1728 <USBHwCmdWrite>

0000183c <USBHwEPWrite>:
    @param [in] iLen    Number of bytes to write
            
    @return number of bytes written into the endpoint buffer
*/
int USBHwEPWrite(U8 bEP, U8 *pbBuf, U32 iLen)
{
    183c:	b538      	push	{r3, r4, r5, lr}
    183e:	4603      	mov	r3, r0
    1840:	4615      	mov	r5, r2
    U32 idx;
    
    idx = EP2IDX(bEP);
    1842:	0040      	lsls	r0, r0, #1
    1844:	f000 001e 	and.w	r0, r0, #30
    1848:	ea40 10d3 	orr.w	r0, r0, r3, lsr #7
    
    // set write enable for specific endpoint
    USBCtrl = WR_EN | ((bEP & 0xF) << 2);
    184c:	009b      	lsls	r3, r3, #2
    184e:	4c0d      	ldr	r4, [pc, #52]	; (1884 <USBHwEPWrite+0x48>)
    1850:	f003 033c 	and.w	r3, r3, #60	; 0x3c
    1854:	f043 0302 	orr.w	r3, r3, #2
    1858:	6023      	str	r3, [r4, #0]
    
    // set packet length
    USBTxPLen = iLen;
    185a:	4b0b      	ldr	r3, [pc, #44]	; (1888 <USBHwEPWrite+0x4c>)
    185c:	601a      	str	r2, [r3, #0]
    
    // write data
    while (USBCtrl & WR_EN) {
    185e:	4623      	mov	r3, r4
        USBTxData = (pbBuf[3] << 24) | (pbBuf[2] << 16) | (pbBuf[1] << 8) | pbBuf[0];
    1860:	3c0c      	subs	r4, #12
    while (USBCtrl & WR_EN) {
    1862:	681a      	ldr	r2, [r3, #0]
    1864:	f012 0202 	ands.w	r2, r2, #2
    1868:	d107      	bne.n	187a <USBHwEPWrite+0x3e>
        pbBuf += 4;
    }

    USBCtrl = 0;
    186a:	601a      	str	r2, [r3, #0]

    // select endpoint and validate buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    186c:	f7ff ff50 	bl	1710 <USBHwCmd>
    USBHwCmd(CMD_EP_VALIDATE_BUFFER);
    1870:	20fa      	movs	r0, #250	; 0xfa
    1872:	f7ff ff4d 	bl	1710 <USBHwCmd>
    
    return iLen;
}
    1876:	4628      	mov	r0, r5
    1878:	bd38      	pop	{r3, r4, r5, pc}
        USBTxData = (pbBuf[3] << 24) | (pbBuf[2] << 16) | (pbBuf[1] << 8) | pbBuf[0];
    187a:	f851 2b04 	ldr.w	r2, [r1], #4
    187e:	6022      	str	r2, [r4, #0]
        pbBuf += 4;
    1880:	e7ef      	b.n	1862 <USBHwEPWrite+0x26>
    1882:	bf00      	nop
    1884:	5000c228 	.word	0x5000c228
    1888:	5000c224 	.word	0x5000c224

0000188c <USBHwEPRead>:
            
    @return the number of bytes available in the EP (possibly more than iMaxLen),
    or <0 in case of error.
 */
int USBHwEPRead(U8 bEP, U8 *pbBuf, U32 iMaxLen)
{
    188c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    188e:	4603      	mov	r3, r0
    U32 i, idx;
    U32 dwData, dwLen;
    
    idx = EP2IDX(bEP);
    1890:	0040      	lsls	r0, r0, #1
    1892:	f000 001e 	and.w	r0, r0, #30
    1896:	ea40 10d3 	orr.w	r0, r0, r3, lsr #7
    
    // set read enable bit for specific endpoint
    USBCtrl = RD_EN | ((bEP & 0xF) << 2);
    189a:	009b      	lsls	r3, r3, #2
    189c:	4e14      	ldr	r6, [pc, #80]	; (18f0 <USBHwEPRead+0x64>)
    189e:	f003 033c 	and.w	r3, r3, #60	; 0x3c
    18a2:	f043 0301 	orr.w	r3, r3, #1
    
    // wait for PKT_RDY
    do {
        dwLen = USBRxPLen;
    18a6:	4c13      	ldr	r4, [pc, #76]	; (18f4 <USBHwEPRead+0x68>)
    USBCtrl = RD_EN | ((bEP & 0xF) << 2);
    18a8:	6033      	str	r3, [r6, #0]
        dwLen = USBRxPLen;
    18aa:	6823      	ldr	r3, [r4, #0]
    } while ((dwLen & PKT_RDY) == 0);
    18ac:	051d      	lsls	r5, r3, #20
    18ae:	d5fc      	bpl.n	18aa <USBHwEPRead+0x1e>
    
    // packet valid?
    if ((dwLen & DV) == 0) {
    18b0:	055c      	lsls	r4, r3, #21
    18b2:	d51a      	bpl.n	18ea <USBHwEPRead+0x5e>
    
    // get length
    dwLen &= PKT_LNGTH_MASK;
    
    // get data
    dwData = 0;
    18b4:	2500      	movs	r5, #0
    for (i = 0; i < dwLen; i++) {
    18b6:	462c      	mov	r4, r5
        if ((i % 4) == 0) {
            dwData = USBRxData;
    18b8:	4f0f      	ldr	r7, [pc, #60]	; (18f8 <USBHwEPRead+0x6c>)
    dwLen &= PKT_LNGTH_MASK;
    18ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
    for (i = 0; i < dwLen; i++) {
    18be:	429c      	cmp	r4, r3
    18c0:	d108      	bne.n	18d4 <USBHwEPRead+0x48>
        }
        dwData >>= 8;
    }

    // make sure RD_EN is clear
    USBCtrl = 0;
    18c2:	2300      	movs	r3, #0
    18c4:	6033      	str	r3, [r6, #0]

    // select endpoint and clear buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    18c6:	f7ff ff23 	bl	1710 <USBHwCmd>
    USBHwCmd(CMD_EP_CLEAR_BUFFER);
    18ca:	20f2      	movs	r0, #242	; 0xf2
    18cc:	f7ff ff20 	bl	1710 <USBHwCmd>
    
    return dwLen;
    18d0:	4620      	mov	r0, r4
}
    18d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((i % 4) == 0) {
    18d4:	f014 0f03 	tst.w	r4, #3
            dwData = USBRxData;
    18d8:	bf08      	it	eq
    18da:	683d      	ldreq	r5, [r7, #0]
        if ((pbBuf != NULL) && (i < iMaxLen)) {
    18dc:	b111      	cbz	r1, 18e4 <USBHwEPRead+0x58>
    18de:	4294      	cmp	r4, r2
            pbBuf[i] = dwData & 0xFF;
    18e0:	bf38      	it	cc
    18e2:	550d      	strbcc	r5, [r1, r4]
        dwData >>= 8;
    18e4:	0a2d      	lsrs	r5, r5, #8
    for (i = 0; i < dwLen; i++) {
    18e6:	3401      	adds	r4, #1
    18e8:	e7e9      	b.n	18be <USBHwEPRead+0x32>
        return -1;
    18ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    18ee:	e7f0      	b.n	18d2 <USBHwEPRead+0x46>
    18f0:	5000c228 	.word	0x5000c228
    18f4:	5000c220 	.word	0x5000c220
    18f8:	5000c218 	.word	0x5000c218

000018fc <USBHwConfigDevice>:
    @param [in] fConfigured If TRUE, configure device, else unconfigure
 */
void USBHwConfigDevice(BOOL fConfigured)
{
    // set configured bit
    USBHwCmdWrite(CMD_DEV_CONFIG, fConfigured ? CONF_DEVICE : 0);
    18fc:	1e01      	subs	r1, r0, #0
    18fe:	bf18      	it	ne
    1900:	2101      	movne	r1, #1
    1902:	20d8      	movs	r0, #216	; 0xd8
    1904:	f7ff bf10 	b.w	1728 <USBHwCmdWrite>

00001908 <USBHwISR>:
    @todo Get all 11 bits of frame number instead of just 8

    Endpoint interrupts are mapped to the slow interrupt
 */
void USBHwISR(void)
{
    1908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

// LED9 monitors total time in interrupt routine
DEBUG_LED_ON(9);

    // handle device interrupts
    dwStatus = USBDevIntSt;
    190a:	4b29      	ldr	r3, [pc, #164]	; (19b0 <USBHwISR+0xa8>)
    190c:	681c      	ldr	r4, [r3, #0]
    
    // frame interrupt
    if (dwStatus & FRAME) {
    190e:	07e1      	lsls	r1, r4, #31
    1910:	d511      	bpl.n	1936 <USBHwISR+0x2e>
        // clear int
        USBDevIntClr = FRAME;
    1912:	2201      	movs	r2, #1
    1914:	609a      	str	r2, [r3, #8]
        // call handler
        if (_pfnFrameHandler != NULL) {
    1916:	4b27      	ldr	r3, [pc, #156]	; (19b4 <USBHwISR+0xac>)
    1918:	6c59      	ldr	r1, [r3, #68]	; 0x44
    191a:	b161      	cbz	r1, 1936 <USBHwISR+0x2e>
    USBHwCmd(bCmd);
    191c:	20f5      	movs	r0, #245	; 0xf5
    191e:	f7ff fef7 	bl	1710 <USBHwCmd>
    USBCmdCode = 0x00000200 | (bCmd << 16);
    1922:	4b25      	ldr	r3, [pc, #148]	; (19b8 <USBHwISR+0xb0>)
    1924:	4a25      	ldr	r2, [pc, #148]	; (19bc <USBHwISR+0xb4>)
    Wait4DevInt(CDFULL);
    1926:	2020      	movs	r0, #32
    USBCmdCode = 0x00000200 | (bCmd << 16);
    1928:	601a      	str	r2, [r3, #0]
    Wait4DevInt(CDFULL);
    192a:	f7ff fee5 	bl	16f8 <Wait4DevInt>
    return USBCmdData;
    192e:	4b24      	ldr	r3, [pc, #144]	; (19c0 <USBHwISR+0xb8>)
    1930:	6818      	ldr	r0, [r3, #0]
            wFrame = USBHwCmdRead(CMD_DEV_READ_CUR_FRAME_NR);
            _pfnFrameHandler(wFrame);
    1932:	b2c0      	uxtb	r0, r0
    1934:	4788      	blx	r1
        }
    }
    
    // device status interrupt
    if (dwStatus & DEV_STAT) {
    1936:	0722      	lsls	r2, r4, #28
    1938:	d517      	bpl.n	196a <USBHwISR+0x62>
        /*  Clear DEV_STAT interrupt before reading DEV_STAT register.
            This prevents corrupted device status reads, see
            LPC2148 User manual revision 2, 25 july 2006.
        */
        USBDevIntClr = DEV_STAT;
    193a:	2208      	movs	r2, #8
    193c:	4b21      	ldr	r3, [pc, #132]	; (19c4 <USBHwISR+0xbc>)
    USBHwCmd(bCmd);
    193e:	20fe      	movs	r0, #254	; 0xfe
        USBDevIntClr = DEV_STAT;
    1940:	601a      	str	r2, [r3, #0]
    USBHwCmd(bCmd);
    1942:	f7ff fee5 	bl	1710 <USBHwCmd>
    USBCmdCode = 0x00000200 | (bCmd << 16);
    1946:	4b1c      	ldr	r3, [pc, #112]	; (19b8 <USBHwISR+0xb0>)
    1948:	4a1f      	ldr	r2, [pc, #124]	; (19c8 <USBHwISR+0xc0>)
    Wait4DevInt(CDFULL);
    194a:	2020      	movs	r0, #32
    USBCmdCode = 0x00000200 | (bCmd << 16);
    194c:	601a      	str	r2, [r3, #0]
    Wait4DevInt(CDFULL);
    194e:	f7ff fed3 	bl	16f8 <Wait4DevInt>
    return USBCmdData;
    1952:	4b1b      	ldr	r3, [pc, #108]	; (19c0 <USBHwISR+0xb8>)
    1954:	681b      	ldr	r3, [r3, #0]
        bDevStat = USBHwCmdRead(CMD_DEV_STATUS);
        if (bDevStat & (CON_CH | SUS_CH | RST)) {
    1956:	f013 0f1a 	tst.w	r3, #26
    return USBCmdData;
    195a:	b2d8      	uxtb	r0, r3
        if (bDevStat & (CON_CH | SUS_CH | RST)) {
    195c:	d005      	beq.n	196a <USBHwISR+0x62>
            // convert device status into something HW independent
            bStat = ((bDevStat & CON) ? DEV_STATUS_CONNECT : 0) |
                    ((bDevStat & SUS) ? DEV_STATUS_SUSPEND : 0) |
                    ((bDevStat & RST) ? DEV_STATUS_RESET : 0);
            // call handler
            if (_pfnDevIntHandler != NULL) {
    195e:	4b15      	ldr	r3, [pc, #84]	; (19b4 <USBHwISR+0xac>)
    1960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1962:	b113      	cbz	r3, 196a <USBHwISR+0x62>
DEBUG_LED_ON(8);        
                _pfnDevIntHandler(bStat);
    1964:	f000 0015 	and.w	r0, r0, #21
    1968:	4798      	blx	r3
            }
        }
    }
    
    // endpoint interrupt
    if (dwStatus & EP_SLOW) {
    196a:	0763      	lsls	r3, r4, #29
    196c:	d51e      	bpl.n	19ac <USBHwISR+0xa4>
        // clear EP_SLOW
        USBDevIntClr = EP_SLOW;
    196e:	2204      	movs	r2, #4
        // check all endpoints
        for (i = 0; i < 32; i++) {
    1970:	2400      	movs	r4, #0
        USBDevIntClr = EP_SLOW;
    1972:	4b14      	ldr	r3, [pc, #80]	; (19c4 <USBHwISR+0xbc>)
            dwIntBit = (1 << i);
            if (USBEpIntSt & dwIntBit) {
    1974:	4d15      	ldr	r5, [pc, #84]	; (19cc <USBHwISR+0xc4>)
                // clear int (and retrieve status)
                USBEpIntClr = dwIntBit;
    1976:	4e16      	ldr	r6, [pc, #88]	; (19d0 <USBHwISR+0xc8>)
                Wait4DevInt(CDFULL);
                bEPStat = USBCmdData;
    1978:	4f11      	ldr	r7, [pc, #68]	; (19c0 <USBHwISR+0xb8>)
        USBDevIntClr = EP_SLOW;
    197a:	601a      	str	r2, [r3, #0]
            dwIntBit = (1 << i);
    197c:	2301      	movs	r3, #1
            if (USBEpIntSt & dwIntBit) {
    197e:	682a      	ldr	r2, [r5, #0]
            dwIntBit = (1 << i);
    1980:	40a3      	lsls	r3, r4
            if (USBEpIntSt & dwIntBit) {
    1982:	421a      	tst	r2, r3
    1984:	d00f      	beq.n	19a6 <USBHwISR+0x9e>
                Wait4DevInt(CDFULL);
    1986:	2020      	movs	r0, #32
                USBEpIntClr = dwIntBit;
    1988:	6033      	str	r3, [r6, #0]
                Wait4DevInt(CDFULL);
    198a:	f7ff feb5 	bl	16f8 <Wait4DevInt>
                        ((bEPStat & EPSTAT_ST) ? EP_STATUS_STALLED : 0) |
                        ((bEPStat & EPSTAT_STP) ? EP_STATUS_SETUP : 0) |
                        ((bEPStat & EPSTAT_EPN) ? EP_STATUS_NACKED : 0) |
                        ((bEPStat & EPSTAT_PO) ? EP_STATUS_ERROR : 0);
                // call handler
                if (_apfnEPIntHandlers[i / 2] != NULL) {
    198e:	4b09      	ldr	r3, [pc, #36]	; (19b4 <USBHwISR+0xac>)
    1990:	1060      	asrs	r0, r4, #1
    1992:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
                bEPStat = USBCmdData;
    1996:	6839      	ldr	r1, [r7, #0]
                if (_apfnEPIntHandlers[i / 2] != NULL) {
    1998:	b12b      	cbz	r3, 19a6 <USBHwISR+0x9e>
DEBUG_LED_ON(10);       
                    _apfnEPIntHandlers[i / 2](IDX2EP(i), bStat);
    199a:	ea40 10c4 	orr.w	r0, r0, r4, lsl #7
    199e:	f001 011f 	and.w	r1, r1, #31
    19a2:	b2c0      	uxtb	r0, r0
    19a4:	4798      	blx	r3
        for (i = 0; i < 32; i++) {
    19a6:	3401      	adds	r4, #1
    19a8:	2c20      	cmp	r4, #32
    19aa:	d1e7      	bne.n	197c <USBHwISR+0x74>
            }
        }
    }
    
DEBUG_LED_OFF(9);       
}
    19ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    19ae:	bf00      	nop
    19b0:	5000c200 	.word	0x5000c200
    19b4:	10000590 	.word	0x10000590
    19b8:	5000c210 	.word	0x5000c210
    19bc:	00f50200 	.word	0x00f50200
    19c0:	5000c214 	.word	0x5000c214
    19c4:	5000c208 	.word	0x5000c208
    19c8:	00fe0200 	.word	0x00fe0200
    19cc:	5000c230 	.word	0x5000c230
    19d0:	5000c238 	.word	0x5000c238

000019d4 <USBHwInit>:
    acts as a pull-up and so prevents detection of USB disconnect.
        
    @return TRUE if the hardware was successfully initialised
 */
BOOL USBHwInit(void)
{
    19d4:	b508      	push	{r3, lr}
#ifdef LPC17xx
	// P2.9 is USB_CONNECT
    PINSEL4 = (PINSEL4 & ~(3 << 18)) | (1 << 18);
    19d6:	4a26      	ldr	r2, [pc, #152]	; (1a70 <USBHwInit+0x9c>)
    19d8:	6813      	ldr	r3, [r2, #0]
    19da:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
    19de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    19e2:	6013      	str	r3, [r2, #0]

	// P1.18 is USB_UP_LED
    PINSEL3 = (PINSEL3 & ~(3 << 4)) | (1 << 4);
    19e4:	f852 3c04 	ldr.w	r3, [r2, #-4]
    19e8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    19ec:	f043 0310 	orr.w	r3, r3, #16
    19f0:	f842 3c04 	str.w	r3, [r2, #-4]

	// P1.30 is VBUS
    PINSEL3 = (PINSEL3 & ~(3 << 28)) | (2 << 28);
    19f4:	f852 3c04 	ldr.w	r3, [r2, #-4]
    19f8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
    19fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    1a00:	f842 3c04 	str.w	r3, [r2, #-4]

	// P0.29 is USB_D+
    PINSEL1 = (PINSEL1 & ~(3 << 26)) | (1 << 26);
    1a04:	f852 3c0c 	ldr.w	r3, [r2, #-12]
    1a08:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
    1a0c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    1a10:	f842 3c0c 	str.w	r3, [r2, #-12]

	// P0.30 is USB_D-
    PINSEL1 = (PINSEL1 & ~(3 << 28)) | (1 << 28);
    1a14:	f852 3c0c 	ldr.w	r3, [r2, #-12]
    1a18:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
    1a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1a20:	f842 3c0c 	str.w	r3, [r2, #-12]

	// enable PUSB
	PCONP |= PCONP_PCUSB;
    1a24:	f502 2250 	add.w	r2, r2, #851968	; 0xd0000
    1a28:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
    1a2c:	32b4      	adds	r2, #180	; 0xb4
    1a2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    1a32:	6013      	str	r3, [r2, #0]

	/* enable the USB controller clocks */
    USBClkCtrl |= (USBClkCtrl_DEV_CLK_EN | USBClkCtrl_AHB_CLK_EN);
    1a34:	4a0f      	ldr	r2, [pc, #60]	; (1a74 <USBHwInit+0xa0>)
    1a36:	6813      	ldr	r3, [r2, #0]
    1a38:	f043 0312 	orr.w	r3, r3, #18
    1a3c:	6013      	str	r3, [r2, #0]
    while (!(USBClkSt & USBClkSt_DEV_CLK_ON));
    1a3e:	4b0e      	ldr	r3, [pc, #56]	; (1a78 <USBHwInit+0xa4>)
    1a40:	461a      	mov	r2, r3
    1a42:	6819      	ldr	r1, [r3, #0]
    1a44:	0789      	lsls	r1, r1, #30
    1a46:	d5fc      	bpl.n	1a42 <USBHwInit+0x6e>
    while (!(USBClkSt & USBClkSt_AHB_CLK_ON));
    1a48:	6813      	ldr	r3, [r2, #0]
    1a4a:	06db      	lsls	r3, r3, #27
    1a4c:	d5fc      	bpl.n	1a48 <USBHwInit+0x74>
#endif

#endif
    
    // disable/clear all interrupts for now
    USBDevIntEn = 0;
    1a4e:	2000      	movs	r0, #0
    1a50:	4b0a      	ldr	r3, [pc, #40]	; (1a7c <USBHwInit+0xa8>)
    USBDevIntClr = 0xFFFFFFFF;
    1a52:	4a0b      	ldr	r2, [pc, #44]	; (1a80 <USBHwInit+0xac>)
    USBDevIntEn = 0;
    1a54:	6018      	str	r0, [r3, #0]
    USBDevIntClr = 0xFFFFFFFF;
    1a56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1a5a:	6013      	str	r3, [r2, #0]
    USBDevIntPri = 0;
    1a5c:	6250      	str	r0, [r2, #36]	; 0x24

    USBEpIntEn = 0;
    1a5e:	62d0      	str	r0, [r2, #44]	; 0x2c
    USBEpIntClr = 0xFFFFFFFF;
    1a60:	6313      	str	r3, [r2, #48]	; 0x30
    USBEpIntPri = 0;
    1a62:	4b08      	ldr	r3, [pc, #32]	; (1a84 <USBHwInit+0xb0>)
    1a64:	6018      	str	r0, [r3, #0]

    // by default, only ACKs generate interrupts
    USBHwNakIntEnable(0);
    1a66:	f7ff febe 	bl	17e6 <USBHwNakIntEnable>
    DEBUG_LED_INIT(8);
    DEBUG_LED_INIT(9);
    DEBUG_LED_INIT(10);

    return TRUE;
}
    1a6a:	2001      	movs	r0, #1
    1a6c:	bd08      	pop	{r3, pc}
    1a6e:	bf00      	nop
    1a70:	4002c010 	.word	0x4002c010
    1a74:	5000cff4 	.word	0x5000cff4
    1a78:	5000cff8 	.word	0x5000cff8
    1a7c:	5000c204 	.word	0x5000c204
    1a80:	5000c208 	.word	0x5000c208
    1a84:	5000c240 	.word	0x5000c240

00001a88 <USBFilterOsVendorMessage>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the request was handled by this filter, FALSE otherwise
 */
BOOL USBFilterOsVendorMessage(TSetupPacket *pSetup, BOOL *pfSuccess, int *piLen, U8 **ppbData)
{
    1a88:	b570      	push	{r4, r5, r6, lr}
    1a8a:	4604      	mov	r4, r0
	if(bMsVendorIndex == 0)	{
    1a8c:	4815      	ldr	r0, [pc, #84]	; (1ae4 <USBFilterOsVendorMessage+0x5c>)
    1a8e:	7805      	ldrb	r5, [r0, #0]
    1a90:	2000      	movs	r0, #0
    1a92:	b32d      	cbz	r5, 1ae0 <USBFilterOsVendorMessage+0x58>
		// Feature is disabled.
		return FALSE;
	}
	
	if(pSetup->bRequest == bMsVendorIndex) {
    1a94:	7866      	ldrb	r6, [r4, #1]
    1a96:	42ae      	cmp	r6, r5
    1a98:	d11d      	bne.n	1ad6 <USBFilterOsVendorMessage+0x4e>
		// Fail unless we make it to the end.
		*pfSuccess = FALSE;
	
		int iRequestLength = pSetup->wLength;
    1a9a:	88e6      	ldrh	r6, [r4, #6]
		*pfSuccess = FALSE;
    1a9c:	6008      	str	r0, [r1, #0]
		U8 bInterfaceNumber = GET_OS_DESC_INTERFACE(pSetup->wValue);
    1a9e:	8860      	ldrh	r0, [r4, #2]
		U8 bPageNumber = GET_OS_DESC_PAGE(pSetup->wValue);
	
		switch (pSetup->wIndex) {
    1aa0:	88a4      	ldrh	r4, [r4, #4]
    1aa2:	2c04      	cmp	r4, #4
    1aa4:	d003      	beq.n	1aae <USBFilterOsVendorMessage+0x26>
    1aa6:	2c05      	cmp	r4, #5
    1aa8:	d016      	beq.n	1ad8 <USBFilterOsVendorMessage+0x50>
		
		// Decide what portion of the descriptor to return.
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
		if (*piLen < iPageOffset) {
			// Not enough data for the requested offset.
			return TRUE;
    1aaa:	2001      	movs	r0, #1
    1aac:	e013      	b.n	1ad6 <USBFilterOsVendorMessage+0x4e>
			*ppbData = (U8*)abExtendedOsFeatureDescriptor;
    1aae:	4c0e      	ldr	r4, [pc, #56]	; (1ae8 <USBFilterOsVendorMessage+0x60>)
    1ab0:	601c      	str	r4, [r3, #0]
			*piLen = sizeof(abExtendedOsFeatureDescriptor);
    1ab2:	2428      	movs	r4, #40	; 0x28
			*piLen = sizeof(abExtendedPropertiesFeatureDescriptor);			
    1ab4:	6014      	str	r4, [r2, #0]
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
    1ab6:	0a04      	lsrs	r4, r0, #8
		if (*piLen < iPageOffset) {
    1ab8:	6810      	ldr	r0, [r2, #0]
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
    1aba:	0425      	lsls	r5, r4, #16
		if (*piLen < iPageOffset) {
    1abc:	ebb0 4f04 	cmp.w	r0, r4, lsl #16
    1ac0:	dbf3      	blt.n	1aaa <USBFilterOsVendorMessage+0x22>
		}
		*ppbData += iPageOffset;
    1ac2:	681c      	ldr	r4, [r3, #0]
		*piLen -= iPageOffset;
    1ac4:	1b40      	subs	r0, r0, r5
		*ppbData += iPageOffset;
    1ac6:	442c      	add	r4, r5
    1ac8:	601c      	str	r4, [r3, #0]
		
		if (*piLen > iRequestLength) {
    1aca:	42b0      	cmp	r0, r6
    1acc:	bfd4      	ite	le
    1ace:	6010      	strle	r0, [r2, #0]
    1ad0:	6016      	strgt	r6, [r2, #0]
			// Clip data longer than the requested length
			*piLen = iRequestLength;
		}
	
		*pfSuccess = TRUE;
    1ad2:	2001      	movs	r0, #1
    1ad4:	6008      	str	r0, [r1, #0]
		return TRUE;
	}
	
	// These are not the requests you are looking for
	return FALSE;
}
    1ad6:	bd70      	pop	{r4, r5, r6, pc}
			*ppbData = abExtendedPropertiesFeatureDescriptor;
    1ad8:	4c04      	ldr	r4, [pc, #16]	; (1aec <USBFilterOsVendorMessage+0x64>)
    1ada:	601c      	str	r4, [r3, #0]
			*piLen = sizeof(abExtendedPropertiesFeatureDescriptor);			
    1adc:	2492      	movs	r4, #146	; 0x92
    1ade:	e7e9      	b.n	1ab4 <USBFilterOsVendorMessage+0x2c>
		return FALSE;
    1ae0:	4628      	mov	r0, r5
    1ae2:	e7f8      	b.n	1ad6 <USBFilterOsVendorMessage+0x4e>
    1ae4:	100005d8 	.word	0x100005d8
    1ae8:	00001f00 	.word	0x00001f00
    1aec:	10000460 	.word	0x10000460

00001af0 <USBRegisterDescriptors>:

	@param [in]	pabDescriptors	The descriptor byte array
 */
void USBRegisterDescriptors(U8 *pabDescriptors)
{
	pabDescrip = pabDescriptors;
    1af0:	4b01      	ldr	r3, [pc, #4]	; (1af8 <USBRegisterDescriptors+0x8>)
    1af2:	6058      	str	r0, [r3, #4]
}
    1af4:	4770      	bx	lr
    1af6:	bf00      	nop
    1af8:	100005d8 	.word	0x100005d8

00001afc <USBGetDescriptor>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetDescriptor(U16 wTypeIndex, U16 wLangID, int *piLen, U8 **ppbData)
{
    1afc:	b5f0      	push	{r4, r5, r6, r7, lr}
	U8	*pab;
	int iCurIndex;
	
	ASSERT(pabDescrip != NULL);

	bType = GET_DESC_TYPE(wTypeIndex);
    1afe:	0a04      	lsrs	r4, r0, #8
	bIndex = GET_DESC_INDEX(wTypeIndex);
	
    if (bType == DESC_STRING &&
    1b00:	2c03      	cmp	r4, #3
	bIndex = GET_DESC_INDEX(wTypeIndex);
    1b02:	b2c1      	uxtb	r1, r0
	bType = GET_DESC_TYPE(wTypeIndex);
    1b04:	4626      	mov	r6, r4
    if (bType == DESC_STRING &&
    1b06:	4810      	ldr	r0, [pc, #64]	; (1b48 <USBGetDescriptor+0x4c>)
    1b08:	d10a      	bne.n	1b20 <USBGetDescriptor+0x24>
    1b0a:	29ee      	cmp	r1, #238	; 0xee
    1b0c:	d108      	bne.n	1b20 <USBGetDescriptor+0x24>
	abOsStringDescriptor[sizeof(abOsStringDescriptor)-2] = bMsVendorIndex;
    1b0e:	490f      	ldr	r1, [pc, #60]	; (1b4c <USBGetDescriptor+0x50>)
    1b10:	7800      	ldrb	r0, [r0, #0]
	*ppbData = abOsStringDescriptor;
    1b12:	3192      	adds	r1, #146	; 0x92
	abOsStringDescriptor[sizeof(abOsStringDescriptor)-2] = bMsVendorIndex;
    1b14:	7408      	strb	r0, [r1, #16]
	*ppbData = abOsStringDescriptor;
    1b16:	6019      	str	r1, [r3, #0]
	*piLen = sizeof(abOsStringDescriptor);
    1b18:	2312      	movs	r3, #18
				}
				else {
					// normally length is at offset 0
					*piLen = pab[DESC_bLength];
				}
				return TRUE;
    1b1a:	2001      	movs	r0, #1
					*piLen = pab[DESC_bLength];
    1b1c:	6013      	str	r3, [r2, #0]
		pab += pab[DESC_bLength];
	}
	// nothing found
	DBG("Desc %x not found!\n", wTypeIndex);
	return FALSE;
}
    1b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	iCurIndex = 0;
    1b20:	2500      	movs	r5, #0
	pab = (U8 *)pabDescrip;
    1b22:	6844      	ldr	r4, [r0, #4]
	while (pab[DESC_bLength] != 0) {
    1b24:	7820      	ldrb	r0, [r4, #0]
    1b26:	2800      	cmp	r0, #0
    1b28:	d0f9      	beq.n	1b1e <USBGetDescriptor+0x22>
		if (pab[DESC_bDescriptorType] == bType) {
    1b2a:	7867      	ldrb	r7, [r4, #1]
    1b2c:	42b7      	cmp	r7, r6
    1b2e:	d108      	bne.n	1b42 <USBGetDescriptor+0x46>
			if (iCurIndex == bIndex) {
    1b30:	42a9      	cmp	r1, r5
    1b32:	d105      	bne.n	1b40 <USBGetDescriptor+0x44>
				*ppbData = pab;
    1b34:	601c      	str	r4, [r3, #0]
				if (bType == DESC_CONFIGURATION) {
    1b36:	2e02      	cmp	r6, #2
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
    1b38:	bf0c      	ite	eq
    1b3a:	8863      	ldrheq	r3, [r4, #2]
					*piLen = pab[DESC_bLength];
    1b3c:	7823      	ldrbne	r3, [r4, #0]
    1b3e:	e7ec      	b.n	1b1a <USBGetDescriptor+0x1e>
			iCurIndex++;
    1b40:	3501      	adds	r5, #1
		pab += pab[DESC_bLength];
    1b42:	4404      	add	r4, r0
    1b44:	e7ee      	b.n	1b24 <USBGetDescriptor+0x28>
    1b46:	bf00      	nop
    1b48:	100005d8 	.word	0x100005d8
    1b4c:	10000460 	.word	0x10000460

00001b50 <USBHandleStandardRequest>:
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    1b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    1b54:	4c55      	ldr	r4, [pc, #340]	; (1cac <USBHandleStandardRequest+0x15c>)
{
    1b56:	4605      	mov	r5, r0
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    1b58:	68a3      	ldr	r3, [r4, #8]
{
    1b5a:	460f      	mov	r7, r1
    1b5c:	4690      	mov	r8, r2
    1b5e:	46a1      	mov	r9, r4
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    1b60:	b94b      	cbnz	r3, 1b76 <USBHandleStandardRequest+0x26>
		return TRUE;
	}
	
	switch (REQTYPE_GET_RECIP(pSetup->bmRequestType)) {
    1b62:	7828      	ldrb	r0, [r5, #0]
    1b64:	f000 061f 	and.w	r6, r0, #31
    1b68:	2e01      	cmp	r6, #1
    1b6a:	d069      	beq.n	1c40 <USBHandleStandardRequest+0xf0>
    1b6c:	2e02      	cmp	r6, #2
    1b6e:	d07b      	beq.n	1c68 <USBHandleStandardRequest+0x118>
    1b70:	b136      	cbz	r6, 1b80 <USBHandleStandardRequest+0x30>
			return FALSE;
    1b72:	2000      	movs	r0, #0
    1b74:	e037      	b.n	1be6 <USBHandleStandardRequest+0x96>
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    1b76:	4798      	blx	r3
    1b78:	2800      	cmp	r0, #0
    1b7a:	d0f2      	beq.n	1b62 <USBHandleStandardRequest+0x12>
		return TRUE;
    1b7c:	2001      	movs	r0, #1
    1b7e:	e032      	b.n	1be6 <USBHandleStandardRequest+0x96>
	U8	*pbData = *ppbData;
    1b80:	786a      	ldrb	r2, [r5, #1]
    1b82:	f8d8 3000 	ldr.w	r3, [r8]
	switch (pSetup->bRequest) {
    1b86:	2a09      	cmp	r2, #9
    1b88:	d8f3      	bhi.n	1b72 <USBHandleStandardRequest+0x22>
    1b8a:	a101      	add	r1, pc, #4	; (adr r1, 1b90 <USBHandleStandardRequest+0x40>)
    1b8c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    1b90:	00001bb9 	.word	0x00001bb9
    1b94:	00001b73 	.word	0x00001b73
    1b98:	00001b73 	.word	0x00001b73
    1b9c:	00001b73 	.word	0x00001b73
    1ba0:	00001b73 	.word	0x00001b73
    1ba4:	00001bc5 	.word	0x00001bc5
    1ba8:	00001bcd 	.word	0x00001bcd
    1bac:	00001b73 	.word	0x00001b73
    1bb0:	00001bdd 	.word	0x00001bdd
    1bb4:	00001beb 	.word	0x00001beb
		pbData[0] = 0;
    1bb8:	2200      	movs	r2, #0
    1bba:	701a      	strb	r2, [r3, #0]
		pbData[1] = 0;
    1bbc:	705a      	strb	r2, [r3, #1]
		*piLen = 2;
    1bbe:	2302      	movs	r3, #2
		*piLen = 0;
    1bc0:	603b      	str	r3, [r7, #0]
		break;
    1bc2:	e7db      	b.n	1b7c <USBHandleStandardRequest+0x2c>
		USBHwSetAddress(pSetup->wValue);
    1bc4:	78a8      	ldrb	r0, [r5, #2]
    1bc6:	f7ff fe03 	bl	17d0 <USBHwSetAddress>
		break;
    1bca:	e7d7      	b.n	1b7c <USBHandleStandardRequest+0x2c>
		return USBGetDescriptor(pSetup->wValue, pSetup->wIndex, piLen, ppbData);
    1bcc:	4643      	mov	r3, r8
    1bce:	463a      	mov	r2, r7
    1bd0:	88a9      	ldrh	r1, [r5, #4]
    1bd2:	8868      	ldrh	r0, [r5, #2]
	case REQTYPE_RECIP_DEVICE:		return HandleStdDeviceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_INTERFACE:	return HandleStdInterfaceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_ENDPOINT: 	return HandleStdEndPointReq(pSetup, piLen, ppbData);
	default: 						return FALSE;
	}
}
    1bd4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return USBGetDescriptor(pSetup->wValue, pSetup->wIndex, piLen, ppbData);
    1bd8:	f7ff bf90 	b.w	1afc <USBGetDescriptor>
		*piLen = 1;
    1bdc:	2001      	movs	r0, #1
		pbData[0] = bConfiguration;
    1bde:	f899 200c 	ldrb.w	r2, [r9, #12]
    1be2:	701a      	strb	r2, [r3, #0]
		*piLen = 1;
    1be4:	6038      	str	r0, [r7, #0]
}
    1be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!USBSetConfiguration(pSetup->wValue & 0xFF, 0)) {
    1bea:	78ae      	ldrb	r6, [r5, #2]
	if (bConfigIndex == 0) {
    1bec:	b936      	cbnz	r6, 1bfc <USBHandleStandardRequest+0xac>
		USBHwConfigDevice(FALSE);
    1bee:	4630      	mov	r0, r6
		USBHwConfigDevice(TRUE);
    1bf0:	f7ff fe84 	bl	18fc <USBHwConfigDevice>
		bConfiguration = pSetup->wValue & 0xFF;	
    1bf4:	886b      	ldrh	r3, [r5, #2]
    1bf6:	f889 300c 	strb.w	r3, [r9, #12]
		break;
    1bfa:	e7bf      	b.n	1b7c <USBHandleStandardRequest+0x2c>
		bCurAltSetting = 0xFF;
    1bfc:	27ff      	movs	r7, #255	; 0xff
		bCurConfig = 0xFF;
    1bfe:	46b8      	mov	r8, r7
		pab = (U8 *)pabDescrip;
    1c00:	f8d9 4004 	ldr.w	r4, [r9, #4]
		while (pab[DESC_bLength] != 0) {
    1c04:	7823      	ldrb	r3, [r4, #0]
    1c06:	b90b      	cbnz	r3, 1c0c <USBHandleStandardRequest+0xbc>
		USBHwConfigDevice(TRUE);
    1c08:	2001      	movs	r0, #1
    1c0a:	e7f1      	b.n	1bf0 <USBHandleStandardRequest+0xa0>
			switch (pab[DESC_bDescriptorType]) {
    1c0c:	7863      	ldrb	r3, [r4, #1]
    1c0e:	2b04      	cmp	r3, #4
    1c10:	d008      	beq.n	1c24 <USBHandleStandardRequest+0xd4>
    1c12:	2b05      	cmp	r3, #5
    1c14:	d008      	beq.n	1c28 <USBHandleStandardRequest+0xd8>
    1c16:	2b02      	cmp	r3, #2
    1c18:	d101      	bne.n	1c1e <USBHandleStandardRequest+0xce>
				bCurConfig = pab[CONF_DESC_bConfigurationValue];
    1c1a:	f894 8005 	ldrb.w	r8, [r4, #5]
			pab += pab[DESC_bLength];
    1c1e:	7823      	ldrb	r3, [r4, #0]
    1c20:	441c      	add	r4, r3
    1c22:	e7ef      	b.n	1c04 <USBHandleStandardRequest+0xb4>
				bCurAltSetting = pab[INTF_DESC_bAlternateSetting];
    1c24:	78e7      	ldrb	r7, [r4, #3]
				break;
    1c26:	e7fa      	b.n	1c1e <USBHandleStandardRequest+0xce>
				if ((bCurConfig == bConfigIndex) &&
    1c28:	4546      	cmp	r6, r8
    1c2a:	d1f8      	bne.n	1c1e <USBHandleStandardRequest+0xce>
    1c2c:	2f00      	cmp	r7, #0
    1c2e:	d1f6      	bne.n	1c1e <USBHandleStandardRequest+0xce>
									(pab[ENDP_DESC_wMaxPacketSize + 1] << 8);
    1c30:	7961      	ldrb	r1, [r4, #5]
					wMaxPktSize = 	(pab[ENDP_DESC_wMaxPacketSize]) |
    1c32:	7923      	ldrb	r3, [r4, #4]
					USBHwEPConfig(bEP, wMaxPktSize);
    1c34:	78a0      	ldrb	r0, [r4, #2]
    1c36:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
    1c3a:	f7ff fd85 	bl	1748 <USBHwEPConfig>
    1c3e:	e7ee      	b.n	1c1e <USBHandleStandardRequest+0xce>
	switch (pSetup->bRequest) {
    1c40:	786b      	ldrb	r3, [r5, #1]
	case REQTYPE_RECIP_INTERFACE:	return HandleStdInterfaceReq(pSetup, piLen, ppbData);
    1c42:	f8d8 2000 	ldr.w	r2, [r8]
	switch (pSetup->bRequest) {
    1c46:	2b0a      	cmp	r3, #10
    1c48:	d006      	beq.n	1c58 <USBHandleStandardRequest+0x108>
    1c4a:	2b0b      	cmp	r3, #11
    1c4c:	d008      	beq.n	1c60 <USBHandleStandardRequest+0x110>
    1c4e:	2b00      	cmp	r3, #0
    1c50:	d18f      	bne.n	1b72 <USBHandleStandardRequest+0x22>
		pbData[0] = 0;
    1c52:	7013      	strb	r3, [r2, #0]
		pbData[1] = 0;
    1c54:	7053      	strb	r3, [r2, #1]
    1c56:	e7b2      	b.n	1bbe <USBHandleStandardRequest+0x6e>
		pbData[0] = 0;
    1c58:	2300      	movs	r3, #0
    1c5a:	7013      	strb	r3, [r2, #0]
		*piLen = 2;
    1c5c:	603e      	str	r6, [r7, #0]
		break;
    1c5e:	e78d      	b.n	1b7c <USBHandleStandardRequest+0x2c>
		if (pSetup->wValue != 0) {
    1c60:	886b      	ldrh	r3, [r5, #2]
    1c62:	2b00      	cmp	r3, #0
    1c64:	d0ac      	beq.n	1bc0 <USBHandleStandardRequest+0x70>
    1c66:	e784      	b.n	1b72 <USBHandleStandardRequest+0x22>
	switch (pSetup->bRequest) {
    1c68:	786c      	ldrb	r4, [r5, #1]
    1c6a:	2c01      	cmp	r4, #1
    1c6c:	d010      	beq.n	1c90 <USBHandleStandardRequest+0x140>
    1c6e:	2c03      	cmp	r4, #3
    1c70:	d016      	beq.n	1ca0 <USBHandleStandardRequest+0x150>
    1c72:	2c00      	cmp	r4, #0
    1c74:	f47f af7d 	bne.w	1b72 <USBHandleStandardRequest+0x22>
		pbData[0] = (USBHwEPGetStatus(pSetup->wIndex) & EP_STATUS_STALLED) ? 1 : 0;
    1c78:	7928      	ldrb	r0, [r5, #4]
	case REQTYPE_RECIP_ENDPOINT: 	return HandleStdEndPointReq(pSetup, piLen, ppbData);
    1c7a:	f8d8 8000 	ldr.w	r8, [r8]
		pbData[0] = (USBHwEPGetStatus(pSetup->wIndex) & EP_STATUS_STALLED) ? 1 : 0;
    1c7e:	f7ff fdb7 	bl	17f0 <USBHwEPGetStatus>
    1c82:	f3c0 0040 	ubfx	r0, r0, #1, #1
    1c86:	f888 0000 	strb.w	r0, [r8]
		pbData[1] = 0;
    1c8a:	f888 4001 	strb.w	r4, [r8, #1]
    1c8e:	e7e5      	b.n	1c5c <USBHandleStandardRequest+0x10c>
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
    1c90:	8869      	ldrh	r1, [r5, #2]
    1c92:	2900      	cmp	r1, #0
    1c94:	f47f af6d 	bne.w	1b72 <USBHandleStandardRequest+0x22>
			USBHwEPStall(pSetup->wIndex, TRUE);
    1c98:	7928      	ldrb	r0, [r5, #4]
    1c9a:	f7ff fdc3 	bl	1824 <USBHwEPStall>
			break;
    1c9e:	e76d      	b.n	1b7c <USBHandleStandardRequest+0x2c>
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
    1ca0:	886b      	ldrh	r3, [r5, #2]
    1ca2:	2b00      	cmp	r3, #0
    1ca4:	f47f af65 	bne.w	1b72 <USBHandleStandardRequest+0x22>
			USBHwEPStall(pSetup->wIndex, TRUE);
    1ca8:	2101      	movs	r1, #1
    1caa:	e7f5      	b.n	1c98 <USBHandleStandardRequest+0x148>
    1cac:	100005d8 	.word	0x100005d8

00001cb0 <memcpy>:
    1cb0:	4684      	mov	ip, r0
    1cb2:	ea41 0300 	orr.w	r3, r1, r0
    1cb6:	f013 0303 	ands.w	r3, r3, #3
    1cba:	d149      	bne.n	1d50 <memcpy+0xa0>
    1cbc:	3a40      	subs	r2, #64	; 0x40
    1cbe:	d323      	bcc.n	1d08 <memcpy+0x58>
    1cc0:	680b      	ldr	r3, [r1, #0]
    1cc2:	6003      	str	r3, [r0, #0]
    1cc4:	684b      	ldr	r3, [r1, #4]
    1cc6:	6043      	str	r3, [r0, #4]
    1cc8:	688b      	ldr	r3, [r1, #8]
    1cca:	6083      	str	r3, [r0, #8]
    1ccc:	68cb      	ldr	r3, [r1, #12]
    1cce:	60c3      	str	r3, [r0, #12]
    1cd0:	690b      	ldr	r3, [r1, #16]
    1cd2:	6103      	str	r3, [r0, #16]
    1cd4:	694b      	ldr	r3, [r1, #20]
    1cd6:	6143      	str	r3, [r0, #20]
    1cd8:	698b      	ldr	r3, [r1, #24]
    1cda:	6183      	str	r3, [r0, #24]
    1cdc:	69cb      	ldr	r3, [r1, #28]
    1cde:	61c3      	str	r3, [r0, #28]
    1ce0:	6a0b      	ldr	r3, [r1, #32]
    1ce2:	6203      	str	r3, [r0, #32]
    1ce4:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    1ce6:	6243      	str	r3, [r0, #36]	; 0x24
    1ce8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    1cea:	6283      	str	r3, [r0, #40]	; 0x28
    1cec:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    1cee:	62c3      	str	r3, [r0, #44]	; 0x2c
    1cf0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    1cf2:	6303      	str	r3, [r0, #48]	; 0x30
    1cf4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    1cf6:	6343      	str	r3, [r0, #52]	; 0x34
    1cf8:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    1cfa:	6383      	str	r3, [r0, #56]	; 0x38
    1cfc:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    1cfe:	63c3      	str	r3, [r0, #60]	; 0x3c
    1d00:	3040      	adds	r0, #64	; 0x40
    1d02:	3140      	adds	r1, #64	; 0x40
    1d04:	3a40      	subs	r2, #64	; 0x40
    1d06:	d2db      	bcs.n	1cc0 <memcpy+0x10>
    1d08:	3230      	adds	r2, #48	; 0x30
    1d0a:	d30b      	bcc.n	1d24 <memcpy+0x74>
    1d0c:	680b      	ldr	r3, [r1, #0]
    1d0e:	6003      	str	r3, [r0, #0]
    1d10:	684b      	ldr	r3, [r1, #4]
    1d12:	6043      	str	r3, [r0, #4]
    1d14:	688b      	ldr	r3, [r1, #8]
    1d16:	6083      	str	r3, [r0, #8]
    1d18:	68cb      	ldr	r3, [r1, #12]
    1d1a:	60c3      	str	r3, [r0, #12]
    1d1c:	3010      	adds	r0, #16
    1d1e:	3110      	adds	r1, #16
    1d20:	3a10      	subs	r2, #16
    1d22:	d2f3      	bcs.n	1d0c <memcpy+0x5c>
    1d24:	320c      	adds	r2, #12
    1d26:	d305      	bcc.n	1d34 <memcpy+0x84>
    1d28:	f851 3b04 	ldr.w	r3, [r1], #4
    1d2c:	f840 3b04 	str.w	r3, [r0], #4
    1d30:	3a04      	subs	r2, #4
    1d32:	d2f9      	bcs.n	1d28 <memcpy+0x78>
    1d34:	3204      	adds	r2, #4
    1d36:	d008      	beq.n	1d4a <memcpy+0x9a>
    1d38:	07d2      	lsls	r2, r2, #31
    1d3a:	bf1c      	itt	ne
    1d3c:	f811 3b01 	ldrbne.w	r3, [r1], #1
    1d40:	f800 3b01 	strbne.w	r3, [r0], #1
    1d44:	d301      	bcc.n	1d4a <memcpy+0x9a>
    1d46:	880b      	ldrh	r3, [r1, #0]
    1d48:	8003      	strh	r3, [r0, #0]
    1d4a:	4660      	mov	r0, ip
    1d4c:	4770      	bx	lr
    1d4e:	bf00      	nop
    1d50:	2a08      	cmp	r2, #8
    1d52:	d313      	bcc.n	1d7c <memcpy+0xcc>
    1d54:	078b      	lsls	r3, r1, #30
    1d56:	d0b1      	beq.n	1cbc <memcpy+0xc>
    1d58:	f010 0303 	ands.w	r3, r0, #3
    1d5c:	d0ae      	beq.n	1cbc <memcpy+0xc>
    1d5e:	f1c3 0304 	rsb	r3, r3, #4
    1d62:	1ad2      	subs	r2, r2, r3
    1d64:	07db      	lsls	r3, r3, #31
    1d66:	bf1c      	itt	ne
    1d68:	f811 3b01 	ldrbne.w	r3, [r1], #1
    1d6c:	f800 3b01 	strbne.w	r3, [r0], #1
    1d70:	d3a4      	bcc.n	1cbc <memcpy+0xc>
    1d72:	f831 3b02 	ldrh.w	r3, [r1], #2
    1d76:	f820 3b02 	strh.w	r3, [r0], #2
    1d7a:	e79f      	b.n	1cbc <memcpy+0xc>
    1d7c:	3a04      	subs	r2, #4
    1d7e:	d3d9      	bcc.n	1d34 <memcpy+0x84>
    1d80:	3a01      	subs	r2, #1
    1d82:	f811 3b01 	ldrb.w	r3, [r1], #1
    1d86:	f800 3b01 	strb.w	r3, [r0], #1
    1d8a:	d2f9      	bcs.n	1d80 <memcpy+0xd0>
    1d8c:	780b      	ldrb	r3, [r1, #0]
    1d8e:	7003      	strb	r3, [r0, #0]
    1d90:	784b      	ldrb	r3, [r1, #1]
    1d92:	7043      	strb	r3, [r0, #1]
    1d94:	788b      	ldrb	r3, [r1, #2]
    1d96:	7083      	strb	r3, [r0, #2]
    1d98:	4660      	mov	r0, ip
    1d9a:	4770      	bx	lr

00001d9c <strlen>:
    1d9c:	f020 0103 	bic.w	r1, r0, #3
    1da0:	f010 0003 	ands.w	r0, r0, #3
    1da4:	f1c0 0000 	rsb	r0, r0, #0
    1da8:	f851 3b04 	ldr.w	r3, [r1], #4
    1dac:	f100 0c04 	add.w	ip, r0, #4
    1db0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    1db4:	f06f 0200 	mvn.w	r2, #0
    1db8:	bf1c      	itt	ne
    1dba:	fa22 f20c 	lsrne.w	r2, r2, ip
    1dbe:	4313      	orrne	r3, r2
    1dc0:	f04f 0c01 	mov.w	ip, #1
    1dc4:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
    1dc8:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
    1dcc:	eba3 020c 	sub.w	r2, r3, ip
    1dd0:	ea22 0203 	bic.w	r2, r2, r3
    1dd4:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
    1dd8:	bf04      	itt	eq
    1dda:	f851 3b04 	ldreq.w	r3, [r1], #4
    1dde:	3004      	addeq	r0, #4
    1de0:	d0f4      	beq.n	1dcc <strlen+0x30>
    1de2:	f1c2 0100 	rsb	r1, r2, #0
    1de6:	ea02 0201 	and.w	r2, r2, r1
    1dea:	fab2 f282 	clz	r2, r2
    1dee:	f1c2 021f 	rsb	r2, r2, #31
    1df2:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    1df6:	4770      	bx	lr

00001df8 <_global_impure_ptr>:
    1df8:	0028 1000 3032 3032 312d 2d32 3152           (...2020-12-R1.

00001e07 <abDescriptors>:
    1e07:	0112 0200 00ff 4000 ffff 0004 0100 0201     .......@........
    1e17:	0103 0209 0020 0101 8000 0932 0004 0200     .... .....2.....
    1e27:	00ff 0000 0507 0282 0040 0700 0505 4002     ........@......@
    1e37:	0000 0304 0409 0344 0068 0074 0074 0070     ......D.h.t.t.p.
    1e47:	003a 002f 002f 0075 0062 0065 0072 0074     :././.u.b.e.r.t.
    1e57:	006f 006f 0074 0068 002e 0073 006f 0075     o.o.t.h...s.o.u.
    1e67:	0072 0063 0065 0066 006f 0072 0067 0065     r.c.e.f.o.r.g.e.
    1e77:	002e 006e 0065 0074 002f 0330 0075 0062     ..n.e.t./.0.u.b.
    1e87:	0065 0072 0074 006f 006f 0074 0068 0020     e.r.t.o.o.t.h. .
    1e97:	0061 0073 0073 0065 006d 0062 006c 0079     a.s.s.e.m.b.l.y.
    1ea7:	005f 0074 0065 0073 0074 0312 0030 0030     _.t.e.s.t...0.0.
    1eb7:	0030 0030 0030 0030 0030 0031 4700 585c     0.0.0.0.0.1..G\X
    1ec7:	73cc 5e34 b88e 98b1 68e6 11bc 16d7 1c33     .s4^.....h....3.
    1ed7:	17cd ae23 662c 9a39 752f 8cc5 33c7 e745     ..#.,f9./u...3E.
    1ee7:	8beb 8e19 8b66 1dce 6371 cc31 79d1 e23a     ....f...qc1..y:.
    1ef7:	63c6 a299                                    .c...

00001efc <iap_entry>:
    1efc:	1ff1 1fff                                   ....

00001f00 <abExtendedOsFeatureDescriptor>:
    1f00:	0028 0000 0100 0004 0001 0000 0000 0000     (...............
    1f10:	0100 4957 554e 4253 0000 0000 0000 0000     ..WINUSB........
    1f20:	0000 0000 0000 0000                         ........

00001f28 <_init>:
    1f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f2a:	bf00      	nop
    1f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1f2e:	bc08      	pop	{r3}
    1f30:	469e      	mov	lr, r3
    1f32:	4770      	bx	lr

00001f34 <__init_array_start>:
    1f34:	00000241 	.word	0x00000241

00001f38 <__frame_dummy_init_array_entry>:
    1f38:	00000135                                5...

00001f3c <_fini>:
    1f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f3e:	bf00      	nop
    1f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1f42:	bc08      	pop	{r3}
    1f44:	469e      	mov	lr, r3
    1f46:	4770      	bx	lr

00001f48 <__do_global_dtors_aux_fini_array_entry>:
    1f48:	010d 0000                                   ....

00001f4c <__fini_array_end>:
    1f4c:	00000000 	.word	0x00000000
