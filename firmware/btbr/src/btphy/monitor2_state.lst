ARM GAS  /tmp/cccOUgNC.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 2
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"monitor2_state.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.rodata.str1.4,"aMS",%progbits,1
  16              		.align	2
  17              	.LC0:
  18 0000 4449457C 		.ascii	"DIE|rx : expect acl rx\012\000"
  18      7278203A 
  18      20657870 
  18      65637420 
  18      61636C20 
  19              		.align	2
  20              	.LC2:
  21 0018 2825632C 		.ascii	"(%c,%x,%x)\000"
  21      25782C25 
  21      782900
  22 0023 00       		.align	2
  23              	.LC3:
  24 0024 4449457C 		.ascii	"DIE|mon2: txq full\012\000"
  24      6D6F6E32 
  24      3A207478 
  24      71206675 
  24      6C6C0A00 
  25              		.align	2
  26              	.LC1:
  27 0038 4E504600 		.ascii	"NPF\000"
  28              		.section	.text.monitor2_rx_cb,"ax",%progbits
  29              		.align	1
  30              		.p2align 2,,3
  31              		.arch armv7-m
  32              		.syntax unified
  33              		.thumb
  34              		.thumb_func
  35              		.fpu softvfp
  37              	monitor2_rx_cb:
  38              	.LVL0:
  39              	.LFB32:
  40              		.file 1 "src/btphy/monitor2_state.c"
   1:src/btphy/monitor2_state.c **** /* Monitor connection state
   2:src/btphy/monitor2_state.c ****  *
   3:src/btphy/monitor2_state.c ****  * Copyright 2020 Etienne Helluy-Lafont, Univ. Lille, CNRS.
   4:src/btphy/monitor2_state.c ****  *
   5:src/btphy/monitor2_state.c ****  * This file is part of Project Ubertooth.
   6:src/btphy/monitor2_state.c ****  *
   7:src/btphy/monitor2_state.c ****  * This program is free software; you can redistribute it and/or modify
   8:src/btphy/monitor2_state.c ****  * it under the terms of the GNU General Public License as published by
ARM GAS  /tmp/cccOUgNC.s 			page 2


   9:src/btphy/monitor2_state.c ****  * the Free Software Foundation; either version 2, or (at your option)
  10:src/btphy/monitor2_state.c ****  * any later version.
  11:src/btphy/monitor2_state.c ****  *
  12:src/btphy/monitor2_state.c ****  * This program is distributed in the hope that it will be useful,
  13:src/btphy/monitor2_state.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:src/btphy/monitor2_state.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:src/btphy/monitor2_state.c ****  * GNU General Public License for more details.
  16:src/btphy/monitor2_state.c ****  *
  17:src/btphy/monitor2_state.c ****  * You should have received a copy of the GNU General Public License
  18:src/btphy/monitor2_state.c ****  * along with this program; see the file COPYING.  If not, write to
  19:src/btphy/monitor2_state.c ****  * the Free Software Foundation, Inc., 51 Franklin Street,
  20:src/btphy/monitor2_state.c ****  * Boston, MA 02110-1301, USA.
  21:src/btphy/monitor2_state.c ****  */
  22:src/btphy/monitor2_state.c **** #include <string.h>
  23:src/btphy/monitor2_state.c **** #include <ubtbr/cfg.h>
  24:src/btphy/monitor2_state.c **** #include <ubtbr/btctl_intf.h>
  25:src/btphy/monitor2_state.c **** #include <ubtbr/btphy.h>
  26:src/btphy/monitor2_state.c **** #include <ubtbr/tdma_sched.h>
  27:src/btphy/monitor2_state.c **** #include <ubtbr/bb.h>
  28:src/btphy/monitor2_state.c **** #include <ubtbr/rx_task.h>
  29:src/btphy/monitor2_state.c **** 
  30:src/btphy/monitor2_state.c **** #define RX_PREPARE_IDX	1  //  We will receive in all timeslots where clkn1_0 = 0
  31:src/btphy/monitor2_state.c **** 
  32:src/btphy/monitor2_state.c **** static struct {
  33:src/btphy/monitor2_state.c **** 	/* Parameters */
  34:src/btphy/monitor2_state.c **** 	uint64_t master_bdaddr;
  35:src/btphy/monitor2_state.c **** } monitor2_state;
  36:src/btphy/monitor2_state.c **** 
  37:src/btphy/monitor2_state.c **** static void monitor2_state_schedule_rx(unsigned skip_slots);
  38:src/btphy/monitor2_state.c **** 
  39:src/btphy/monitor2_state.c **** static int monitor2_state_canceled(void)
  40:src/btphy/monitor2_state.c **** {
  41:src/btphy/monitor2_state.c **** 	return btctl_get_state() != BTCTL_STATE_CONNECTED;
  42:src/btphy/monitor2_state.c **** }
  43:src/btphy/monitor2_state.c **** 
  44:src/btphy/monitor2_state.c **** static int monitor2_rx_cb(msg_t *msg, void *arg, int time_offset)
  45:src/btphy/monitor2_state.c **** {
  41              		.loc 1 45 1 view -0
  42              		.cfi_startproc
  43              		@ args = 0, pretend = 0, frame = 0
  44              		@ frame_needed = 0, uses_anonymous_args = 0
  45              		.loc 1 45 1 is_stmt 0 view .LVU1
  46 0000 38B5     		push	{r3, r4, r5, lr}
  47              		.cfi_def_cfa_offset 16
  48              		.cfi_offset 3, -16
  49              		.cfi_offset 4, -12
  50              		.cfi_offset 5, -8
  51              		.cfi_offset 14, -4
  46:src/btphy/monitor2_state.c **** 	btctl_hdr_t *h = (btctl_hdr_t*)msg->data;
  52              		.loc 1 46 2 is_stmt 1 view .LVU2
  53              	.LVL1:
  47:src/btphy/monitor2_state.c **** 	btctl_rx_pkt_t *pkt;
  54              		.loc 1 47 2 view .LVU3
  48:src/btphy/monitor2_state.c **** 	int rc;
  55              		.loc 1 48 2 view .LVU4
  49:src/btphy/monitor2_state.c **** 
  50:src/btphy/monitor2_state.c **** 	if (monitor2_state_canceled())
ARM GAS  /tmp/cccOUgNC.s 			page 3


  56              		.loc 1 50 2 view .LVU5
  57              	.LBB77:
  58              	.LBI77:
  39:src/btphy/monitor2_state.c **** {
  59              		.loc 1 39 12 view .LVU6
  60              	.LBE77:
  41:src/btphy/monitor2_state.c **** }
  61              		.loc 1 41 2 view .LVU7
  62              	.LBB80:
  63              	.LBB78:
  64              	.LBI78:
  65              		.file 2 "include/ubtbr/btctl_intf.h"
   1:include/ubtbr/btctl_intf.h **** #ifndef __BTCTL_INTF_H
   2:include/ubtbr/btctl_intf.h **** #define __BTCTL_INTF_H
   3:include/ubtbr/btctl_intf.h **** #include <ubtbr/bb_msg.h>
   4:include/ubtbr/btctl_intf.h **** #include <ubtbr/queue.h>
   5:include/ubtbr/btctl_intf.h **** #include <ubtbr/system.h>
   6:include/ubtbr/btctl_intf.h **** #include <ubertooth_interface.h>
   7:include/ubtbr/btctl_intf.h **** 
   8:include/ubtbr/btctl_intf.h **** typedef struct btctl_s {
   9:include/ubtbr/btctl_intf.h **** 	btctl_state_t state;
  10:include/ubtbr/btctl_intf.h **** 	msg_queue_t rx_q;
  11:include/ubtbr/btctl_intf.h **** 	msg_queue_t tx_q;
  12:include/ubtbr/btctl_intf.h **** 	msg_queue_t acl_tx_q;
  13:include/ubtbr/btctl_intf.h **** 	msg_t *eir_msg;
  14:include/ubtbr/btctl_intf.h **** 	btctl_tx_pkt_t *eir_pkt;
  15:include/ubtbr/btctl_intf.h **** } btctl_t;
  16:include/ubtbr/btctl_intf.h **** 
  17:include/ubtbr/btctl_intf.h **** extern btctl_t btctl;
  18:include/ubtbr/btctl_intf.h **** 
  19:include/ubtbr/btctl_intf.h **** void btctl_init(void);
  20:include/ubtbr/btctl_intf.h **** int btctl_work(void);
  21:include/ubtbr/btctl_intf.h **** 
  22:include/ubtbr/btctl_intf.h **** void btctl_set_state(btctl_state_t state, btctl_reason_t reason);
  23:include/ubtbr/btctl_intf.h **** 
  24:include/ubtbr/btctl_intf.h **** static inline btctl_state_t btctl_get_state(void)
  66              		.loc 2 24 29 view .LVU8
  67              	.LBB79:
  25:include/ubtbr/btctl_intf.h **** {
  26:include/ubtbr/btctl_intf.h **** 	return btctl.state;
  68              		.loc 2 26 2 view .LVU9
  69              		.loc 2 26 14 is_stmt 0 view .LVU10
  70 0002 244B     		ldr	r3, .L27
  71              	.LBE79:
  72              	.LBE78:
  73              	.LBE80:
  45:src/btphy/monitor2_state.c **** 	btctl_hdr_t *h = (btctl_hdr_t*)msg->data;
  74              		.loc 1 45 1 view .LVU11
  75 0004 0446     		mov	r4, r0
  76              		.loc 1 50 5 view .LVU12
  77 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  78 0008 032B     		cmp	r3, #3
  79 000a 1ED1     		bne	.L22
  51:src/btphy/monitor2_state.c **** 	{
  52:src/btphy/monitor2_state.c **** 		msg_free(msg);
  53:src/btphy/monitor2_state.c **** 		return 0;
  54:src/btphy/monitor2_state.c **** 	}
ARM GAS  /tmp/cccOUgNC.s 			page 4


  55:src/btphy/monitor2_state.c **** 	/* Check if a packet was received, to adjust clock if needed */
  56:src/btphy/monitor2_state.c **** 	if (h->type != BTCTL_RX_PKT)
  80              		.loc 1 56 2 is_stmt 1 view .LVU13
  81              		.loc 1 56 5 is_stmt 0 view .LVU14
  82 000c 037B     		ldrb	r3, [r0, #12]	@ zero_extendqisi2
  83 000e 282B     		cmp	r3, #40
  84 0010 3CD1     		bne	.L23
  85              	.LVL2:
  86              	.LBB81:
  87              	.LBI81:
  44:src/btphy/monitor2_state.c **** {
  88              		.loc 1 44 12 is_stmt 1 view .LVU15
  89              	.LBB82:
  57:src/btphy/monitor2_state.c **** 		DIE("rx : expect acl rx");
  58:src/btphy/monitor2_state.c **** 	pkt = (btctl_rx_pkt_t *)h->data;
  90              		.loc 1 58 2 view .LVU16
  59:src/btphy/monitor2_state.c **** 
  60:src/btphy/monitor2_state.c **** 	if (!BBPKT_HAS_PKT(pkt))
  91              		.loc 1 60 2 view .LVU17
  92              		.loc 1 60 7 is_stmt 0 view .LVU18
  93 0012 437D     		ldrb	r3, [r0, #21]	@ zero_extendqisi2
  94              		.loc 1 60 5 view .LVU19
  95 0014 D807     		lsls	r0, r3, #31
  96              	.LVL3:
  97              		.loc 1 60 5 view .LVU20
  98 0016 09D5     		bpl	.L5
  61:src/btphy/monitor2_state.c **** 	{
  62:src/btphy/monitor2_state.c **** 		//console_putc('N');
  63:src/btphy/monitor2_state.c **** 		goto end;
  64:src/btphy/monitor2_state.c **** 	}
  65:src/btphy/monitor2_state.c **** 
  66:src/btphy/monitor2_state.c **** 	if ((pkt->clkn&2) == 0) // Packet from master
  99              		.loc 1 66 2 is_stmt 1 view .LVU21
 100              		.loc 1 66 10 is_stmt 0 view .LVU22
 101 0018 2169     		ldr	r1, [r4, #16]	@ unaligned
 102              	.LVL4:
 103              		.loc 1 66 5 view .LVU23
 104 001a 8907     		lsls	r1, r1, #30
 105 001c 31D5     		bpl	.L24
 106              	.LVL5:
 107              	.L6:
  67:src/btphy/monitor2_state.c **** 	{
  68:src/btphy/monitor2_state.c **** 		/* Resync to master */
  69:src/btphy/monitor2_state.c **** 		btphy_adj_clkn_delay(time_offset);
  70:src/btphy/monitor2_state.c **** 	}
  71:src/btphy/monitor2_state.c **** 
  72:src/btphy/monitor2_state.c **** 	if (!BBPKT_HAS_HDR(pkt))
 108              		.loc 1 72 2 is_stmt 1 view .LVU24
 109              		.loc 1 72 5 is_stmt 0 view .LVU25
 110 001e 9A07     		lsls	r2, r3, #30
 111 0020 04D5     		bpl	.L5
  73:src/btphy/monitor2_state.c **** 	{
  74:src/btphy/monitor2_state.c **** 		goto end;
  75:src/btphy/monitor2_state.c **** 	}
  76:src/btphy/monitor2_state.c **** #if 1
  77:src/btphy/monitor2_state.c **** 	if (pkt->bb_hdr.type < 3) // NULL / POLL / FHS
 112              		.loc 1 77 2 is_stmt 1 view .LVU26
ARM GAS  /tmp/cccOUgNC.s 			page 5


 113              		.loc 1 77 17 is_stmt 0 view .LVU27
 114 0022 617E     		ldrb	r1, [r4, #25]	@ zero_extendqisi2
 115              		.loc 1 77 5 view .LVU28
 116 0024 0229     		cmp	r1, #2
 117 0026 22D9     		bls	.L25
 118              	.L7:
  78:src/btphy/monitor2_state.c **** 	{
  79:src/btphy/monitor2_state.c **** 		cprintf("(%c,%x,%x)","NPF"[pkt->bb_hdr.type], pkt->clkn&0xff,pkt->bb_hdr.flags);
  80:src/btphy/monitor2_state.c **** 	}
  81:src/btphy/monitor2_state.c **** #endif
  82:src/btphy/monitor2_state.c **** 	if (BBPKT_HAS_CRC(pkt))
 119              		.loc 1 82 2 is_stmt 1 view .LVU29
 120              		.loc 1 82 5 is_stmt 0 view .LVU30
 121 0028 5B07     		lsls	r3, r3, #29
 122 002a 12D4     		bmi	.L26
 123              	.L5:
 124              	.LDL1:
  83:src/btphy/monitor2_state.c **** 	{
  84:src/btphy/monitor2_state.c **** 		if(btctl_tx_enqueue(msg) != 0)
  85:src/btphy/monitor2_state.c **** 		{
  86:src/btphy/monitor2_state.c **** 			DIE("mon2: txq full");
  87:src/btphy/monitor2_state.c **** 		}
  88:src/btphy/monitor2_state.c **** 		goto end_nofree;
  89:src/btphy/monitor2_state.c **** 	}
  90:src/btphy/monitor2_state.c **** end:
  91:src/btphy/monitor2_state.c **** 	msg_free(msg);
 125              		.loc 1 91 2 is_stmt 1 view .LVU31
 126              	.LVL6:
 127              	.LBB83:
 128              	.LBI83:
 129              		.file 3 "include/ubtbr/msg.h"
   1:include/ubtbr/msg.h **** #ifndef __DEF_MSG_H
   2:include/ubtbr/msg.h **** #define __DEF_MSG_H
   3:include/ubtbr/msg.h **** #include <stdint.h>
   4:include/ubtbr/msg.h **** 
   5:include/ubtbr/msg.h **** typedef struct msg_s {
   6:include/ubtbr/msg.h **** 	uint16_t len;
   7:include/ubtbr/msg.h **** 	uint16_t data_len;
   8:include/ubtbr/msg.h **** 	uint8_t *read;
   9:include/ubtbr/msg.h **** 	uint8_t *write;
  10:include/ubtbr/msg.h **** 	/* never move head */
  11:include/ubtbr/msg.h **** 	uint8_t data[0];
  12:include/ubtbr/msg.h **** } msg_t;
  13:include/ubtbr/msg.h **** 
  14:include/ubtbr/msg.h **** /* Allocate a msg_t wigh given room*/
  15:include/ubtbr/msg.h **** static inline msg_t *msg_alloc(unsigned size)
  16:include/ubtbr/msg.h **** {
  17:include/ubtbr/msg.h **** 	msg_t *msg = (msg_t*)btctl_mem_alloc(sizeof(msg_t)+size);
  18:include/ubtbr/msg.h **** 
  19:include/ubtbr/msg.h **** 	msg->write = msg->data;
  20:include/ubtbr/msg.h **** 	msg->read = msg->data;
  21:include/ubtbr/msg.h **** 	msg->data_len = size;
  22:include/ubtbr/msg.h **** 
  23:include/ubtbr/msg.h **** 	return msg;
  24:include/ubtbr/msg.h **** }
  25:include/ubtbr/msg.h **** 
  26:include/ubtbr/msg.h **** static inline void msg_free(msg_t *msg)
ARM GAS  /tmp/cccOUgNC.s 			page 6


 130              		.loc 3 26 20 view .LVU32
 131              	.LBB84:
  27:include/ubtbr/msg.h **** {
  28:include/ubtbr/msg.h **** 	btctl_mem_free(msg);
 132              		.loc 3 28 2 view .LVU33
 133 002c 2046     		mov	r0, r4
 134 002e FFF7FEFF 		bl	mem_pool_free
 135              	.LVL7:
 136              	.L8:
 137              		.loc 3 28 2 is_stmt 0 view .LVU34
 138              	.LBE84:
 139              	.LBE83:
  92:src/btphy/monitor2_state.c **** end_nofree:
  93:src/btphy/monitor2_state.c **** 	monitor2_state_schedule_rx(0);
 140              		.loc 1 93 2 is_stmt 1 view .LVU35
 141              	.LBB85:
 142              	.LBI85:
  94:src/btphy/monitor2_state.c **** 	return 0;
  95:src/btphy/monitor2_state.c **** }
  96:src/btphy/monitor2_state.c **** 
  97:src/btphy/monitor2_state.c **** static void monitor2_state_schedule_rx(unsigned skip_slots)
 143              		.loc 1 97 13 view .LVU36
 144              	.LBB86:
  98:src/btphy/monitor2_state.c **** {
  99:src/btphy/monitor2_state.c **** 	/* Listen for a packet in next rx slot */
 100:src/btphy/monitor2_state.c **** 	unsigned delay = 2*skip_slots + (1&(RX_PREPARE_IDX - (btphy.slave_clkn&1)));
 145              		.loc 1 100 2 view .LVU37
 101:src/btphy/monitor2_state.c **** 
 102:src/btphy/monitor2_state.c **** 	/* Schedule rx: */
 103:src/btphy/monitor2_state.c **** 	rx_task_schedule(delay,
 146              		.loc 1 103 2 view .LVU38
 100:src/btphy/monitor2_state.c **** 
 147              		.loc 1 100 61 is_stmt 0 view .LVU39
 148 0032 194A     		ldr	r2, .L27+4
 149              		.loc 1 103 2 view .LVU40
 150 0034 0323     		movs	r3, #3
 151 0036 9068     		ldr	r0, [r2, #8]
 152 0038 1849     		ldr	r1, .L27+8
 153 003a C043     		mvns	r0, r0
 154 003c 0022     		movs	r2, #0
 155 003e 00F00100 		and	r0, r0, #1
 156 0042 FFF7FEFF 		bl	rx_task_schedule
 157              	.LVL8:
 158              		.loc 1 103 2 view .LVU41
 159              	.LBE86:
 160              	.LBE85:
  94:src/btphy/monitor2_state.c **** }
 161              		.loc 1 94 2 is_stmt 1 view .LVU42
  94:src/btphy/monitor2_state.c **** }
 162              		.loc 1 94 2 is_stmt 0 view .LVU43
 163              	.LBE82:
 164              	.LBE81:
  95:src/btphy/monitor2_state.c **** 
 165              		.loc 1 95 1 view .LVU44
 166 0046 0020     		movs	r0, #0
 167 0048 38BD     		pop	{r3, r4, r5, pc}
 168              	.LVL9:
ARM GAS  /tmp/cccOUgNC.s 			page 7


 169              	.L22:
  52:src/btphy/monitor2_state.c **** 		return 0;
 170              		.loc 1 52 3 is_stmt 1 view .LVU45
 171              	.LBB96:
 172              	.LBI96:
  26:include/ubtbr/msg.h **** {
 173              		.loc 3 26 20 view .LVU46
 174              	.LBB97:
 175              		.loc 3 28 2 view .LVU47
 176 004a FFF7FEFF 		bl	mem_pool_free
 177              	.LVL10:
 178              		.loc 3 28 2 is_stmt 0 view .LVU48
 179              	.LBE97:
 180              	.LBE96:
  53:src/btphy/monitor2_state.c **** 	}
 181              		.loc 1 53 3 is_stmt 1 view .LVU49
  95:src/btphy/monitor2_state.c **** 
 182              		.loc 1 95 1 is_stmt 0 view .LVU50
 183 004e 0020     		movs	r0, #0
 184 0050 38BD     		pop	{r3, r4, r5, pc}
 185              	.LVL11:
 186              	.L26:
 187              	.LBB98:
 188              	.LBB95:
  84:src/btphy/monitor2_state.c **** 		{
 189              		.loc 1 84 3 is_stmt 1 view .LVU51
 190              	.LBB87:
 191              	.LBI87:
  27:include/ubtbr/btctl_intf.h **** }
  28:include/ubtbr/btctl_intf.h **** 
  29:include/ubtbr/btctl_intf.h **** static inline btctl_tx_pkt_t *btctl_get_eir(void)
  30:include/ubtbr/btctl_intf.h **** {
  31:include/ubtbr/btctl_intf.h **** 	return btctl.eir_pkt;
  32:include/ubtbr/btctl_intf.h **** }
  33:include/ubtbr/btctl_intf.h **** 
  34:include/ubtbr/btctl_intf.h **** static inline msg_t *btctl_msg_alloc(unsigned type)
  35:include/ubtbr/btctl_intf.h **** {
  36:include/ubtbr/btctl_intf.h **** 	msg_t *msg;
  37:include/ubtbr/btctl_intf.h **** 	btctl_hdr_t *hdr;
  38:include/ubtbr/btctl_intf.h **** 
  39:include/ubtbr/btctl_intf.h **** 	/* maximum size ?*/
  40:include/ubtbr/btctl_intf.h **** 	msg = msg_alloc(sizeof(btctl_hdr_t)+sizeof(btctl_rx_pkt_t)+MAX_ACL_PACKET_SIZE);
  41:include/ubtbr/btctl_intf.h **** 	hdr = (btctl_hdr_t*) msg_put(msg, sizeof(*hdr));
  42:include/ubtbr/btctl_intf.h **** 	hdr->type = type;
  43:include/ubtbr/btctl_intf.h **** 
  44:include/ubtbr/btctl_intf.h **** 	return msg;
  45:include/ubtbr/btctl_intf.h **** }
  46:include/ubtbr/btctl_intf.h **** 
  47:include/ubtbr/btctl_intf.h **** static inline msg_t *safe_dequeue(msg_queue_t* q)
  48:include/ubtbr/btctl_intf.h **** {
  49:include/ubtbr/btctl_intf.h **** 	uint32_t flags = irq_save_disable();
  50:include/ubtbr/btctl_intf.h **** 	msg_t *msg;
  51:include/ubtbr/btctl_intf.h **** 
  52:include/ubtbr/btctl_intf.h **** 	msg = msg_dequeue(q);
  53:include/ubtbr/btctl_intf.h **** 	irq_restore(flags);
  54:include/ubtbr/btctl_intf.h **** 
  55:include/ubtbr/btctl_intf.h **** 	return msg;
ARM GAS  /tmp/cccOUgNC.s 			page 8


  56:include/ubtbr/btctl_intf.h **** }
  57:include/ubtbr/btctl_intf.h **** 
  58:include/ubtbr/btctl_intf.h **** static inline int safe_enqueue(msg_queue_t *q, msg_t *msg)
  59:include/ubtbr/btctl_intf.h **** {
  60:include/ubtbr/btctl_intf.h **** 	uint32_t flags = irq_save_disable();
  61:include/ubtbr/btctl_intf.h **** 	int rc;
  62:include/ubtbr/btctl_intf.h **** 
  63:include/ubtbr/btctl_intf.h **** 	rc = msg_enqueue(q, msg);
  64:include/ubtbr/btctl_intf.h **** 	irq_restore(flags);
  65:include/ubtbr/btctl_intf.h **** 
  66:include/ubtbr/btctl_intf.h **** 	return rc;
  67:include/ubtbr/btctl_intf.h **** }
  68:include/ubtbr/btctl_intf.h **** 
  69:include/ubtbr/btctl_intf.h **** /* Called by usb driver to retreive next message to send to host */
  70:include/ubtbr/btctl_intf.h **** static inline msg_t *btctl_tx_dequeue(void)
  71:include/ubtbr/btctl_intf.h **** {
  72:include/ubtbr/btctl_intf.h **** 	return safe_dequeue(&btctl.tx_q);
  73:include/ubtbr/btctl_intf.h **** }
  74:include/ubtbr/btctl_intf.h **** 
  75:include/ubtbr/btctl_intf.h **** /* Enqueue a message for host */
  76:include/ubtbr/btctl_intf.h **** static inline int btctl_tx_enqueue(msg_t *msg)
 192              		.loc 2 76 19 view .LVU52
 193              	.LBB88:
  77:include/ubtbr/btctl_intf.h **** {
  78:include/ubtbr/btctl_intf.h **** 	return safe_enqueue(&btctl.tx_q, msg);
 194              		.loc 2 78 2 view .LVU53
 195              	.LBB89:
 196              	.LBI89:
  58:include/ubtbr/btctl_intf.h **** {
 197              		.loc 2 58 19 view .LVU54
 198              	.LBB90:
  60:include/ubtbr/btctl_intf.h **** 	int rc;
 199              		.loc 2 60 2 view .LVU55
 200              	.LBB91:
 201              	.LBI91:
 202              		.file 4 "include/ubtbr/system.h"
   1:include/ubtbr/system.h **** #ifndef __SYSTEM_H
   2:include/ubtbr/system.h **** #define __SYSTEM_H
   3:include/ubtbr/system.h **** #include <stdint.h>
   4:include/ubtbr/system.h **** 
   5:include/ubtbr/system.h **** static inline uint32_t irq_save_disable(void)
 203              		.loc 4 5 24 view .LVU56
 204              	.LBB92:
   6:include/ubtbr/system.h **** {
   7:include/ubtbr/system.h **** 	uint32_t primask;
 205              		.loc 4 7 2 view .LVU57
   8:include/ubtbr/system.h **** 
   9:include/ubtbr/system.h **** 	__asm__ __volatile__ (
 206              		.loc 4 9 2 view .LVU58
 207              		.syntax unified
 208              	@ 9 "include/ubtbr/system.h" 1
 209 0052 EFF31085 			mrs    r5, primask
 210 0056 72B6     		cpsid  i
 211              	
 212              	@ 0 "" 2
 213              	.LVL12:
  10:include/ubtbr/system.h **** 	"\tmrs    %0, primask\n"
ARM GAS  /tmp/cccOUgNC.s 			page 9


  11:include/ubtbr/system.h **** 	"\tcpsid  i\n"
  12:include/ubtbr/system.h **** 	: "=r" (primask)
  13:include/ubtbr/system.h **** 	:
  14:include/ubtbr/system.h **** 	: "memory");
  15:include/ubtbr/system.h **** 
  16:include/ubtbr/system.h **** 	return primask;
 214              		.loc 4 16 2 view .LVU59
 215              		.loc 4 16 2 is_stmt 0 view .LVU60
 216              		.thumb
 217              		.syntax unified
 218              	.LBE92:
 219              	.LBE91:
  61:include/ubtbr/btctl_intf.h **** 
 220              		.loc 2 61 2 is_stmt 1 view .LVU61
  63:include/ubtbr/btctl_intf.h **** 	irq_restore(flags);
 221              		.loc 2 63 2 view .LVU62
  63:include/ubtbr/btctl_intf.h **** 	irq_restore(flags);
 222              		.loc 2 63 7 is_stmt 0 view .LVU63
 223 0058 1148     		ldr	r0, .L27+12
 224              	.LVL13:
  63:include/ubtbr/btctl_intf.h **** 	irq_restore(flags);
 225              		.loc 2 63 7 view .LVU64
 226 005a 2146     		mov	r1, r4
 227 005c FFF7FEFF 		bl	msg_enqueue
 228              	.LVL14:
  64:include/ubtbr/btctl_intf.h **** 
 229              		.loc 2 64 2 is_stmt 1 view .LVU65
 230              	.LBB93:
 231              	.LBI93:
  17:include/ubtbr/system.h **** }
  18:include/ubtbr/system.h **** 
  19:include/ubtbr/system.h **** static inline void irq_restore(uint32_t primask)
 232              		.loc 4 19 20 view .LVU66
 233              	.LBB94:
  20:include/ubtbr/system.h **** {
  21:include/ubtbr/system.h **** 	__asm__ __volatile__ (
 234              		.loc 4 21 2 view .LVU67
 235              		.syntax unified
 236              	@ 21 "include/ubtbr/system.h" 1
 237 0060 85F31088 		msr primask, r5
 238              	@ 0 "" 2
 239              	.LVL15:
 240              		.loc 4 21 2 is_stmt 0 view .LVU68
 241              		.thumb
 242              		.syntax unified
 243              	.LBE94:
 244              	.LBE93:
  66:include/ubtbr/btctl_intf.h **** }
 245              		.loc 2 66 2 is_stmt 1 view .LVU69
  66:include/ubtbr/btctl_intf.h **** }
 246              		.loc 2 66 2 is_stmt 0 view .LVU70
 247              	.LBE90:
 248              	.LBE89:
 249              	.LBE88:
 250              	.LBE87:
  84:src/btphy/monitor2_state.c **** 		{
 251              		.loc 1 84 5 view .LVU71
ARM GAS  /tmp/cccOUgNC.s 			page 10


 252 0064 0028     		cmp	r0, #0
 253 0066 E4D0     		beq	.L8
  86:src/btphy/monitor2_state.c **** 		}
 254              		.loc 1 86 4 is_stmt 1 view .LVU72
 255 0068 0E48     		ldr	r0, .L27+16
 256 006a FFF7FEFF 		bl	die
 257              	.LVL16:
 258              	.L25:
  79:src/btphy/monitor2_state.c **** 	}
 259              		.loc 1 79 3 view .LVU73
  79:src/btphy/monitor2_state.c **** 	}
 260              		.loc 1 79 52 is_stmt 0 view .LVU74
 261 006e 2269     		ldr	r2, [r4, #16]	@ unaligned
  79:src/btphy/monitor2_state.c **** 	}
 262              		.loc 1 79 29 view .LVU75
 263 0070 0D4B     		ldr	r3, .L27+20
  79:src/btphy/monitor2_state.c **** 	}
 264              		.loc 1 79 3 view .LVU76
 265 0072 0E48     		ldr	r0, .L27+24
 266 0074 595C     		ldrb	r1, [r3, r1]	@ zero_extendqisi2
 267 0076 D2B2     		uxtb	r2, r2
 268 0078 A37E     		ldrb	r3, [r4, #26]	@ zero_extendqisi2
 269 007a FFF7FEFF 		bl	cprintf
 270              	.LVL17:
 271 007e 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 272 0080 D2E7     		b	.L7
 273              	.LVL18:
 274              	.L24:
  69:src/btphy/monitor2_state.c **** 	}
 275              		.loc 1 69 3 is_stmt 1 view .LVU77
 276 0082 1046     		mov	r0, r2
 277 0084 FFF7FEFF 		bl	btphy_adj_clkn_delay
 278              	.LVL19:
  69:src/btphy/monitor2_state.c **** 	}
 279              		.loc 1 69 3 is_stmt 0 view .LVU78
 280 0088 637D     		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 281 008a C8E7     		b	.L6
 282              	.LVL20:
 283              	.L23:
  69:src/btphy/monitor2_state.c **** 	}
 284              		.loc 1 69 3 view .LVU79
 285              	.LBE95:
 286              	.LBE98:
  57:src/btphy/monitor2_state.c **** 	pkt = (btctl_rx_pkt_t *)h->data;
 287              		.loc 1 57 3 is_stmt 1 view .LVU80
 288 008c 0848     		ldr	r0, .L27+28
 289              	.LVL21:
  57:src/btphy/monitor2_state.c **** 	pkt = (btctl_rx_pkt_t *)h->data;
 290              		.loc 1 57 3 is_stmt 0 view .LVU81
 291 008e FFF7FEFF 		bl	die
 292              	.LVL22:
 293              	.L28:
  57:src/btphy/monitor2_state.c **** 	pkt = (btctl_rx_pkt_t *)h->data;
 294              		.loc 1 57 3 view .LVU82
 295 0092 00BF     		.align	2
 296              	.L27:
 297 0094 00000000 		.word	btctl
ARM GAS  /tmp/cccOUgNC.s 			page 11


 298 0098 00000000 		.word	btphy
 299 009c 00000000 		.word	monitor2_rx_cb
 300 00a0 2C000000 		.word	btctl+44
 301 00a4 24000000 		.word	.LC3
 302 00a8 38000000 		.word	.LC1
 303 00ac 18000000 		.word	.LC2
 304 00b0 00000000 		.word	.LC0
 305              		.cfi_endproc
 306              	.LFE32:
 308              		.section	.rodata.str1.4
 309              		.align	2
 310              	.LC4:
 311 003c 6D6F6E69 		.ascii	"monitor2 started\012\000"
 311      746F7232 
 311      20737461 
 311      72746564 
 311      0A00
 312              		.section	.text.monitor2_state_init,"ax",%progbits
 313              		.align	1
 314              		.p2align 2,,3
 315              		.global	monitor2_state_init
 316              		.syntax unified
 317              		.thumb
 318              		.thumb_func
 319              		.fpu softvfp
 321              	monitor2_state_init:
 322              	.LVL23:
 323              	.LFB34:
 104:src/btphy/monitor2_state.c **** 		monitor2_rx_cb, NULL,	// ID rx callback
 105:src/btphy/monitor2_state.c **** 		(1<<RX_F_PAYLOAD)	// wait for header 
 106:src/btphy/monitor2_state.c **** 		|(1<<RX_F_RAW));	// ignore size and crc in payload
 107:src/btphy/monitor2_state.c **** }
 108:src/btphy/monitor2_state.c **** 
 109:src/btphy/monitor2_state.c **** void monitor2_state_init(uint64_t master_bdaddr)
 110:src/btphy/monitor2_state.c **** {
 324              		.loc 1 110 1 is_stmt 1 view -0
 325              		.cfi_startproc
 326              		@ args = 0, pretend = 0, frame = 0
 327              		@ frame_needed = 0, uses_anonymous_args = 0
 328              		.loc 1 110 1 is_stmt 0 view .LVU84
 329 0000 10B5     		push	{r4, lr}
 330              		.cfi_def_cfa_offset 8
 331              		.cfi_offset 4, -8
 332              		.cfi_offset 14, -4
 111:src/btphy/monitor2_state.c **** 	monitor2_state.master_bdaddr = master_bdaddr;
 333              		.loc 1 111 2 is_stmt 1 view .LVU85
 112:src/btphy/monitor2_state.c **** 
 113:src/btphy/monitor2_state.c **** 	/* Initialize basic hopping from master's clock */
 114:src/btphy/monitor2_state.c **** 	btphy_set_mode(BT_MODE_SLAVE, master_bdaddr&0xffffff, 0xff & (master_bdaddr>>24));
 334              		.loc 1 114 2 view .LVU86
 110:src/btphy/monitor2_state.c **** 	monitor2_state.master_bdaddr = master_bdaddr;
 335              		.loc 1 110 1 is_stmt 0 view .LVU87
 336 0002 0146     		mov	r1, r0
 337              		.loc 1 114 2 view .LVU88
 338 0004 0520     		movs	r0, #5
 339              	.LVL24:
 340              		.loc 1 114 2 view .LVU89
ARM GAS  /tmp/cccOUgNC.s 			page 12


 341 0006 0A0E     		lsrs	r2, r1, #24
 342 0008 21F07F41 		bic	r1, r1, #-16777216
 343 000c FFF7FEFF 		bl	btphy_set_mode
 344              	.LVL25:
 115:src/btphy/monitor2_state.c **** 
 116:src/btphy/monitor2_state.c **** 	cprintf("monitor2 started\n");
 345              		.loc 1 116 2 is_stmt 1 view .LVU90
 346 0010 0948     		ldr	r0, .L30
 347 0012 FFF7FEFF 		bl	cprintf
 348              	.LVL26:
 117:src/btphy/monitor2_state.c **** 	btctl_set_state(BTCTL_STATE_CONNECTED, BTCTL_REASON_PAGED);
 349              		.loc 1 117 2 view .LVU91
 350 0016 0221     		movs	r1, #2
 351 0018 0320     		movs	r0, #3
 352 001a FFF7FEFF 		bl	btctl_set_state
 353              	.LVL27:
 118:src/btphy/monitor2_state.c **** 	monitor2_state_schedule_rx(1);
 354              		.loc 1 118 2 view .LVU92
 355              	.LBB99:
 356              	.LBI99:
  97:src/btphy/monitor2_state.c **** {
 357              		.loc 1 97 13 view .LVU93
 358              	.LBB100:
 100:src/btphy/monitor2_state.c **** 
 359              		.loc 1 100 2 view .LVU94
 103:src/btphy/monitor2_state.c **** 		monitor2_rx_cb, NULL,	// ID rx callback
 360              		.loc 1 103 2 view .LVU95
 361              	.LBE100:
 362              	.LBE99:
 119:src/btphy/monitor2_state.c **** }
 363              		.loc 1 119 1 is_stmt 0 view .LVU96
 364 001e BDE81040 		pop	{r4, lr}
 365              		.cfi_restore 14
 366              		.cfi_restore 4
 367              		.cfi_def_cfa_offset 0
 368              	.LBB102:
 369              	.LBB101:
 100:src/btphy/monitor2_state.c **** 
 370              		.loc 1 100 61 view .LVU97
 371 0022 064A     		ldr	r2, .L30+4
 103:src/btphy/monitor2_state.c **** 		monitor2_rx_cb, NULL,	// ID rx callback
 372              		.loc 1 103 2 view .LVU98
 373 0024 0323     		movs	r3, #3
 100:src/btphy/monitor2_state.c **** 
 374              		.loc 1 100 11 view .LVU99
 375 0026 9068     		ldr	r0, [r2, #8]
 103:src/btphy/monitor2_state.c **** 		monitor2_rx_cb, NULL,	// ID rx callback
 376              		.loc 1 103 2 view .LVU100
 377 0028 0549     		ldr	r1, .L30+8
 100:src/btphy/monitor2_state.c **** 
 378              		.loc 1 100 11 view .LVU101
 379 002a C043     		mvns	r0, r0
 380 002c 00F00100 		and	r0, r0, #1
 103:src/btphy/monitor2_state.c **** 		monitor2_rx_cb, NULL,	// ID rx callback
 381              		.loc 1 103 2 view .LVU102
 382 0030 0022     		movs	r2, #0
 383 0032 0230     		adds	r0, r0, #2
ARM GAS  /tmp/cccOUgNC.s 			page 13


 384 0034 FFF7FEBF 		b	rx_task_schedule
 385              	.LVL28:
 386              	.L31:
 103:src/btphy/monitor2_state.c **** 		monitor2_rx_cb, NULL,	// ID rx callback
 387              		.loc 1 103 2 view .LVU103
 388              		.align	2
 389              	.L30:
 390 0038 3C000000 		.word	.LC4
 391 003c 00000000 		.word	btphy
 392 0040 00000000 		.word	monitor2_rx_cb
 393              	.LBE101:
 394              	.LBE102:
 395              		.cfi_endproc
 396              	.LFE34:
 398              		.text
 399              	.Letext0:
 400              		.file 5 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 401              		.file 6 "/usr/include/newlib/sys/_types.h"
 402              		.file 7 "/usr/include/newlib/sys/reent.h"
 403              		.file 8 "/usr/include/newlib/sys/lock.h"
 404              		.file 9 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 405              		.file 10 "../../host/libubertooth/src/ubertooth_interface.h"
 406              		.file 11 "../common/ubertooth.h"
 407              		.file 12 "include/ubtbr/queue.h"
 408              		.file 13 "include/ubtbr/btphy.h"
 409              		.file 14 "include/ubtbr/rx_task.h"
 410              		.file 15 "include/ubtbr/debug.h"
 411              		.file 16 "include/ubtbr/mem_pool.h"
ARM GAS  /tmp/cccOUgNC.s 			page 14


DEFINED SYMBOLS
                            *ABS*:0000000000000000 monitor2_state.c
     /tmp/cccOUgNC.s:16     .rodata.str1.4:0000000000000000 $d
     /tmp/cccOUgNC.s:29     .text.monitor2_rx_cb:0000000000000000 $t
     /tmp/cccOUgNC.s:37     .text.monitor2_rx_cb:0000000000000000 monitor2_rx_cb
     /tmp/cccOUgNC.s:297    .text.monitor2_rx_cb:0000000000000094 $d
     /tmp/cccOUgNC.s:313    .text.monitor2_state_init:0000000000000000 $t
     /tmp/cccOUgNC.s:321    .text.monitor2_state_init:0000000000000000 monitor2_state_init
     /tmp/cccOUgNC.s:390    .text.monitor2_state_init:0000000000000038 $d

UNDEFINED SYMBOLS
mem_pool_free
rx_task_schedule
msg_enqueue
die
cprintf
btphy_adj_clkn_delay
btctl
btphy
btphy_set_mode
btctl_set_state
