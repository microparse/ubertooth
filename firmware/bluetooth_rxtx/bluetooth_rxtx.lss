
bluetooth_rxtx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000078e0  00004000  00004000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000b8e0  0000b8e0  0000b8e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .persistent   00000020  10000000  10000000  00020000  2**0
                  ALLOC
  3 .data         00000afc  10000020  0000b8e8  00010020  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00003128  10000b20  0000c3e4  00010b20  2**3
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00010b1c  2**0
                  CONTENTS, READONLY
  6 .comment      000000a7  00000000  00000000  00010b45  2**0
                  CONTENTS, READONLY
  7 .debug_info   000199a5  00000000  00000000  00010bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 000056bb  00000000  00000000  0002a591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_loc    0000a129  00000000  00000000  0002fc4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 00000b10  00000000  00000000  00039d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   0000c01c  00000000  00000000  0003a888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_str    00004d4c  00000000  00000000  000468a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_frame  00001b88  00000000  00000000  0004b5f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001128  00000000  00000000  0004d178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00004000 <_NVIC_Handler_Functions>:
    4000:	e0 3f 00 10 35 99 00 00 89 99 00 00 45 96 00 00     .?..5.......E...
    4010:	7d 96 00 00 cd 96 00 00 21 97 00 00 00 00 00 00     }.......!.......
    4020:	00 00 00 00 00 00 00 00 00 00 00 00 89 99 00 00     ................
    4030:	89 99 00 00 00 00 00 00 89 99 00 00 89 99 00 00     ................
    4040:	89 99 00 00 b9 4f 00 00 85 7f 00 00 51 98 00 00     .....O......Q...
    4050:	89 99 00 00 89 99 00 00 89 99 00 00 89 99 00 00     ................
    4060:	89 99 00 00 89 99 00 00 89 99 00 00 89 99 00 00     ................
    4070:	89 99 00 00 89 99 00 00 89 99 00 00 89 99 00 00     ................
    4080:	89 99 00 00 89 99 00 00 89 99 00 00 89 99 00 00     ................
    4090:	89 99 00 00 f5 50 00 00 89 99 00 00 89 99 00 00     .....P..........
    40a0:	31 99 00 00 89 99 00 00 09 52 00 00 89 99 00 00     1........R......
    40b0:	89 99 00 00 89 99 00 00 89 99 00 00 89 99 00 00     ................
    40c0:	89 99 00 00 89 99 00 00 89 99 00 00                 ............

000040cc <deregister_tm_clones>:
    40cc:	4803      	ldr	r0, [pc, #12]	; (40dc <deregister_tm_clones+0x10>)
    40ce:	4b04      	ldr	r3, [pc, #16]	; (40e0 <deregister_tm_clones+0x14>)
    40d0:	4283      	cmp	r3, r0
    40d2:	d002      	beq.n	40da <deregister_tm_clones+0xe>
    40d4:	4b03      	ldr	r3, [pc, #12]	; (40e4 <deregister_tm_clones+0x18>)
    40d6:	b103      	cbz	r3, 40da <deregister_tm_clones+0xe>
    40d8:	4718      	bx	r3
    40da:	4770      	bx	lr
    40dc:	10000b1c 	.word	0x10000b1c
    40e0:	10000b1c 	.word	0x10000b1c
    40e4:	00000000 	.word	0x00000000

000040e8 <register_tm_clones>:
    40e8:	4805      	ldr	r0, [pc, #20]	; (4100 <register_tm_clones+0x18>)
    40ea:	4906      	ldr	r1, [pc, #24]	; (4104 <register_tm_clones+0x1c>)
    40ec:	1a0b      	subs	r3, r1, r0
    40ee:	0fd9      	lsrs	r1, r3, #31
    40f0:	eb01 01a3 	add.w	r1, r1, r3, asr #2
    40f4:	1049      	asrs	r1, r1, #1
    40f6:	d002      	beq.n	40fe <register_tm_clones+0x16>
    40f8:	4b03      	ldr	r3, [pc, #12]	; (4108 <register_tm_clones+0x20>)
    40fa:	b103      	cbz	r3, 40fe <register_tm_clones+0x16>
    40fc:	4718      	bx	r3
    40fe:	4770      	bx	lr
    4100:	10000b1c 	.word	0x10000b1c
    4104:	10000b1c 	.word	0x10000b1c
    4108:	00000000 	.word	0x00000000

0000410c <__do_global_dtors_aux>:
    410c:	b510      	push	{r4, lr}
    410e:	4c06      	ldr	r4, [pc, #24]	; (4128 <__do_global_dtors_aux+0x1c>)
    4110:	7823      	ldrb	r3, [r4, #0]
    4112:	b943      	cbnz	r3, 4126 <__do_global_dtors_aux+0x1a>
    4114:	f7ff ffda 	bl	40cc <deregister_tm_clones>
    4118:	4b04      	ldr	r3, [pc, #16]	; (412c <__do_global_dtors_aux+0x20>)
    411a:	b113      	cbz	r3, 4122 <__do_global_dtors_aux+0x16>
    411c:	4804      	ldr	r0, [pc, #16]	; (4130 <__do_global_dtors_aux+0x24>)
    411e:	f3af 8000 	nop.w
    4122:	2301      	movs	r3, #1
    4124:	7023      	strb	r3, [r4, #0]
    4126:	bd10      	pop	{r4, pc}
    4128:	10000b20 	.word	0x10000b20
    412c:	00000000 	.word	0x00000000
    4130:	0000b8bc 	.word	0x0000b8bc

00004134 <frame_dummy>:
    4134:	b508      	push	{r3, lr}
    4136:	4b04      	ldr	r3, [pc, #16]	; (4148 <frame_dummy+0x14>)
    4138:	b11b      	cbz	r3, 4142 <frame_dummy+0xe>
    413a:	4904      	ldr	r1, [pc, #16]	; (414c <frame_dummy+0x18>)
    413c:	4804      	ldr	r0, [pc, #16]	; (4150 <frame_dummy+0x1c>)
    413e:	f3af 8000 	nop.w
    4142:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4146:	e7cf      	b.n	40e8 <register_tm_clones>
    4148:	00000000 	.word	0x00000000
    414c:	10000b24 	.word	0x10000b24
    4150:	0000b8bc 	.word	0x0000b8bc

00004154 <atexit>:
    4154:	2300      	movs	r3, #0
    4156:	4601      	mov	r1, r0
    4158:	461a      	mov	r2, r3
    415a:	4618      	mov	r0, r3
    415c:	f000 b88e 	b.w	427c <__register_exitproc>

00004160 <__libc_fini_array>:
    4160:	b538      	push	{r3, r4, r5, lr}
    4162:	4c0a      	ldr	r4, [pc, #40]	; (418c <__libc_fini_array+0x2c>)
    4164:	4d0a      	ldr	r5, [pc, #40]	; (4190 <__libc_fini_array+0x30>)
    4166:	1b64      	subs	r4, r4, r5
    4168:	10a4      	asrs	r4, r4, #2
    416a:	d00a      	beq.n	4182 <__libc_fini_array+0x22>
    416c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    4170:	3b01      	subs	r3, #1
    4172:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    4176:	3c01      	subs	r4, #1
    4178:	f855 3904 	ldr.w	r3, [r5], #-4
    417c:	4798      	blx	r3
    417e:	2c00      	cmp	r4, #0
    4180:	d1f9      	bne.n	4176 <__libc_fini_array+0x16>
    4182:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4186:	f007 bba3 	b.w	b8d0 <_fini>
    418a:	bf00      	nop
    418c:	0000b8e0 	.word	0x0000b8e0
    4190:	0000b8dc 	.word	0x0000b8dc

00004194 <__libc_init_array>:
    4194:	b570      	push	{r4, r5, r6, lr}
    4196:	4e0d      	ldr	r6, [pc, #52]	; (41cc <__libc_init_array+0x38>)
    4198:	4d0d      	ldr	r5, [pc, #52]	; (41d0 <__libc_init_array+0x3c>)
    419a:	1b76      	subs	r6, r6, r5
    419c:	10b6      	asrs	r6, r6, #2
    419e:	d006      	beq.n	41ae <__libc_init_array+0x1a>
    41a0:	2400      	movs	r4, #0
    41a2:	3401      	adds	r4, #1
    41a4:	f855 3b04 	ldr.w	r3, [r5], #4
    41a8:	4798      	blx	r3
    41aa:	42a6      	cmp	r6, r4
    41ac:	d1f9      	bne.n	41a2 <__libc_init_array+0xe>
    41ae:	4e09      	ldr	r6, [pc, #36]	; (41d4 <__libc_init_array+0x40>)
    41b0:	4d09      	ldr	r5, [pc, #36]	; (41d8 <__libc_init_array+0x44>)
    41b2:	f007 fb83 	bl	b8bc <_init>
    41b6:	1b76      	subs	r6, r6, r5
    41b8:	10b6      	asrs	r6, r6, #2
    41ba:	d006      	beq.n	41ca <__libc_init_array+0x36>
    41bc:	2400      	movs	r4, #0
    41be:	3401      	adds	r4, #1
    41c0:	f855 3b04 	ldr.w	r3, [r5], #4
    41c4:	4798      	blx	r3
    41c6:	42a6      	cmp	r6, r4
    41c8:	d1f9      	bne.n	41be <__libc_init_array+0x2a>
    41ca:	bd70      	pop	{r4, r5, r6, pc}
    41cc:	0000b8c8 	.word	0x0000b8c8
    41d0:	0000b8c8 	.word	0x0000b8c8
    41d4:	0000b8d0 	.word	0x0000b8d0
    41d8:	0000b8c8 	.word	0x0000b8c8

000041dc <memset>:
    41dc:	b4f0      	push	{r4, r5, r6, r7}
    41de:	0786      	lsls	r6, r0, #30
    41e0:	d046      	beq.n	4270 <memset+0x94>
    41e2:	1e54      	subs	r4, r2, #1
    41e4:	2a00      	cmp	r2, #0
    41e6:	d03c      	beq.n	4262 <memset+0x86>
    41e8:	b2ca      	uxtb	r2, r1
    41ea:	4603      	mov	r3, r0
    41ec:	e002      	b.n	41f4 <memset+0x18>
    41ee:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
    41f2:	d336      	bcc.n	4262 <memset+0x86>
    41f4:	f803 2b01 	strb.w	r2, [r3], #1
    41f8:	079d      	lsls	r5, r3, #30
    41fa:	d1f8      	bne.n	41ee <memset+0x12>
    41fc:	2c03      	cmp	r4, #3
    41fe:	d929      	bls.n	4254 <memset+0x78>
    4200:	b2cd      	uxtb	r5, r1
    4202:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    4206:	2c0f      	cmp	r4, #15
    4208:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    420c:	d933      	bls.n	4276 <memset+0x9a>
    420e:	f1a4 0610 	sub.w	r6, r4, #16
    4212:	0936      	lsrs	r6, r6, #4
    4214:	f103 0720 	add.w	r7, r3, #32
    4218:	eb07 1706 	add.w	r7, r7, r6, lsl #4
    421c:	f103 0210 	add.w	r2, r3, #16
    4220:	e942 5504 	strd	r5, r5, [r2, #-16]
    4224:	e942 5502 	strd	r5, r5, [r2, #-8]
    4228:	3210      	adds	r2, #16
    422a:	42ba      	cmp	r2, r7
    422c:	d1f8      	bne.n	4220 <memset+0x44>
    422e:	1c72      	adds	r2, r6, #1
    4230:	f014 0f0c 	tst.w	r4, #12
    4234:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    4238:	f004 060f 	and.w	r6, r4, #15
    423c:	d013      	beq.n	4266 <memset+0x8a>
    423e:	1f33      	subs	r3, r6, #4
    4240:	f023 0303 	bic.w	r3, r3, #3
    4244:	3304      	adds	r3, #4
    4246:	4413      	add	r3, r2
    4248:	f842 5b04 	str.w	r5, [r2], #4
    424c:	4293      	cmp	r3, r2
    424e:	d1fb      	bne.n	4248 <memset+0x6c>
    4250:	f006 0403 	and.w	r4, r6, #3
    4254:	b12c      	cbz	r4, 4262 <memset+0x86>
    4256:	b2c9      	uxtb	r1, r1
    4258:	441c      	add	r4, r3
    425a:	f803 1b01 	strb.w	r1, [r3], #1
    425e:	429c      	cmp	r4, r3
    4260:	d1fb      	bne.n	425a <memset+0x7e>
    4262:	bcf0      	pop	{r4, r5, r6, r7}
    4264:	4770      	bx	lr
    4266:	4634      	mov	r4, r6
    4268:	4613      	mov	r3, r2
    426a:	2c00      	cmp	r4, #0
    426c:	d1f3      	bne.n	4256 <memset+0x7a>
    426e:	e7f8      	b.n	4262 <memset+0x86>
    4270:	4614      	mov	r4, r2
    4272:	4603      	mov	r3, r0
    4274:	e7c2      	b.n	41fc <memset+0x20>
    4276:	461a      	mov	r2, r3
    4278:	4626      	mov	r6, r4
    427a:	e7e0      	b.n	423e <memset+0x62>

0000427c <__register_exitproc>:
    427c:	b4f0      	push	{r4, r5, r6, r7}
    427e:	4c17      	ldr	r4, [pc, #92]	; (42dc <__register_exitproc+0x60>)
    4280:	6825      	ldr	r5, [r4, #0]
    4282:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
    4286:	b30c      	cbz	r4, 42cc <__register_exitproc+0x50>
    4288:	6865      	ldr	r5, [r4, #4]
    428a:	2d1f      	cmp	r5, #31
    428c:	dc23      	bgt.n	42d6 <__register_exitproc+0x5a>
    428e:	b938      	cbnz	r0, 42a0 <__register_exitproc+0x24>
    4290:	2000      	movs	r0, #0
    4292:	1c6b      	adds	r3, r5, #1
    4294:	3502      	adds	r5, #2
    4296:	6063      	str	r3, [r4, #4]
    4298:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
    429c:	bcf0      	pop	{r4, r5, r6, r7}
    429e:	4770      	bx	lr
    42a0:	2601      	movs	r6, #1
    42a2:	eb04 0c85 	add.w	ip, r4, r5, lsl #2
    42a6:	f8cc 2088 	str.w	r2, [ip, #136]	; 0x88
    42aa:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
    42ae:	fa06 f205 	lsl.w	r2, r6, r5
    42b2:	4317      	orrs	r7, r2
    42b4:	2802      	cmp	r0, #2
    42b6:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
    42ba:	f8cc 3108 	str.w	r3, [ip, #264]	; 0x108
    42be:	d1e7      	bne.n	4290 <__register_exitproc+0x14>
    42c0:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
    42c4:	431a      	orrs	r2, r3
    42c6:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    42ca:	e7e1      	b.n	4290 <__register_exitproc+0x14>
    42cc:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
    42d0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    42d4:	e7d8      	b.n	4288 <__register_exitproc+0xc>
    42d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    42da:	e7df      	b.n	429c <__register_exitproc+0x20>
    42dc:	0000ab90 	.word	0x0000ab90

000042e0 <register_fini>:
    42e0:	4b02      	ldr	r3, [pc, #8]	; (42ec <register_fini+0xc>)
    42e2:	b113      	cbz	r3, 42ea <register_fini+0xa>
    42e4:	4802      	ldr	r0, [pc, #8]	; (42f0 <register_fini+0x10>)
    42e6:	f7ff bf35 	b.w	4154 <atexit>
    42ea:	4770      	bx	lr
    42ec:	00000000 	.word	0x00000000
    42f0:	00004161 	.word	0x00004161

000042f4 <reverse8>:
	dio_ssp_stop();
	cs_trigger_disable();
}

static uint8_t reverse8(uint8_t data)
{
    42f4:	b510      	push	{r4, lr}
	uint8_t reversed = 0;

	for(size_t i=0; i<8; i++)
    42f6:	2300      	movs	r3, #0
{
    42f8:	4601      	mov	r1, r0
	uint8_t reversed = 0;
    42fa:	4618      	mov	r0, r3
	{
		reversed |= ((data >> i) & 0x01) << (7-i);
    42fc:	fa41 f203 	asr.w	r2, r1, r3
    4300:	f1c3 0407 	rsb	r4, r3, #7
    4304:	f002 0201 	and.w	r2, r2, #1
    4308:	40a2      	lsls	r2, r4
	for(size_t i=0; i<8; i++)
    430a:	3301      	adds	r3, #1
		reversed |= ((data >> i) & 0x01) << (7-i);
    430c:	4302      	orrs	r2, r0
	for(size_t i=0; i<8; i++)
    430e:	2b08      	cmp	r3, #8
		reversed |= ((data >> i) & 0x01) << (7-i);
    4310:	b2d0      	uxtb	r0, r2
	for(size_t i=0; i<8; i++)
    4312:	d1f3      	bne.n	42fc <reverse8+0x8>
	}

	return reversed;
}
    4314:	bd10      	pop	{r4, pc}
    4316:	0000      	movs	r0, r0

00004318 <le_set_access_address>:
	cc2400_set(IOCFG, gio_save);
}
#endif

/* set LE access address */
static void le_set_access_address(u32 aa) {
    4318:	b510      	push	{r4, lr}
	u32 aa_rev;

	le.access_address = aa;
    431a:	4c04      	ldr	r4, [pc, #16]	; (432c <le_set_access_address+0x14>)
    431c:	6020      	str	r0, [r4, #0]
	aa_rev = rbit(aa);
    431e:	f005 fb41 	bl	99a4 <rbit>
	le.syncl = aa_rev & 0xffff;
    4322:	80e0      	strh	r0, [r4, #6]
	le.synch = aa_rev >> 16;
    4324:	0c00      	lsrs	r0, r0, #16
    4326:	80a0      	strh	r0, [r4, #4]
}
    4328:	bd10      	pop	{r4, pc}
    432a:	bf00      	nop
    432c:	10000450 	.word	0x10000450

00004330 <cc2400_rx>:
{
    4330:	b538      	push	{r3, r4, r5, lr}
	if((modulation == MOD_BT_BASIC_RATE) || (modulation == MOD_BT_LOW_ENERGY)) {
    4332:	4b26      	ldr	r3, [pc, #152]	; (43cc <cc2400_rx+0x9c>)
    4334:	4c26      	ldr	r4, [pc, #152]	; (43d0 <cc2400_rx+0xa0>)
    4336:	781a      	ldrb	r2, [r3, #0]
    4338:	b112      	cbz	r2, 4340 <cc2400_rx+0x10>
    433a:	781a      	ldrb	r2, [r3, #0]
    433c:	2a01      	cmp	r2, #1
    433e:	d126      	bne.n	438e <cc2400_rx+0x5e>
		if (modulation == MOD_BT_BASIC_RATE) {
    4340:	781a      	ldrb	r2, [r3, #0]
    4342:	2a00      	cmp	r2, #0
    4344:	d03f      	beq.n	43c6 <cc2400_rx+0x96>
		} else if (modulation == MOD_BT_LOW_ENERGY) {
    4346:	781b      	ldrb	r3, [r3, #0]
			mdmctrl = 0x0040; // 250 kHz frequency deviation
    4348:	2b01      	cmp	r3, #1
    434a:	bf14      	ite	ne
    434c:	2500      	movne	r5, #0
    434e:	2540      	moveq	r5, #64	; 0x40
		cc2400_set(MANAND,  0x7fff);
    4350:	f647 71ff 	movw	r1, #32767	; 0x7fff
    4354:	200d      	movs	r0, #13
    4356:	f005 fc1a 	bl	9b8e <cc2400_set>
		cc2400_set(LMTST,   0x2b22);
    435a:	f642 3122 	movw	r1, #11042	; 0x2b22
    435e:	2012      	movs	r0, #18
    4360:	f005 fc15 	bl	9b8e <cc2400_set>
		cc2400_set(MDMTST0, 0x134b); // without PRNG
    4364:	f241 314b 	movw	r1, #4939	; 0x134b
    4368:	2014      	movs	r0, #20
    436a:	f005 fc10 	bl	9b8e <cc2400_set>
		cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    436e:	f240 1101 	movw	r1, #257	; 0x101
    4372:	2020      	movs	r0, #32
    4374:	f005 fc0b 	bl	9b8e <cc2400_set>
		cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    4378:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
    437c:	2002      	movs	r0, #2
    437e:	3901      	subs	r1, #1
    4380:	b289      	uxth	r1, r1
    4382:	f005 fc04 	bl	9b8e <cc2400_set>
		cc2400_set(MDMCTRL, mdmctrl);
    4386:	4629      	mov	r1, r5
    4388:	2003      	movs	r0, #3
    438a:	f005 fc00 	bl	9b8e <cc2400_set>
	cs_threshold_calc_and_set(channel);
    438e:	f8b4 004c 	ldrh.w	r0, [r4, #76]	; 0x4c
    4392:	b280      	uxth	r0, r0
    4394:	f002 ff88 	bl	72a8 <cs_threshold_calc_and_set>
	clkn_start();
    4398:	f003 f81e 	bl	73d8 <clkn_start>
	while (!(cc2400_status() & XOSC16M_STABLE));
    439c:	f005 fc90 	bl	9cc0 <cc2400_status>
    43a0:	0642      	lsls	r2, r0, #25
    43a2:	d5fb      	bpl.n	439c <cc2400_rx+0x6c>
	cc2400_strobe(SFSON);
    43a4:	2061      	movs	r0, #97	; 0x61
    43a6:	f005 fc92 	bl	9cce <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    43aa:	f005 fc89 	bl	9cc0 <cc2400_status>
    43ae:	0743      	lsls	r3, r0, #29
    43b0:	d5fb      	bpl.n	43aa <cc2400_rx+0x7a>
	cc2400_strobe(SRX);
    43b2:	2062      	movs	r0, #98	; 0x62
    43b4:	f005 fc8b 	bl	9cce <cc2400_strobe>
	PAEN_SET;
    43b8:	2280      	movs	r2, #128	; 0x80
    43ba:	4b06      	ldr	r3, [pc, #24]	; (43d4 <cc2400_rx+0xa4>)
    43bc:	601a      	str	r2, [r3, #0]
	HGM_SET;
    43be:	f44f 7280 	mov.w	r2, #256	; 0x100
    43c2:	601a      	str	r2, [r3, #0]
}
    43c4:	bd38      	pop	{r3, r4, r5, pc}
			mdmctrl = 0x0029; // 160 kHz frequency deviation
    43c6:	2529      	movs	r5, #41	; 0x29
    43c8:	e7c2      	b.n	4350 <cc2400_rx+0x20>
    43ca:	bf00      	nop
    43cc:	10000b3c 	.word	0x10000b3c
    43d0:	10000450 	.word	0x10000450
    43d4:	2009c058 	.word	0x2009c058

000043d8 <cc2400_rx_sync>:
{
    43d8:	b570      	push	{r4, r5, r6, lr}
	if (modulation == MOD_BT_BASIC_RATE) {
    43da:	4b29      	ldr	r3, [pc, #164]	; (4480 <cc2400_rx_sync+0xa8>)
{
    43dc:	4604      	mov	r4, r0
	if (modulation == MOD_BT_BASIC_RATE) {
    43de:	781a      	ldrb	r2, [r3, #0]
    43e0:	2a00      	cmp	r2, #0
    43e2:	d048      	beq.n	4476 <cc2400_rx_sync+0x9e>
	} else if (modulation == MOD_BT_LOW_ENERGY) {
    43e4:	781b      	ldrb	r3, [r3, #0]
    43e6:	2b01      	cmp	r3, #1
    43e8:	d144      	bne.n	4474 <cc2400_rx_sync+0x9c>
		mdmctrl = 0x0040; // 250 kHz frequency deviation
    43ea:	2540      	movs	r5, #64	; 0x40
		grmdm = 0x0561; // un-buffered mode, packet w/ sync word detection
    43ec:	f240 5661 	movw	r6, #1377	; 0x561
	cc2400_set(MANAND,  0x7fff);
    43f0:	f647 71ff 	movw	r1, #32767	; 0x7fff
    43f4:	200d      	movs	r0, #13
    43f6:	f005 fbca 	bl	9b8e <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    43fa:	f642 3122 	movw	r1, #11042	; 0x2b22
    43fe:	2012      	movs	r0, #18
    4400:	f005 fbc5 	bl	9b8e <cc2400_set>
	cc2400_set(MDMTST0, 0x124b);
    4404:	f241 214b 	movw	r1, #4683	; 0x124b
    4408:	2014      	movs	r0, #20
    440a:	f005 fbc0 	bl	9b8e <cc2400_set>
	cc2400_set(GRMDM,   grmdm);
    440e:	4631      	mov	r1, r6
    4410:	2020      	movs	r0, #32
    4412:	f005 fbbc 	bl	9b8e <cc2400_set>
	cc2400_set(SYNCL,   sync & 0xffff);
    4416:	b2a1      	uxth	r1, r4
    4418:	202c      	movs	r0, #44	; 0x2c
    441a:	f005 fbb8 	bl	9b8e <cc2400_set>
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);
    441e:	0c21      	lsrs	r1, r4, #16
	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    4420:	4c18      	ldr	r4, [pc, #96]	; (4484 <cc2400_rx_sync+0xac>)
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);
    4422:	202d      	movs	r0, #45	; 0x2d
    4424:	f005 fbb3 	bl	9b8e <cc2400_set>
	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    4428:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
    442c:	2002      	movs	r0, #2
    442e:	3901      	subs	r1, #1
    4430:	b289      	uxth	r1, r1
    4432:	f005 fbac 	bl	9b8e <cc2400_set>
	cc2400_set(MDMCTRL, mdmctrl);
    4436:	4629      	mov	r1, r5
    4438:	2003      	movs	r0, #3
    443a:	f005 fba8 	bl	9b8e <cc2400_set>
	cs_threshold_calc_and_set(channel);
    443e:	f8b4 004c 	ldrh.w	r0, [r4, #76]	; 0x4c
    4442:	b280      	uxth	r0, r0
    4444:	f002 ff30 	bl	72a8 <cs_threshold_calc_and_set>
	clkn_start();
    4448:	f002 ffc6 	bl	73d8 <clkn_start>
	while (!(cc2400_status() & XOSC16M_STABLE));
    444c:	f005 fc38 	bl	9cc0 <cc2400_status>
    4450:	0642      	lsls	r2, r0, #25
    4452:	d5fb      	bpl.n	444c <cc2400_rx_sync+0x74>
	cc2400_strobe(SFSON);
    4454:	2061      	movs	r0, #97	; 0x61
    4456:	f005 fc3a 	bl	9cce <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    445a:	f005 fc31 	bl	9cc0 <cc2400_status>
    445e:	0743      	lsls	r3, r0, #29
    4460:	d5fb      	bpl.n	445a <cc2400_rx_sync+0x82>
	cc2400_strobe(SRX);
    4462:	2062      	movs	r0, #98	; 0x62
    4464:	f005 fc33 	bl	9cce <cc2400_strobe>
	PAEN_SET;
    4468:	2280      	movs	r2, #128	; 0x80
    446a:	4b07      	ldr	r3, [pc, #28]	; (4488 <cc2400_rx_sync+0xb0>)
    446c:	601a      	str	r2, [r3, #0]
	HGM_SET;
    446e:	f44f 7280 	mov.w	r2, #256	; 0x100
    4472:	601a      	str	r2, [r3, #0]
}
    4474:	bd70      	pop	{r4, r5, r6, pc}
		mdmctrl = 0x0029; // 160 kHz frequency deviation
    4476:	2529      	movs	r5, #41	; 0x29
		grmdm = 0x0461; // un-buffered mode, packet w/ sync word detection
    4478:	f240 4661 	movw	r6, #1121	; 0x461
    447c:	e7b8      	b.n	43f0 <cc2400_rx_sync+0x18>
    447e:	bf00      	nop
    4480:	10000b3c 	.word	0x10000b3c
    4484:	10000450 	.word	0x10000450
    4488:	2009c058 	.word	0x2009c058

0000448c <enqueue>:
{
    448c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    448e:	4606      	mov	r6, r0
    4490:	460f      	mov	r7, r1
	usb_pkt_rx* f = usb_enqueue();
    4492:	f002 fe25 	bl	70e0 <usb_enqueue>
	if (f == NULL) {
    4496:	4d1d      	ldr	r5, [pc, #116]	; (450c <enqueue+0x80>)
    4498:	4604      	mov	r4, r0
    449a:	b920      	cbnz	r0, 44a6 <enqueue+0x1a>
		status |= FIFO_OVERFLOW;
    449c:	786b      	ldrb	r3, [r5, #1]
    449e:	f043 0304 	orr.w	r3, r3, #4
    44a2:	706b      	strb	r3, [r5, #1]
}
    44a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if(type == SPECAN) {
    44a6:	2e04      	cmp	r6, #4
	f->pkt_type = type;
    44a8:	7006      	strb	r6, [r0, #0]
	if(type == SPECAN) {
    44aa:	d119      	bne.n	44e0 <enqueue+0x54>
		f->clk100ns = CLK100NS;
    44ac:	f640 4135 	movw	r1, #3125	; 0xc35
		f->clkn_high = (clkn >> 20) & 0xff;
    44b0:	4a17      	ldr	r2, [pc, #92]	; (4510 <enqueue+0x84>)
    44b2:	6813      	ldr	r3, [r2, #0]
    44b4:	0d1b      	lsrs	r3, r3, #20
    44b6:	70c3      	strb	r3, [r0, #3]
		f->clk100ns = CLK100NS;
    44b8:	6813      	ldr	r3, [r2, #0]
    44ba:	4a16      	ldr	r2, [pc, #88]	; (4514 <enqueue+0x88>)
    44bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
    44c0:	6812      	ldr	r2, [r2, #0]
    44c2:	fb01 2303 	mla	r3, r1, r3, r2
    44c6:	6043      	str	r3, [r0, #4]
	memcpy(f->data, buf, DMA_SIZE);
    44c8:	2232      	movs	r2, #50	; 0x32
    44ca:	4639      	mov	r1, r7
    44cc:	f104 000e 	add.w	r0, r4, #14
    44d0:	f006 fa94 	bl	a9fc <memcpy>
	f->status = status;
    44d4:	786b      	ldrb	r3, [r5, #1]
	return 1;
    44d6:	2001      	movs	r0, #1
	f->status = status;
    44d8:	7063      	strb	r3, [r4, #1]
	status = 0;
    44da:	2300      	movs	r3, #0
    44dc:	706b      	strb	r3, [r5, #1]
	return 1;
    44de:	e7e1      	b.n	44a4 <enqueue+0x18>
		f->clkn_high = idle_buf_clkn_high;
    44e0:	78ab      	ldrb	r3, [r5, #2]
    44e2:	70c3      	strb	r3, [r0, #3]
		f->clk100ns = idle_buf_clk100ns;
    44e4:	686b      	ldr	r3, [r5, #4]
    44e6:	6043      	str	r3, [r0, #4]
		f->channel = (uint8_t)((idle_buf_channel - 2402) & 0xff);
    44e8:	892b      	ldrh	r3, [r5, #8]
    44ea:	3b62      	subs	r3, #98	; 0x62
    44ec:	7083      	strb	r3, [r0, #2]
		f->rssi_min = rssi_min;
    44ee:	4b0a      	ldr	r3, [pc, #40]	; (4518 <enqueue+0x8c>)
    44f0:	781b      	ldrb	r3, [r3, #0]
    44f2:	7243      	strb	r3, [r0, #9]
		f->rssi_max = rssi_max;
    44f4:	4b09      	ldr	r3, [pc, #36]	; (451c <enqueue+0x90>)
    44f6:	781b      	ldrb	r3, [r3, #0]
    44f8:	7203      	strb	r3, [r0, #8]
		f->rssi_avg = rssi_get_avg(idle_buf_channel);
    44fa:	8928      	ldrh	r0, [r5, #8]
    44fc:	b280      	uxth	r0, r0
    44fe:	f002 febd 	bl	727c <rssi_get_avg>
		f->rssi_count = rssi_count;
    4502:	4b07      	ldr	r3, [pc, #28]	; (4520 <enqueue+0x94>)
		f->rssi_avg = rssi_get_avg(idle_buf_channel);
    4504:	72a0      	strb	r0, [r4, #10]
		f->rssi_count = rssi_count;
    4506:	781b      	ldrb	r3, [r3, #0]
    4508:	72e3      	strb	r3, [r4, #11]
    450a:	e7dd      	b.n	44c8 <enqueue+0x3c>
    450c:	10000b3c 	.word	0x10000b3c
    4510:	1000136c 	.word	0x1000136c
    4514:	40004008 	.word	0x40004008
    4518:	10001352 	.word	0x10001352
    451c:	10001350 	.word	0x10001350
    4520:	100017ee 	.word	0x100017ee

00004524 <cc2400_idle>:
{
    4524:	b510      	push	{r4, lr}
	cc2400_strobe(SRFOFF);
    4526:	2064      	movs	r0, #100	; 0x64
    4528:	f005 fbd1 	bl	9cce <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    452c:	f005 fbc8 	bl	9cc0 <cc2400_status>
    4530:	f010 0404 	ands.w	r4, r0, #4
    4534:	d1fa      	bne.n	452c <cc2400_idle+0x8>
	PAEN_CLR;
    4536:	2280      	movs	r2, #128	; 0x80
    4538:	4b21      	ldr	r3, [pc, #132]	; (45c0 <cc2400_idle+0x9c>)
	RXLED_CLR;
    453a:	2110      	movs	r1, #16
	PAEN_CLR;
    453c:	601a      	str	r2, [r3, #0]
	HGM_CLR;
    453e:	f44f 7280 	mov.w	r2, #256	; 0x100
    4542:	601a      	str	r2, [r3, #0]
	RXLED_CLR;
    4544:	f843 1c20 	str.w	r1, [r3, #-32]
	TXLED_CLR;
    4548:	f843 2c20 	str.w	r2, [r3, #-32]
	USRLED_CLR;
    454c:	2202      	movs	r2, #2
    454e:	f843 2c20 	str.w	r2, [r3, #-32]
	clkn_stop();
    4552:	f002 ff19 	bl	7388 <clkn_stop>
	dio_ssp_stop();
    4556:	f003 f831 	bl	75bc <dio_ssp_stop>
	cs_reset();
    455a:	f002 ff03 	bl	7364 <cs_reset>
	rssi_reset();
    455e:	f002 fe29 	bl	71b4 <rssi_reset>
	channel = 2441;
    4562:	f640 1189 	movw	r1, #2441	; 0x989
	hop_mode = HOP_NONE;
    4566:	4b17      	ldr	r3, [pc, #92]	; (45c4 <cc2400_idle+0xa0>)
	channel = 2441;
    4568:	4a17      	ldr	r2, [pc, #92]	; (45c8 <cc2400_idle+0xa4>)
	hop_mode = HOP_NONE;
    456a:	729c      	strb	r4, [r3, #10]
	do_hop = 0;
    456c:	72dc      	strb	r4, [r3, #11]
	channel = 2441;
    456e:	f8a2 104c 	strh.w	r1, [r2, #76]	; 0x4c
	hop_timeout = 158;
    4572:	219e      	movs	r1, #158	; 0x9e
	hop_direct_channel = 0;
    4574:	819c      	strh	r4, [r3, #12]
	hop_timeout = 158;
    4576:	f8a2 104e 	strh.w	r1, [r2, #78]	; 0x4e
	le_adv_channel = 2402;
    457a:	f640 1162 	movw	r1, #2402	; 0x962
	requested_channel = 0;
    457e:	81dc      	strh	r4, [r3, #14]
	le_adv_channel = 2402;
    4580:	f8a2 1050 	strh.w	r1, [r2, #80]	; 0x50
	idle_buf_clkn_high = 0;
    4584:	709c      	strb	r4, [r3, #2]
	idle_buf_clk100ns = 0;
    4586:	605c      	str	r4, [r3, #4]
	idle_buf_channel = 0;
    4588:	811c      	strh	r4, [r3, #8]
	dma_discard = 0;
    458a:	741c      	strb	r4, [r3, #16]
	status = 0;
    458c:	705c      	strb	r4, [r3, #1]
	mode = MODE_IDLE;
    458e:	745c      	strb	r4, [r3, #17]
	requested_mode = MODE_IDLE;
    4590:	749c      	strb	r4, [r3, #18]
	jam_mode = JAM_NONE;
    4592:	74dc      	strb	r4, [r3, #19]
	ego_mode = EGO_FOLLOW;
    4594:	751c      	strb	r4, [r3, #20]
	modulation = MOD_BT_BASIC_RATE;
    4596:	701c      	strb	r4, [r3, #0]
	low_freq = 2400;
    4598:	f44f 6316 	mov.w	r3, #2400	; 0x960
    459c:	f8a2 3052 	strh.w	r3, [r2, #82]	; 0x52
	high_freq = 2483;
    45a0:	f640 13b3 	movw	r3, #2483	; 0x9b3
    45a4:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
	rssi_threshold = -30;
    45a8:	23e2      	movs	r3, #226	; 0xe2
	target.address = 0;
    45aa:	2000      	movs	r0, #0
    45ac:	2100      	movs	r1, #0
	rssi_threshold = -30;
    45ae:	f882 3056 	strb.w	r3, [r2, #86]	; 0x56
	target.address = 0;
    45b2:	4b06      	ldr	r3, [pc, #24]	; (45cc <cc2400_idle+0xa8>)
    45b4:	e9c3 0100 	strd	r0, r1, [r3]
	target.syncword = 0;
    45b8:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    45bc:	bd10      	pop	{r4, pc}
    45be:	bf00      	nop
    45c0:	2009c05c 	.word	0x2009c05c
    45c4:	10000b3c 	.word	0x10000b3c
    45c8:	10000450 	.word	0x10000450
    45cc:	10001868 	.word	0x10001868

000045d0 <cb_follow_le>:



/* low energy connection following
 * follows a known AA around */
int cb_follow_le() {
    45d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel)];
    45d4:	4f3c      	ldr	r7, [pc, #240]	; (46c8 <cb_follow_le+0xf8>)
    45d6:	4e3d      	ldr	r6, [pc, #244]	; (46cc <cb_follow_le+0xfc>)
    45d8:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
    45dc:	4c3c      	ldr	r4, [pc, #240]	; (46d0 <cb_follow_le+0x100>)
    45de:	b280      	uxth	r0, r0
    45e0:	f002 fc02 	bl	6de8 <btle_channel_index>

	u32 access_address = 0;
    45e4:	2200      	movs	r2, #0
    45e6:	4631      	mov	r1, r6
	for (i = 0; i < 31; ++i) {
    45e8:	4613      	mov	r3, r2
	int idx = whitening_index[btle_channel_index(channel)];
    45ea:	5c20      	ldrb	r0, [r4, r0]
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
    45ec:	f816 5b01 	ldrb.w	r5, [r6], #1
	for (i = 0; i < 31; ++i) {
    45f0:	3301      	adds	r3, #1
		access_address |= (unpacked[i] << 31);
    45f2:	07ed      	lsls	r5, r5, #31
	for (i = 0; i < 31; ++i) {
    45f4:	2b1f      	cmp	r3, #31
		access_address |= (unpacked[i] << 31);
    45f6:	ea45 0252 	orr.w	r2, r5, r2, lsr #1
	for (i = 0; i < 31; ++i) {
    45fa:	d1f7      	bne.n	45ec <cb_follow_le+0x1c>
	}

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
    45fc:	683e      	ldr	r6, [r7, #0]
		access_address |= (unpacked[i] << 31);
    45fe:	5ccd      	ldrb	r5, [r1, r3]
    4600:	07ed      	lsls	r5, r5, #31
    4602:	ea45 0252 	orr.w	r2, r5, r2, lsr #1
		if (access_address == le.access_address) {
    4606:	4296      	cmp	r6, r2
    4608:	d158      	bne.n	46bc <cb_follow_le+0xec>
						bit ^= whitening[idx];
						idx = (idx + 1) % sizeof(whitening);
					}
					byte |= bit << k;
				}
				idle_rxbuf[j] = byte;
    460a:	4e32      	ldr	r6, [pc, #200]	; (46d4 <cb_follow_le+0x104>)
    460c:	3b1f      	subs	r3, #31
    460e:	440b      	add	r3, r1
						idx = (idx + 1) % sizeof(whitening);
    4610:	f04f 097f 	mov.w	r9, #127	; 0x7f
			for (j = 0; j < 46; ++j) {
    4614:	2100      	movs	r1, #0
    4616:	4635      	mov	r5, r6
				u8 byte = 0;
    4618:	f04f 0e00 	mov.w	lr, #0
	for (i = 0; i < 31; ++i) {
    461c:	4698      	mov	r8, r3
				for (k = 0; k < 8; k++) {
    461e:	46f4      	mov	ip, lr
					if (j >= 4) { // unwhiten data bytes
    4620:	2903      	cmp	r1, #3
					int bit = unpacked[offset];
    4622:	f818 2b01 	ldrb.w	r2, [r8], #1
					if (j >= 4) { // unwhiten data bytes
    4626:	dd0c      	ble.n	4642 <cb_follow_le+0x72>
						bit ^= whitening[idx];
    4628:	eb04 0a00 	add.w	sl, r4, r0
    462c:	f89a a028 	ldrb.w	sl, [sl, #40]	; 0x28
						idx = (idx + 1) % sizeof(whitening);
    4630:	3001      	adds	r0, #1
						bit ^= whitening[idx];
    4632:	ea82 020a 	eor.w	r2, r2, sl
						idx = (idx + 1) % sizeof(whitening);
    4636:	fbb0 faf9 	udiv	sl, r0, r9
    463a:	ebca 1aca 	rsb	sl, sl, sl, lsl #7
    463e:	eba0 000a 	sub.w	r0, r0, sl
					byte |= bit << k;
    4642:	fa02 f20c 	lsl.w	r2, r2, ip
				for (k = 0; k < 8; k++) {
    4646:	f10c 0c01 	add.w	ip, ip, #1
					byte |= bit << k;
    464a:	ea42 020e 	orr.w	r2, r2, lr
				for (k = 0; k < 8; k++) {
    464e:	f1bc 0f08 	cmp.w	ip, #8
					byte |= bit << k;
    4652:	fa5f fe82 	uxtb.w	lr, r2
				for (k = 0; k < 8; k++) {
    4656:	d1e3      	bne.n	4620 <cb_follow_le+0x50>
				idle_rxbuf[j] = byte;
    4658:	6832      	ldr	r2, [r6, #0]
    465a:	3308      	adds	r3, #8
    465c:	f802 e001 	strb.w	lr, [r2, r1]
			for (j = 0; j < 46; ++j) {
    4660:	3101      	adds	r1, #1
    4662:	292e      	cmp	r1, #46	; 0x2e
    4664:	d1d8      	bne.n	4618 <cb_follow_le+0x48>
			}

			// verify CRC
			if (le.crc_verify) {
    4666:	693b      	ldr	r3, [r7, #16]
    4668:	b96b      	cbnz	r3, 4686 <cb_follow_le+0xb6>
				if (calc_crc != wire_crc) // skip packets with a bad CRC
					break;
			}

			// send to PC
			enqueue(LE_PACKET, (uint8_t*)idle_rxbuf);
    466a:	2001      	movs	r0, #1
    466c:	6829      	ldr	r1, [r5, #0]
    466e:	f7ff ff0d 	bl	448c <enqueue>
			RXLED_SET;
    4672:	2210      	movs	r2, #16
    4674:	4b18      	ldr	r3, [pc, #96]	; (46d8 <cb_follow_le+0x108>)
    4676:	601a      	str	r2, [r3, #0]

			packet_cb((uint8_t*)idle_rxbuf);
    4678:	4b18      	ldr	r3, [pc, #96]	; (46dc <cb_follow_le+0x10c>)
    467a:	6828      	ldr	r0, [r5, #0]
    467c:	699b      	ldr	r3, [r3, #24]
    467e:	4798      	blx	r3
			break;
		}
	}

	return 1;
}
    4680:	2001      	movs	r0, #1
    4682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				int len		 = (idle_rxbuf[5] & 0x3f) + 2;
    4686:	6833      	ldr	r3, [r6, #0]
				u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, (uint8_t*)idle_rxbuf + 4, len);
    4688:	68f8      	ldr	r0, [r7, #12]
				int len		 = (idle_rxbuf[5] & 0x3f) + 2;
    468a:	795c      	ldrb	r4, [r3, #5]
				u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, (uint8_t*)idle_rxbuf + 4, len);
    468c:	6831      	ldr	r1, [r6, #0]
    468e:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    4692:	1ca2      	adds	r2, r4, #2
    4694:	3104      	adds	r1, #4
    4696:	f002 fc2f 	bl	6ef8 <btle_crcgen_lut>
				u32 wire_crc = (idle_rxbuf[4+len+2] << 16)
    469a:	6832      	ldr	r2, [r6, #0]
    469c:	f104 0308 	add.w	r3, r4, #8
    46a0:	5cd1      	ldrb	r1, [r2, r3]
							 | (idle_rxbuf[4+len+1] << 8)
    46a2:	6832      	ldr	r2, [r6, #0]
    46a4:	1de3      	adds	r3, r4, #7
    46a6:	5cd3      	ldrb	r3, [r2, r3]
							 |  idle_rxbuf[4+len+0];
    46a8:	6832      	ldr	r2, [r6, #0]
    46aa:	3406      	adds	r4, #6
    46ac:	5d12      	ldrb	r2, [r2, r4]
							 | (idle_rxbuf[4+len+1] << 8)
    46ae:	021b      	lsls	r3, r3, #8
    46b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
							 |  idle_rxbuf[4+len+0];
    46b4:	4313      	orrs	r3, r2
				if (calc_crc != wire_crc) // skip packets with a bad CRC
    46b6:	4298      	cmp	r0, r3
    46b8:	d1e2      	bne.n	4680 <cb_follow_le+0xb0>
    46ba:	e7d6      	b.n	466a <cb_follow_le+0x9a>
	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
    46bc:	3301      	adds	r3, #1
    46be:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
    46c2:	d19c      	bne.n	45fe <cb_follow_le+0x2e>
    46c4:	e7dc      	b.n	4680 <cb_follow_le+0xb0>
    46c6:	bf00      	nop
    46c8:	10000450 	.word	0x10000450
    46cc:	100014cc 	.word	0x100014cc
    46d0:	0000abbc 	.word	0x0000abbc
    46d4:	100014c8 	.word	0x100014c8
    46d8:	2009c038 	.word	0x2009c038
    46dc:	10000b3c 	.word	0x10000b3c

000046e0 <connection_follow_cb>:

/**
 * Called when we receive a packet in connection following mode.
 */
void connection_follow_cb(u8 *packet) {
    46e0:	b538      	push	{r3, r4, r5, lr}
	u8 header = packet[HEADER_IDX];
	u8 *data_len = &packet[DATA_LEN_IDX];
	u8 *data = &packet[DATA_START_IDX];
	// u8 *crc = &packet[DATA_START_IDX + *data_len];

	if (le.link_state == LINK_CONN_PENDING) {
    46e2:	4b56      	ldr	r3, [pc, #344]	; (483c <connection_follow_cb+0x15c>)
void connection_follow_cb(u8 *packet) {
    46e4:	4605      	mov	r5, r0
	if (le.link_state == LINK_CONN_PENDING) {
    46e6:	7d1a      	ldrb	r2, [r3, #20]
    46e8:	461c      	mov	r4, r3
    46ea:	2a02      	cmp	r2, #2
    46ec:	d111      	bne.n	4712 <connection_follow_cb+0x32>
		// We received a packet in the connection pending state, so now the device *should* be connected
		le.link_state = LINK_CONNECTED;
    46ee:	2203      	movs	r2, #3
    46f0:	751a      	strb	r2, [r3, #20]
		le.conn_epoch = clkn;
    46f2:	4a53      	ldr	r2, [pc, #332]	; (4840 <connection_follow_cb+0x160>)
    46f4:	6812      	ldr	r2, [r2, #0]
    46f6:	619a      	str	r2, [r3, #24]
		le.interval_timer = le.conn_interval - 1;
    46f8:	8bda      	ldrh	r2, [r3, #30]
    46fa:	3a01      	subs	r2, #1
    46fc:	b292      	uxth	r2, r2
    46fe:	839a      	strh	r2, [r3, #28]
		le.conn_count = 0;
    4700:	2200      	movs	r2, #0
    4702:	841a      	strh	r2, [r3, #32]
		le.update_pending = 0;
    4704:	629a      	str	r2, [r3, #40]	; 0x28

		// hue hue hue
		if (jam_mode != JAM_NONE)
    4706:	4b4f      	ldr	r3, [pc, #316]	; (4844 <connection_follow_cb+0x164>)
    4708:	7cda      	ldrb	r2, [r3, #19]
    470a:	b10a      	cbz	r2, 4710 <connection_follow_cb+0x30>
			le_jam_count = JAM_COUNT_DEFAULT;
    470c:	2228      	movs	r2, #40	; 0x28
    470e:	61da      	str	r2, [r3, #28]

			// Hop to the initial channel immediately
			do_hop = 1;
		}
	}
}
    4710:	bd38      	pop	{r3, r4, r5, pc}
	} else if (le.link_state == LINK_CONNECTED) {
    4712:	2a03      	cmp	r2, #3
	u8 header = packet[HEADER_IDX];
    4714:	7903      	ldrb	r3, [r0, #4]
	} else if (le.link_state == LINK_CONNECTED) {
    4716:	d13a      	bne.n	478e <connection_follow_cb+0xae>
		if (le.update_pending && le.conn_count == le.update_instant) {
    4718:	6aa2      	ldr	r2, [r4, #40]	; 0x28
		u8 llid =  header & 0x03;
    471a:	f003 0303 	and.w	r3, r3, #3
		if (le.update_pending && le.conn_count == le.update_instant) {
    471e:	b1a2      	cbz	r2, 474a <connection_follow_cb+0x6a>
    4720:	8c22      	ldrh	r2, [r4, #32]
    4722:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
    4724:	b292      	uxth	r2, r2
    4726:	4291      	cmp	r1, r2
    4728:	d10f      	bne.n	474a <connection_follow_cb+0x6a>
			le.conn_epoch = clkn;
    472a:	4a45      	ldr	r2, [pc, #276]	; (4840 <connection_follow_cb+0x160>)
    472c:	6812      	ldr	r2, [r2, #0]
    472e:	61a2      	str	r2, [r4, #24]
			le.conn_interval = le.interval_update;
    4730:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
    4732:	83e2      	strh	r2, [r4, #30]
			le.interval_timer = le.interval_update - 1;
    4734:	3a01      	subs	r2, #1
    4736:	b292      	uxth	r2, r2
    4738:	83a2      	strh	r2, [r4, #28]
			le.win_size = le.win_size_update;
    473a:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
    473e:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
			le.win_offset = le.win_offset_update;
    4742:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    4744:	84a2      	strh	r2, [r4, #36]	; 0x24
			le.update_pending = 0;
    4746:	2200      	movs	r2, #0
    4748:	62a2      	str	r2, [r4, #40]	; 0x28
		if (llid == 0x03 && data[0] == 0x00) {
    474a:	2b03      	cmp	r3, #3
    474c:	d1e0      	bne.n	4710 <connection_follow_cb+0x30>
    474e:	79ab      	ldrb	r3, [r5, #6]
    4750:	2b00      	cmp	r3, #0
    4752:	d1dd      	bne.n	4710 <connection_follow_cb+0x30>
			le.win_size_update = packet[7];
    4754:	79eb      	ldrb	r3, [r5, #7]
    4756:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
			le.win_offset_update = packet[8] + ((u16)packet[9] << 8);
    475a:	7a6a      	ldrb	r2, [r5, #9]
    475c:	7a2b      	ldrb	r3, [r5, #8]
    475e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    4762:	8663      	strh	r3, [r4, #50]	; 0x32
			le.interval_update = packet[10] + ((u16)packet[11] << 8);
    4764:	7aea      	ldrb	r2, [r5, #11]
    4766:	7aab      	ldrb	r3, [r5, #10]
    4768:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    476c:	85e3      	strh	r3, [r4, #46]	; 0x2e
			le.update_instant = packet[16] + ((u16)packet[17] << 8);
    476e:	7c6a      	ldrb	r2, [r5, #17]
    4770:	7c2b      	ldrb	r3, [r5, #16]
    4772:	eb03 2302 	add.w	r3, r3, r2, lsl #8
			if (le.update_instant - le.conn_count < 32767)
    4776:	8c22      	ldrh	r2, [r4, #32]
			le.update_instant = packet[16] + ((u16)packet[17] << 8);
    4778:	b29b      	uxth	r3, r3
			if (le.update_instant - le.conn_count < 32767)
    477a:	b292      	uxth	r2, r2
			le.update_instant = packet[16] + ((u16)packet[17] << 8);
    477c:	85a3      	strh	r3, [r4, #44]	; 0x2c
			if (le.update_instant - le.conn_count < 32767)
    477e:	1a9b      	subs	r3, r3, r2
    4780:	f647 72fe 	movw	r2, #32766	; 0x7ffe
    4784:	4293      	cmp	r3, r2
    4786:	dcc3      	bgt.n	4710 <connection_follow_cb+0x30>
				le.update_pending = 1;
    4788:	2301      	movs	r3, #1
    478a:	62a3      	str	r3, [r4, #40]	; 0x28
    478c:	e7c0      	b.n	4710 <connection_follow_cb+0x30>
	} else if (le.link_state == LINK_LISTENING) {
    478e:	2a01      	cmp	r2, #1
    4790:	d1be      	bne.n	4710 <connection_follow_cb+0x30>
		if (pkt_type == 0x05) {
    4792:	f003 030f 	and.w	r3, r3, #15
    4796:	2b05      	cmp	r3, #5
    4798:	d1ba      	bne.n	4710 <connection_follow_cb+0x30>
			if (*data_len != 34)
    479a:	7943      	ldrb	r3, [r0, #5]
    479c:	2b22      	cmp	r3, #34	; 0x22
    479e:	d1b7      	bne.n	4710 <connection_follow_cb+0x30>
			conn_interval = (packet[29] << 8) | packet[28];
    47a0:	7f42      	ldrb	r2, [r0, #29]
    47a2:	7f03      	ldrb	r3, [r0, #28]
    47a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (conn_interval < 6 || conn_interval > 3200)
    47a8:	f640 427a 	movw	r2, #3194	; 0xc7a
    47ac:	3b06      	subs	r3, #6
    47ae:	b29b      	uxth	r3, r3
    47b0:	4293      	cmp	r3, r2
    47b2:	d8ad      	bhi.n	4710 <connection_follow_cb+0x30>
			if (le.target_set &&
    47b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
    47b6:	bb73      	cbnz	r3, 4816 <connection_follow_cb+0x136>
			le.link_state = LINK_CONN_PENDING;
    47b8:	2302      	movs	r3, #2
    47ba:	7523      	strb	r3, [r4, #20]
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC
    47bc:	2300      	movs	r3, #0
    47be:	6123      	str	r3, [r4, #16]
				aa |= packet[18+i] << (i*8);
    47c0:	7d28      	ldrb	r0, [r5, #20]
    47c2:	7cab      	ldrb	r3, [r5, #18]
    47c4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    47c8:	7ce8      	ldrb	r0, [r5, #19]
    47ca:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    47ce:	7d68      	ldrb	r0, [r5, #21]
			le_set_access_address(aa);
    47d0:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
    47d4:	f7ff fda0 	bl	4318 <le_set_access_address>
						| (packet[CRC_INIT+1] << 8)
    47d8:	7de8      	ldrb	r0, [r5, #23]
			le.crc_init = (packet[CRC_INIT+2] << 16)
    47da:	7e2b      	ldrb	r3, [r5, #24]
						| (packet[CRC_INIT+1] << 8)
    47dc:	0200      	lsls	r0, r0, #8
    47de:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
						|  packet[CRC_INIT+0];
    47e2:	7dab      	ldrb	r3, [r5, #22]
    47e4:	4318      	orrs	r0, r3
			le.crc_init = (packet[CRC_INIT+2] << 16)
    47e6:	60a0      	str	r0, [r4, #8]
			le.crc_init_reversed = rbit(le.crc_init);
    47e8:	f005 f8dc 	bl	99a4 <rbit>
			le.win_size = packet[WIN_SIZE];
    47ec:	7e6b      	ldrb	r3, [r5, #25]
			le.crc_init_reversed = rbit(le.crc_init);
    47ee:	60e0      	str	r0, [r4, #12]
			le.win_size = packet[WIN_SIZE];
    47f0:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
			le.win_offset = packet[WIN_OFFSET];
    47f4:	7eab      	ldrb	r3, [r5, #26]
    47f6:	84a3      	strh	r3, [r4, #36]	; 0x24
			le.conn_interval = (packet[CONN_INTERVAL+1] << 8)
    47f8:	7f6a      	ldrb	r2, [r5, #29]
							 |  packet[CONN_INTERVAL+0];
    47fa:	7f2b      	ldrb	r3, [r5, #28]
    47fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			do_hop = 1;
    4800:	2201      	movs	r2, #1
			le.conn_interval = (packet[CONN_INTERVAL+1] << 8)
    4802:	83e3      	strh	r3, [r4, #30]
			le.channel_increment = packet[CHANNEL_INC] & 0x1f;
    4804:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
    4808:	f003 031f 	and.w	r3, r3, #31
    480c:	75a3      	strb	r3, [r4, #22]
			le.channel_idx = le.channel_increment;
    480e:	7563      	strb	r3, [r4, #21]
			do_hop = 1;
    4810:	4b0c      	ldr	r3, [pc, #48]	; (4844 <connection_follow_cb+0x164>)
    4812:	72da      	strb	r2, [r3, #11]
    4814:	e77c      	b.n	4710 <connection_follow_cb+0x30>
				memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
    4816:	2206      	movs	r2, #6
    4818:	1881      	adds	r1, r0, r2
    481a:	f104 0038 	add.w	r0, r4, #56	; 0x38
    481e:	f006 f8bd 	bl	a99c <memcmp>
			if (le.target_set &&
    4822:	2800      	cmp	r0, #0
    4824:	d0c8      	beq.n	47b8 <connection_follow_cb+0xd8>
				memcmp(le.target, &packet[12], 6)) {  // Target address doesn't match Advertiser.
    4826:	2206      	movs	r2, #6
    4828:	f105 010c 	add.w	r1, r5, #12
    482c:	f104 0038 	add.w	r0, r4, #56	; 0x38
    4830:	f006 f8b4 	bl	a99c <memcmp>
				memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
    4834:	2800      	cmp	r0, #0
    4836:	d0bf      	beq.n	47b8 <connection_follow_cb+0xd8>
    4838:	e76a      	b.n	4710 <connection_follow_cb+0x30>
    483a:	bf00      	nop
    483c:	10000450 	.word	0x10000450
    4840:	1000136c 	.word	0x1000136c
    4844:	10000b3c 	.word	0x10000b3c

00004848 <vendor_request_handler>:
{
    4848:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
    484c:	460e      	mov	r6, r1
    484e:	4615      	mov	r5, r2
    4850:	461c      	mov	r4, r3
    4852:	2849      	cmp	r0, #73	; 0x49
    4854:	f200 837b 	bhi.w	4f4e <vendor_request_handler+0x706>
    4858:	e8df f010 	tbh	[pc, r0, lsl #1]
    485c:	004a0113 	.word	0x004a0113
    4860:	00550050 	.word	0x00550050
    4864:	0061005b 	.word	0x0061005b
    4868:	00690066 	.word	0x00690066
    486c:	0072006e 	.word	0x0072006e
    4870:	00ce0077 	.word	0x00ce0077
    4874:	011800d9 	.word	0x011800d9
    4878:	007d0083 	.word	0x007d0083
    487c:	008d0088 	.word	0x008d0088
    4880:	00940092 	.word	0x00940092
    4884:	00c4009a 	.word	0x00c4009a
    4888:	00ca00c7 	.word	0x00ca00c7
    488c:	01150111 	.word	0x01150111
    4890:	011b0379 	.word	0x011b0379
    4894:	00a6009e 	.word	0x00a6009e
    4898:	00b000b3 	.word	0x00b000b3
    489c:	014700b6 	.word	0x014700b6
    48a0:	01650139 	.word	0x01650139
    48a4:	01700169 	.word	0x01700169
    48a8:	01ce0172 	.word	0x01ce0172
    48ac:	02250208 	.word	0x02250208
    48b0:	02750265 	.word	0x02750265
    48b4:	00810280 	.word	0x00810280
    48b8:	028b0287 	.word	0x028b0287
    48bc:	02980291 	.word	0x02980291
    48c0:	020c02a4 	.word	0x020c02a4
    48c4:	02ad021a 	.word	0x02ad021a
    48c8:	015702e5 	.word	0x015702e5
    48cc:	037902fa 	.word	0x037902fa
    48d0:	036602b4 	.word	0x036602b4
    48d4:	01f1036a 	.word	0x01f1036a
    48d8:	02300204 	.word	0x02300204
    48dc:	02c90379 	.word	0x02c90379
    48e0:	013602cb 	.word	0x013602cb
    48e4:	023702db 	.word	0x023702db
    48e8:	02ef0362 	.word	0x02ef0362
    48ec:	0376036f 	.word	0x0376036f
		requested_mode = MODE_RX_SYMBOLS;
    48f0:	2001      	movs	r0, #1
    48f2:	4bb2      	ldr	r3, [pc, #712]	; (4bbc <vendor_request_handler+0x374>)
    48f4:	7498      	strb	r0, [r3, #18]
		*data_len = 0;
    48f6:	2300      	movs	r3, #0
		*data_len = 10;
    48f8:	6023      	str	r3, [r4, #0]
		break;
    48fa:	e19e      	b.n	4c3a <vendor_request_handler+0x3f2>
		hop_mode = HOP_BLUETOOTH;
    48fc:	2202      	movs	r2, #2
    48fe:	4baf      	ldr	r3, [pc, #700]	; (4bbc <vendor_request_handler+0x374>)
    4900:	729a      	strb	r2, [r3, #10]
		requested_mode = MODE_TX_GENERIC;
    4902:	749a      	strb	r2, [r3, #18]
    4904:	e0bd      	b.n	4a82 <vendor_request_handler+0x23a>
		data[0] = (USRLED) ? 1 : 0;
    4906:	4bae      	ldr	r3, [pc, #696]	; (4bc0 <vendor_request_handler+0x378>)
    4908:	681b      	ldr	r3, [r3, #0]
    490a:	f3c3 0340 	ubfx	r3, r3, #1, #1
		data[0] = le.crc_verify ? 1 : 0;
    490e:	702b      	strb	r3, [r5, #0]
		*data_len = 1;
    4910:	e048      	b.n	49a4 <vendor_request_handler+0x15c>
		if (request_params[0])
    4912:	2302      	movs	r3, #2
    4914:	880a      	ldrh	r2, [r1, #0]
		if (request_params[0])
    4916:	b1e2      	cbz	r2, 4952 <vendor_request_handler+0x10a>
			CC1V8_SET;
    4918:	4aaa      	ldr	r2, [pc, #680]	; (4bc4 <vendor_request_handler+0x37c>)
			HGM_CLR;
    491a:	6013      	str	r3, [r2, #0]
    491c:	e01f      	b.n	495e <vendor_request_handler+0x116>
		data[0] = (RXLED) ? 1 : 0;
    491e:	4ba8      	ldr	r3, [pc, #672]	; (4bc0 <vendor_request_handler+0x378>)
    4920:	681b      	ldr	r3, [r3, #0]
    4922:	f3c3 1300 	ubfx	r3, r3, #4, #1
    4926:	e7f2      	b.n	490e <vendor_request_handler+0xc6>
		if (request_params[0])
    4928:	2310      	movs	r3, #16
    492a:	880a      	ldrh	r2, [r1, #0]
    492c:	e7f3      	b.n	4916 <vendor_request_handler+0xce>
		data[0] = (TXLED) ? 1 : 0;
    492e:	4ba4      	ldr	r3, [pc, #656]	; (4bc0 <vendor_request_handler+0x378>)
		data[0] = (HGM) ? 1 : 0;
    4930:	681b      	ldr	r3, [r3, #0]
    4932:	f3c3 2300 	ubfx	r3, r3, #8, #1
    4936:	e7ea      	b.n	490e <vendor_request_handler+0xc6>
		if (request_params[0])
    4938:	f44f 7380 	mov.w	r3, #256	; 0x100
    493c:	880a      	ldrh	r2, [r1, #0]
    493e:	e7ea      	b.n	4916 <vendor_request_handler+0xce>
		data[0] = (CC1V8) ? 1 : 0;
    4940:	4b9f      	ldr	r3, [pc, #636]	; (4bc0 <vendor_request_handler+0x378>)
    4942:	681b      	ldr	r3, [r3, #0]
    4944:	f3c3 2340 	ubfx	r3, r3, #9, #1
    4948:	e7e1      	b.n	490e <vendor_request_handler+0xc6>
		if (request_params[0])
    494a:	f44f 7300 	mov.w	r3, #512	; 0x200
    494e:	880a      	ldrh	r2, [r1, #0]
    4950:	e7e1      	b.n	4916 <vendor_request_handler+0xce>
			CC1V8_CLR;
    4952:	4a9d      	ldr	r2, [pc, #628]	; (4bc8 <vendor_request_handler+0x380>)
    4954:	e7e1      	b.n	491a <vendor_request_handler+0xd2>
		get_part_num(data, data_len);
    4956:	4621      	mov	r1, r4
    4958:	4610      	mov	r0, r2
    495a:	f005 fa9d 	bl	9e98 <get_part_num>
	return 1;
    495e:	2001      	movs	r0, #1
		break;
    4960:	e16b      	b.n	4c3a <vendor_request_handler+0x3f2>
		get_device_serial(data, data_len);
    4962:	4621      	mov	r1, r4
    4964:	4610      	mov	r0, r2
    4966:	f005 fab1 	bl	9ecc <get_device_serial>
		break;
    496a:	e7f8      	b.n	495e <vendor_request_handler+0x116>
		data[0] = (PAEN) ? 1 : 0;
    496c:	4b97      	ldr	r3, [pc, #604]	; (4bcc <vendor_request_handler+0x384>)
    496e:	681b      	ldr	r3, [r3, #0]
    4970:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    4974:	e7cb      	b.n	490e <vendor_request_handler+0xc6>
		if (request_params[0])
    4976:	2380      	movs	r3, #128	; 0x80
    4978:	880a      	ldrh	r2, [r1, #0]
		if (request_params[0])
    497a:	b13a      	cbz	r2, 498c <vendor_request_handler+0x144>
			HGM_SET;
    497c:	4a94      	ldr	r2, [pc, #592]	; (4bd0 <vendor_request_handler+0x388>)
    497e:	e7cc      	b.n	491a <vendor_request_handler+0xd2>
		data[0] = (HGM) ? 1 : 0;
    4980:	4b92      	ldr	r3, [pc, #584]	; (4bcc <vendor_request_handler+0x384>)
    4982:	e7d5      	b.n	4930 <vendor_request_handler+0xe8>
		if (request_params[0])
    4984:	f44f 7380 	mov.w	r3, #256	; 0x100
    4988:	880a      	ldrh	r2, [r1, #0]
    498a:	e7f6      	b.n	497a <vendor_request_handler+0x132>
			HGM_CLR;
    498c:	4a91      	ldr	r2, [pc, #580]	; (4bd4 <vendor_request_handler+0x38c>)
    498e:	e7c4      	b.n	491a <vendor_request_handler+0xd2>
		requested_mode = MODE_TX_TEST;
    4990:	2203      	movs	r2, #3
    4992:	4b8a      	ldr	r3, [pc, #552]	; (4bbc <vendor_request_handler+0x374>)
		requested_mode = MODE_XMAS;
    4994:	749a      	strb	r2, [r3, #18]
    4996:	e7e2      	b.n	495e <vendor_request_handler+0x116>
		data[0] = cc2400_get(FREND) & 0x7;
    4998:	2005      	movs	r0, #5
    499a:	f005 f8ef 	bl	9b7c <cc2400_get>
    499e:	f000 0007 	and.w	r0, r0, #7
    49a2:	7028      	strb	r0, [r5, #0]
			*data_len = 1;
    49a4:	2001      	movs	r0, #1
    49a6:	e0c0      	b.n	4b2a <vendor_request_handler+0x2e2>
		if( request_params[0] < 8 ) {
    49a8:	8809      	ldrh	r1, [r1, #0]
    49aa:	2907      	cmp	r1, #7
    49ac:	f200 82cf 	bhi.w	4f4e <vendor_request_handler+0x706>
			cc2400_set(FREND, 8 | request_params[0]);
    49b0:	2005      	movs	r0, #5
    49b2:	f041 0108 	orr.w	r1, r1, #8
		cc2400_set(request_params[0] & 0xff, request_params[1]);
    49b6:	f005 f8ea 	bl	9b8e <cc2400_set>
		break;
    49ba:	e7d0      	b.n	495e <vendor_request_handler+0x116>
		requested_mode = MODE_RANGE_TEST;
    49bc:	2205      	movs	r2, #5
    49be:	4b7f      	ldr	r3, [pc, #508]	; (4bbc <vendor_request_handler+0x374>)
    49c0:	e7e8      	b.n	4994 <vendor_request_handler+0x14c>
		requested_mode = MODE_REPEATER;
    49c2:	2206      	movs	r2, #6
    49c4:	4b7d      	ldr	r3, [pc, #500]	; (4bbc <vendor_request_handler+0x374>)
    49c6:	e7e5      	b.n	4994 <vendor_request_handler+0x14c>
		data[0] = rr.valid;
    49c8:	4b83      	ldr	r3, [pc, #524]	; (4bd8 <vendor_request_handler+0x390>)
    49ca:	781a      	ldrb	r2, [r3, #0]
    49cc:	702a      	strb	r2, [r5, #0]
		data[1] = rr.request_pa;
    49ce:	785a      	ldrb	r2, [r3, #1]
    49d0:	706a      	strb	r2, [r5, #1]
		data[2] = rr.request_num;
    49d2:	789a      	ldrb	r2, [r3, #2]
    49d4:	70aa      	strb	r2, [r5, #2]
		data[3] = rr.reply_pa;
    49d6:	78da      	ldrb	r2, [r3, #3]
    49d8:	70ea      	strb	r2, [r5, #3]
		data[4] = rr.reply_num;
    49da:	791b      	ldrb	r3, [r3, #4]
    49dc:	712b      	strb	r3, [r5, #4]
		*data_len = 5;
    49de:	2305      	movs	r3, #5
		*data_len = 0;
    49e0:	6023      	str	r3, [r4, #0]
		break;
    49e2:	e7bc      	b.n	495e <vendor_request_handler+0x116>
		requested_mode = MODE_IDLE;
    49e4:	2200      	movs	r2, #0
    49e6:	4b75      	ldr	r3, [pc, #468]	; (4bbc <vendor_request_handler+0x374>)
    49e8:	e7d4      	b.n	4994 <vendor_request_handler+0x14c>
		data[0] = modulation;
    49ea:	4b74      	ldr	r3, [pc, #464]	; (4bbc <vendor_request_handler+0x374>)
		data[0] = cs_threshold_req;
    49ec:	781b      	ldrb	r3, [r3, #0]
    49ee:	e78e      	b.n	490e <vendor_request_handler+0xc6>
		modulation = request_params[0];
    49f0:	780a      	ldrb	r2, [r1, #0]
    49f2:	4b72      	ldr	r3, [pc, #456]	; (4bbc <vendor_request_handler+0x374>)
    49f4:	701a      	strb	r2, [r3, #0]
		break;
    49f6:	e7b2      	b.n	495e <vendor_request_handler+0x116>
		data[0] = channel & 0xFF;
    49f8:	4b78      	ldr	r3, [pc, #480]	; (4bdc <vendor_request_handler+0x394>)
    49fa:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
    49fe:	702a      	strb	r2, [r5, #0]
		data[1] = (channel >> 8) & 0xFF;
    4a00:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
    4a04:	f3c3 2307 	ubfx	r3, r3, #8, #8
		data[1] = 0x37;
    4a08:	706b      	strb	r3, [r5, #1]
		*data_len = 2;
    4a0a:	2302      	movs	r3, #2
    4a0c:	e7e8      	b.n	49e0 <vendor_request_handler+0x198>
		requested_channel = request_params[0];
    4a0e:	880a      	ldrh	r2, [r1, #0]
		if (requested_channel > MAX_FREQ) {
    4a10:	f640 21ea 	movw	r1, #2794	; 0xaea
		requested_channel = request_params[0];
    4a14:	4b69      	ldr	r3, [pc, #420]	; (4bbc <vendor_request_handler+0x374>)
    4a16:	81da      	strh	r2, [r3, #14]
		if (requested_channel > MAX_FREQ) {
    4a18:	89da      	ldrh	r2, [r3, #14]
    4a1a:	b292      	uxth	r2, r2
    4a1c:	428a      	cmp	r2, r1
    4a1e:	d918      	bls.n	4a52 <vendor_request_handler+0x20a>
			hop_mode = HOP_SWEEP;
    4a20:	2201      	movs	r2, #1
    4a22:	729a      	strb	r2, [r3, #10]
			requested_channel = 2402;
    4a24:	f640 1262 	movw	r2, #2402	; 0x962
			requested_channel = MIN(requested_channel, MAX_FREQ);
    4a28:	81da      	strh	r2, [r3, #14]
		le_adv_channel = requested_channel;
    4a2a:	89d9      	ldrh	r1, [r3, #14]
    4a2c:	4a6b      	ldr	r2, [pc, #428]	; (4bdc <vendor_request_handler+0x394>)
    4a2e:	b289      	uxth	r1, r1
    4a30:	f8a2 1050 	strh.w	r1, [r2, #80]	; 0x50
		if (mode != MODE_BT_FOLLOW_LE) {
    4a34:	7c59      	ldrb	r1, [r3, #17]
    4a36:	2909      	cmp	r1, #9
    4a38:	d091      	beq.n	495e <vendor_request_handler+0x116>
			channel = requested_channel;
    4a3a:	89d9      	ldrh	r1, [r3, #14]
    4a3c:	b289      	uxth	r1, r1
    4a3e:	f8a2 104c 	strh.w	r1, [r2, #76]	; 0x4c
			requested_channel = 0;
    4a42:	2100      	movs	r1, #0
    4a44:	81d9      	strh	r1, [r3, #14]
			cs_threshold_calc_and_set(channel);
    4a46:	f8b2 004c 	ldrh.w	r0, [r2, #76]	; 0x4c
		cs_threshold_calc_and_set(channel);
    4a4a:	b280      	uxth	r0, r0
    4a4c:	f002 fc2c 	bl	72a8 <cs_threshold_calc_and_set>
		break;
    4a50:	e785      	b.n	495e <vendor_request_handler+0x116>
			hop_mode = HOP_NONE;
    4a52:	2200      	movs	r2, #0
    4a54:	729a      	strb	r2, [r3, #10]
			requested_channel = MAX(requested_channel, MIN_FREQ);
    4a56:	f640 02dc 	movw	r2, #2268	; 0x8dc
    4a5a:	89d9      	ldrh	r1, [r3, #14]
    4a5c:	b289      	uxth	r1, r1
    4a5e:	4291      	cmp	r1, r2
			requested_channel = MIN(requested_channel, MAX_FREQ);
    4a60:	f640 21e9 	movw	r1, #2793	; 0xae9
			requested_channel = MAX(requested_channel, MIN_FREQ);
    4a64:	bf84      	itt	hi
    4a66:	89da      	ldrhhi	r2, [r3, #14]
    4a68:	b292      	uxthhi	r2, r2
    4a6a:	81da      	strh	r2, [r3, #14]
			requested_channel = MIN(requested_channel, MAX_FREQ);
    4a6c:	89da      	ldrh	r2, [r3, #14]
    4a6e:	b292      	uxth	r2, r2
    4a70:	428a      	cmp	r2, r1
    4a72:	bf96      	itet	ls
    4a74:	89da      	ldrhls	r2, [r3, #14]
    4a76:	f640 22ea 	movwhi	r2, #2794	; 0xaea
    4a7a:	b292      	uxthls	r2, r2
    4a7c:	e7d4      	b.n	4a28 <vendor_request_handler+0x1e0>
		set_isp();
    4a7e:	f005 fa57 	bl	9f30 <set_isp>
		*data_len = 0;
    4a82:	2300      	movs	r3, #0
    4a84:	e7ac      	b.n	49e0 <vendor_request_handler+0x198>
		bootloader_ctrl = DFU_MODE;
    4a86:	4b56      	ldr	r3, [pc, #344]	; (4be0 <vendor_request_handler+0x398>)
    4a88:	4a56      	ldr	r2, [pc, #344]	; (4be4 <vendor_request_handler+0x39c>)
    4a8a:	601a      	str	r2, [r3, #0]
		requested_mode = MODE_RESET;
    4a8c:	220b      	movs	r2, #11
    4a8e:	4b4b      	ldr	r3, [pc, #300]	; (4bbc <vendor_request_handler+0x374>)
    4a90:	e780      	b.n	4994 <vendor_request_handler+0x14c>
		if (request_params[0] < 2049 || request_params[0] > 3072 ||
    4a92:	f46f 6000 	mvn.w	r0, #2048	; 0x800
    4a96:	880a      	ldrh	r2, [r1, #0]
    4a98:	1813      	adds	r3, r2, r0
    4a9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    4a9e:	f080 8256 	bcs.w	4f4e <vendor_request_handler+0x706>
				request_params[1] < 2049 || request_params[1] > 3072 ||
    4aa2:	884b      	ldrh	r3, [r1, #2]
		if (request_params[0] < 2049 || request_params[0] > 3072 ||
    4aa4:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    4aa8:	1859      	adds	r1, r3, r1
    4aaa:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    4aae:	f080 824e 	bcs.w	4f4e <vendor_request_handler+0x706>
				request_params[1] < 2049 || request_params[1] > 3072 ||
    4ab2:	429a      	cmp	r2, r3
    4ab4:	f200 824b 	bhi.w	4f4e <vendor_request_handler+0x706>
		low_freq = request_params[0];
    4ab8:	4948      	ldr	r1, [pc, #288]	; (4bdc <vendor_request_handler+0x394>)
    4aba:	f8a1 2052 	strh.w	r2, [r1, #82]	; 0x52
		high_freq = request_params[1];
    4abe:	f8a1 3054 	strh.w	r3, [r1, #84]	; 0x54
		requested_mode = MODE_SPECAN;
    4ac2:	2204      	movs	r2, #4
    4ac4:	4b3d      	ldr	r3, [pc, #244]	; (4bbc <vendor_request_handler+0x374>)
    4ac6:	e71c      	b.n	4902 <vendor_request_handler+0xba>
		requested_mode = MODE_RX_GENERIC;
    4ac8:	220f      	movs	r2, #15
    4aca:	4b3c      	ldr	r3, [pc, #240]	; (4bbc <vendor_request_handler+0x374>)
    4acc:	e719      	b.n	4902 <vendor_request_handler+0xba>
		if (request_params[0] > 256)
    4ace:	880b      	ldrh	r3, [r1, #0]
    4ad0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    4ad4:	f200 823b 	bhi.w	4f4e <vendor_request_handler+0x706>
		rssi_threshold = 54 - request_params[0];
    4ad8:	4a40      	ldr	r2, [pc, #256]	; (4bdc <vendor_request_handler+0x394>)
    4ada:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    4ade:	b25b      	sxtb	r3, r3
    4ae0:	f882 3056 	strb.w	r3, [r2, #86]	; 0x56
		requested_mode = MODE_LED_SPECAN;
    4ae4:	2207      	movs	r2, #7
    4ae6:	4b35      	ldr	r3, [pc, #212]	; (4bbc <vendor_request_handler+0x374>)
    4ae8:	e70b      	b.n	4902 <vendor_request_handler+0xba>
		data[0] = 0x00;
    4aea:	2300      	movs	r3, #0
		length = (u8)strlen(GIT_REVISION);
    4aec:	483e      	ldr	r0, [pc, #248]	; (4be8 <vendor_request_handler+0x3a0>)
		data[0] = 0x00;
    4aee:	7013      	strb	r3, [r2, #0]
		data[1] = 0x00;
    4af0:	7053      	strb	r3, [r2, #1]
		length = (u8)strlen(GIT_REVISION);
    4af2:	f006 f81f 	bl	ab34 <strlen>
    4af6:	b2c6      	uxtb	r6, r0
		memcpy(&data[3], GIT_REVISION, length);
    4af8:	4632      	mov	r2, r6
		length = (u8)strlen(GIT_REVISION);
    4afa:	70a8      	strb	r0, [r5, #2]
		memcpy(&data[3], GIT_REVISION, length);
    4afc:	493a      	ldr	r1, [pc, #232]	; (4be8 <vendor_request_handler+0x3a0>)
    4afe:	1ce8      	adds	r0, r5, #3
    4b00:	f005 ff7c 	bl	a9fc <memcpy>
		*data_len = 2 + 1 + length;
    4b04:	3603      	adds	r6, #3
		*data_len = 1 + length;
    4b06:	6026      	str	r6, [r4, #0]
		break;
    4b08:	e729      	b.n	495e <vendor_request_handler+0x116>
		length = (u8)strlen(compile_info);
    4b0a:	4838      	ldr	r0, [pc, #224]	; (4bec <vendor_request_handler+0x3a4>)
    4b0c:	f006 f812 	bl	ab34 <strlen>
    4b10:	4603      	mov	r3, r0
    4b12:	b2c6      	uxtb	r6, r0
    4b14:	4628      	mov	r0, r5
		memcpy(&data[1], compile_info, length);
    4b16:	4632      	mov	r2, r6
    4b18:	4934      	ldr	r1, [pc, #208]	; (4bec <vendor_request_handler+0x3a4>)
		length = (u8)strlen(compile_info);
    4b1a:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&data[1], compile_info, length);
    4b1e:	f005 ff6d 	bl	a9fc <memcpy>
		*data_len = 1 + length;
    4b22:	3601      	adds	r6, #1
    4b24:	e7ef      	b.n	4b06 <vendor_request_handler+0x2be>
		data[0] = BOARD_ID;
    4b26:	2001      	movs	r0, #1
    4b28:	7010      	strb	r0, [r2, #0]
			*data_len = 1;
    4b2a:	6020      	str	r0, [r4, #0]
    4b2c:	e085      	b.n	4c3a <vendor_request_handler+0x3f2>
		cs_threshold_req = (int8_t)request_params[0];
    4b2e:	880a      	ldrh	r2, [r1, #0]
    4b30:	4b2f      	ldr	r3, [pc, #188]	; (4bf0 <vendor_request_handler+0x3a8>)
    4b32:	701a      	strb	r2, [r3, #0]
		cs_threshold_calc_and_set(channel);
    4b34:	4b29      	ldr	r3, [pc, #164]	; (4bdc <vendor_request_handler+0x394>)
    4b36:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
    4b3a:	e786      	b.n	4a4a <vendor_request_handler+0x202>
		data[0] = cs_threshold_req;
    4b3c:	4b2c      	ldr	r3, [pc, #176]	; (4bf0 <vendor_request_handler+0x3a8>)
    4b3e:	e755      	b.n	49ec <vendor_request_handler+0x1a4>
		target.address = 0;
    4b40:	2000      	movs	r0, #0
    4b42:	2100      	movs	r1, #0
    4b44:	1e57      	subs	r7, r2, #1
		target.syncword = 0;
    4b46:	2200      	movs	r2, #0
		target.address = 0;
    4b48:	4b2a      	ldr	r3, [pc, #168]	; (4bf4 <vendor_request_handler+0x3ac>)
    4b4a:	e9c3 0100 	strd	r0, r1, [r3]
		target.syncword = 0;
    4b4e:	e9c3 0102 	strd	r0, r1, [r3, #8]
			target.address |= (uint64_t)data[i] << 8*i;
    4b52:	f817 bf01 	ldrb.w	fp, [r7, #1]!
    4b56:	f1a2 0120 	sub.w	r1, r2, #32
    4b5a:	f1c2 0420 	rsb	r4, r2, #32
    4b5e:	fa2b f404 	lsr.w	r4, fp, r4
    4b62:	fa0b f101 	lsl.w	r1, fp, r1
    4b66:	4321      	orrs	r1, r4
    4b68:	fa0b f002 	lsl.w	r0, fp, r2
    4b6c:	3208      	adds	r2, #8
    4b6e:	e9d3 6400 	ldrd	r6, r4, [r3]
		for(int i=0; i < 8; i++) {
    4b72:	2a40      	cmp	r2, #64	; 0x40
			target.address |= (uint64_t)data[i] << 8*i;
    4b74:	ea40 0006 	orr.w	r0, r0, r6
    4b78:	ea41 0104 	orr.w	r1, r1, r4
    4b7c:	e9c3 0100 	strd	r0, r1, [r3]
		for(int i=0; i < 8; i++) {
    4b80:	d1e7      	bne.n	4b52 <vendor_request_handler+0x30a>
    4b82:	2100      	movs	r1, #0
    4b84:	3507      	adds	r5, #7
			target.syncword |= (uint64_t)data[i+8] << 8*i;
    4b86:	f815 bf01 	ldrb.w	fp, [r5, #1]!
    4b8a:	f1a1 0420 	sub.w	r4, r1, #32
    4b8e:	f1c1 0720 	rsb	r7, r1, #32
    4b92:	fa2b f707 	lsr.w	r7, fp, r7
    4b96:	fa0b f404 	lsl.w	r4, fp, r4
    4b9a:	433c      	orrs	r4, r7
    4b9c:	fa0b f601 	lsl.w	r6, fp, r1
    4ba0:	3108      	adds	r1, #8
    4ba2:	e9d3 2702 	ldrd	r2, r7, [r3, #8]
		for(int i=0; i < 8; i++) {
    4ba6:	2940      	cmp	r1, #64	; 0x40
			target.syncword |= (uint64_t)data[i+8] << 8*i;
    4ba8:	ea46 0602 	orr.w	r6, r6, r2
    4bac:	ea44 0407 	orr.w	r4, r4, r7
    4bb0:	e9c3 6402 	strd	r6, r4, [r3, #8]
		for(int i=0; i < 8; i++) {
    4bb4:	d1e7      	bne.n	4b86 <vendor_request_handler+0x33e>
		precalc();
    4bb6:	f001 ffc3 	bl	6b40 <precalc>
		break;
    4bba:	e6d0      	b.n	495e <vendor_request_handler+0x116>
    4bbc:	10000b3c 	.word	0x10000b3c
    4bc0:	2009c034 	.word	0x2009c034
    4bc4:	2009c038 	.word	0x2009c038
    4bc8:	2009c03c 	.word	0x2009c03c
    4bcc:	2009c054 	.word	0x2009c054
    4bd0:	2009c058 	.word	0x2009c058
    4bd4:	2009c05c 	.word	0x2009c05c
    4bd8:	10001828 	.word	0x10001828
    4bdc:	10000450 	.word	0x10000450
    4be0:	1000001c 	.word	0x1000001c
    4be4:	4305bb21 	.word	0x4305bb21
    4be8:	0000ab94 	.word	0x0000ab94
    4bec:	0000ac63 	.word	0x0000ac63
    4bf0:	100017f0 	.word	0x100017f0
    4bf4:	10001868 	.word	0x10001868
		clkn_offset = 0;
    4bf8:	2200      	movs	r2, #0
    4bfa:	4b9f      	ldr	r3, [pc, #636]	; (4e78 <vendor_request_handler+0x630>)
    4bfc:	1ce8      	adds	r0, r5, #3
    4bfe:	601a      	str	r2, [r3, #0]
		for(int i=0; i < 4; i++) {
    4c00:	1e6a      	subs	r2, r5, #1
			clkn_offset <<= 8;
    4c02:	6819      	ldr	r1, [r3, #0]
    4c04:	0209      	lsls	r1, r1, #8
    4c06:	6019      	str	r1, [r3, #0]
			clkn_offset |= data[i];
    4c08:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    4c0c:	681c      	ldr	r4, [r3, #0]
		for(int i=0; i < 4; i++) {
    4c0e:	4290      	cmp	r0, r2
			clkn_offset |= data[i];
    4c10:	ea41 0104 	orr.w	r1, r1, r4
    4c14:	6019      	str	r1, [r3, #0]
		for(int i=0; i < 4; i++) {
    4c16:	d1f4      	bne.n	4c02 <vendor_request_handler+0x3ba>
		hop_mode = HOP_BLUETOOTH;
    4c18:	2202      	movs	r2, #2
		DIO_SSEL_SET;
    4c1a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
		dma_discard = 1;
    4c1e:	2001      	movs	r0, #1
		hop_mode = HOP_BLUETOOTH;
    4c20:	4b96      	ldr	r3, [pc, #600]	; (4e7c <vendor_request_handler+0x634>)
    4c22:	729a      	strb	r2, [r3, #10]
		DIO_SSEL_SET;
    4c24:	4a96      	ldr	r2, [pc, #600]	; (4e80 <vendor_request_handler+0x638>)
		dma_discard = 1;
    4c26:	7418      	strb	r0, [r3, #16]
		DIO_SSEL_SET;
    4c28:	6011      	str	r1, [r2, #0]
		clk100ns_offset = (data[4] << 8) | (data[5] << 0);
    4c2a:	7929      	ldrb	r1, [r5, #4]
    4c2c:	796a      	ldrb	r2, [r5, #5]
    4c2e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    4c32:	4994      	ldr	r1, [pc, #592]	; (4e84 <vendor_request_handler+0x63c>)
    4c34:	800a      	strh	r2, [r1, #0]
		requested_mode = MODE_BT_FOLLOW;
    4c36:	2208      	movs	r2, #8
    4c38:	749a      	strb	r2, [r3, #18]
}
    4c3a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
		hop_mode = HOP_AFH;
    4c3e:	2205      	movs	r2, #5
    4c40:	4b8e      	ldr	r3, [pc, #568]	; (4e7c <vendor_request_handler+0x634>)
    4c42:	4991      	ldr	r1, [pc, #580]	; (4e88 <vendor_request_handler+0x640>)
    4c44:	729a      	strb	r2, [r3, #10]
		requested_mode = MODE_AFH;
    4c46:	220e      	movs	r2, #14
    4c48:	749a      	strb	r2, [r3, #18]
		for(int i=0; i < 10; i++) {
    4c4a:	2300      	movs	r3, #0
			afh_map[i] = 0;
    4c4c:	461a      	mov	r2, r3
		for(int i=0; i < 10; i++) {
    4c4e:	3301      	adds	r3, #1
    4c50:	2b0a      	cmp	r3, #10
			afh_map[i] = 0;
    4c52:	f801 2b01 	strb.w	r2, [r1], #1
		for(int i=0; i < 10; i++) {
    4c56:	d1fa      	bne.n	4c4e <vendor_request_handler+0x406>
		afh_enabled = 1;
    4c58:	2001      	movs	r0, #1
		used_channels = 0;
    4c5a:	4b8c      	ldr	r3, [pc, #560]	; (4e8c <vendor_request_handler+0x644>)
    4c5c:	701a      	strb	r2, [r3, #0]
		afh_enabled = 1;
    4c5e:	4b8c      	ldr	r3, [pc, #560]	; (4e90 <vendor_request_handler+0x648>)
    4c60:	7018      	strb	r0, [r3, #0]
		break;
    4c62:	e7ea      	b.n	4c3a <vendor_request_handler+0x3f2>
		do_hop = 1;
    4c64:	2001      	movs	r0, #1
    4c66:	4b85      	ldr	r3, [pc, #532]	; (4e7c <vendor_request_handler+0x634>)
    4c68:	72d8      	strb	r0, [r3, #11]
		break;
    4c6a:	e7e6      	b.n	4c3a <vendor_request_handler+0x3f2>
		clock = data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
    4c6c:	6812      	ldr	r2, [r2, #0]
		clkn = clock;
    4c6e:	4b89      	ldr	r3, [pc, #548]	; (4e94 <vendor_request_handler+0x64c>)
    4c70:	601a      	str	r2, [r3, #0]
		cs_threshold_calc_and_set(channel);
    4c72:	e75f      	b.n	4b34 <vendor_request_handler+0x2ec>
    4c74:	4984      	ldr	r1, [pc, #528]	; (4e88 <vendor_request_handler+0x640>)
    4c76:	1e53      	subs	r3, r2, #1
    4c78:	3509      	adds	r5, #9
			afh_map[i] = data[i];
    4c7a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
		for(int i=0; i < 10; i++) {
    4c7e:	42ab      	cmp	r3, r5
			afh_map[i] = data[i];
    4c80:	f801 2b01 	strb.w	r2, [r1], #1
		for(int i=0; i < 10; i++) {
    4c84:	d1f9      	bne.n	4c7a <vendor_request_handler+0x432>
		afh_enabled = 1;
    4c86:	2001      	movs	r0, #1
    4c88:	4b81      	ldr	r3, [pc, #516]	; (4e90 <vendor_request_handler+0x648>)
    4c8a:	7018      	strb	r0, [r3, #0]
		*data_len = 10;
    4c8c:	230a      	movs	r3, #10
    4c8e:	e633      	b.n	48f8 <vendor_request_handler+0xb0>
		for(int i=0; i < 10; i++) {
    4c90:	2300      	movs	r3, #0
			afh_map[i] = 0;
    4c92:	461a      	mov	r2, r3
    4c94:	497c      	ldr	r1, [pc, #496]	; (4e88 <vendor_request_handler+0x640>)
		for(int i=0; i < 10; i++) {
    4c96:	3301      	adds	r3, #1
    4c98:	2b0a      	cmp	r3, #10
			afh_map[i] = 0;
    4c9a:	f801 2b01 	strb.w	r2, [r1], #1
		for(int i=0; i < 10; i++) {
    4c9e:	d1fa      	bne.n	4c96 <vendor_request_handler+0x44e>
		afh_enabled = 0;
    4ca0:	497b      	ldr	r1, [pc, #492]	; (4e90 <vendor_request_handler+0x648>)
    4ca2:	700a      	strb	r2, [r1, #0]
		*data_len = 10;
    4ca4:	e69c      	b.n	49e0 <vendor_request_handler+0x198>
		clock = clkn;
    4ca6:	4b7b      	ldr	r3, [pc, #492]	; (4e94 <vendor_request_handler+0x64c>)
    4ca8:	681b      	ldr	r3, [r3, #0]
			data[i] = (clock >> (8*i)) & 0xff;
    4caa:	7013      	strb	r3, [r2, #0]
    4cac:	0a1a      	lsrs	r2, r3, #8
    4cae:	706a      	strb	r2, [r5, #1]
    4cb0:	0c1a      	lsrs	r2, r3, #16
    4cb2:	0e1b      	lsrs	r3, r3, #24
    4cb4:	70aa      	strb	r2, [r5, #2]
    4cb6:	70eb      	strb	r3, [r5, #3]
		*data_len = 4;
    4cb8:	2304      	movs	r3, #4
    4cba:	e691      	b.n	49e0 <vendor_request_handler+0x198>
		clk100ns_offset = (data[0] << 8) | (data[1] << 0);
    4cbc:	7812      	ldrb	r2, [r2, #0]
    4cbe:	786b      	ldrb	r3, [r5, #1]
    4cc0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4cc4:	4a6f      	ldr	r2, [pc, #444]	; (4e84 <vendor_request_handler+0x63c>)
    4cc6:	8013      	strh	r3, [r2, #0]
		break;
    4cc8:	e649      	b.n	495e <vendor_request_handler+0x116>
		clk_drift_ppm += (int16_t)(data[0] << 8) | (data[1] << 0);
    4cca:	4a73      	ldr	r2, [pc, #460]	; (4e98 <vendor_request_handler+0x650>)
    4ccc:	7828      	ldrb	r0, [r5, #0]
    4cce:	786b      	ldrb	r3, [r5, #1]
    4cd0:	8811      	ldrh	r1, [r2, #0]
    4cd2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    4cd6:	440b      	add	r3, r1
    4cd8:	b21b      	sxth	r3, r3
    4cda:	8013      	strh	r3, [r2, #0]
		if (clk_drift_ppm < 0) {
    4cdc:	8813      	ldrh	r3, [r2, #0]
    4cde:	496f      	ldr	r1, [pc, #444]	; (4e9c <vendor_request_handler+0x654>)
    4ce0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    4ce4:	4b6e      	ldr	r3, [pc, #440]	; (4ea0 <vendor_request_handler+0x658>)
    4ce6:	d00e      	beq.n	4d06 <vendor_request_handler+0x4be>
			clk_drift_correction = 320 / (uint16_t)(-clk_drift_ppm);
    4ce8:	f44f 70a0 	mov.w	r0, #320	; 0x140
    4cec:	8812      	ldrh	r2, [r2, #0]
    4cee:	4252      	negs	r2, r2
    4cf0:	b292      	uxth	r2, r2
    4cf2:	fbb0 f2f2 	udiv	r2, r0, r2
			clk_drift_correction = 320 / clk_drift_ppm;
    4cf6:	801a      	strh	r2, [r3, #0]
			clkn_next_drift_fix = clkn_last_drift_fix + clk_drift_correction;
    4cf8:	4a6a      	ldr	r2, [pc, #424]	; (4ea4 <vendor_request_handler+0x65c>)
    4cfa:	881b      	ldrh	r3, [r3, #0]
    4cfc:	6812      	ldr	r2, [r2, #0]
    4cfe:	b29b      	uxth	r3, r3
    4d00:	4413      	add	r3, r2
    4d02:	600b      	str	r3, [r1, #0]
    4d04:	e62b      	b.n	495e <vendor_request_handler+0x116>
		else if (clk_drift_ppm > 0) {
    4d06:	8810      	ldrh	r0, [r2, #0]
    4d08:	b200      	sxth	r0, r0
    4d0a:	2800      	cmp	r0, #0
    4d0c:	dd07      	ble.n	4d1e <vendor_request_handler+0x4d6>
			clk_drift_correction = 320 / clk_drift_ppm;
    4d0e:	8812      	ldrh	r2, [r2, #0]
    4d10:	b210      	sxth	r0, r2
    4d12:	f44f 72a0 	mov.w	r2, #320	; 0x140
    4d16:	fb92 f2f0 	sdiv	r2, r2, r0
    4d1a:	b292      	uxth	r2, r2
    4d1c:	e7eb      	b.n	4cf6 <vendor_request_handler+0x4ae>
			clk_drift_correction = 0;
    4d1e:	2200      	movs	r2, #0
    4d20:	801a      	strh	r2, [r3, #0]
			clkn_next_drift_fix = 0;
    4d22:	600a      	str	r2, [r1, #0]
    4d24:	e61b      	b.n	495e <vendor_request_handler+0x116>
		*data_len = 0;
    4d26:	2200      	movs	r2, #0
		le.do_follow = request_params[0];
    4d28:	880b      	ldrh	r3, [r1, #0]
    4d2a:	4d5f      	ldr	r5, [pc, #380]	; (4ea8 <vendor_request_handler+0x660>)
    4d2c:	636b      	str	r3, [r5, #52]	; 0x34
		do_hop = 0;
    4d2e:	4b53      	ldr	r3, [pc, #332]	; (4e7c <vendor_request_handler+0x634>)
		*data_len = 0;
    4d30:	6022      	str	r2, [r4, #0]
		do_hop = 0;
    4d32:	72da      	strb	r2, [r3, #11]
		hop_mode = HOP_BTLE;
    4d34:	2203      	movs	r2, #3
    4d36:	729a      	strb	r2, [r3, #10]
		requested_mode = MODE_BT_FOLLOW_LE;
    4d38:	2209      	movs	r2, #9
    4d3a:	749a      	strb	r2, [r3, #18]
		usb_queue_init();
    4d3c:	f002 f9c2 	bl	70c4 <usb_queue_init>
		cs_threshold_calc_and_set(channel);
    4d40:	f8b5 004c 	ldrh.w	r0, [r5, #76]	; 0x4c
    4d44:	e681      	b.n	4a4a <vendor_request_handler+0x202>
		for(int i=0; i < 10; i++) {
    4d46:	2300      	movs	r3, #0
    4d48:	1e55      	subs	r5, r2, #1
			data[i] = (le.access_address >> (8*i)) & 0xff;
    4d4a:	4a57      	ldr	r2, [pc, #348]	; (4ea8 <vendor_request_handler+0x660>)
    4d4c:	6811      	ldr	r1, [r2, #0]
    4d4e:	40d9      	lsrs	r1, r3
    4d50:	3308      	adds	r3, #8
		for(int i=0; i < 4; i++) {
    4d52:	2b20      	cmp	r3, #32
			data[i] = (le.access_address >> (8*i)) & 0xff;
    4d54:	f805 1f01 	strb.w	r1, [r5, #1]!
		for(int i=0; i < 4; i++) {
    4d58:	d1f8      	bne.n	4d4c <vendor_request_handler+0x504>
    4d5a:	e7ad      	b.n	4cb8 <vendor_request_handler+0x470>
		le_set_access_address(data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24);
    4d5c:	6810      	ldr	r0, [r2, #0]
    4d5e:	f7ff fadb 	bl	4318 <le_set_access_address>
			le.target_set = 1;
    4d62:	2001      	movs	r0, #1
    4d64:	4b50      	ldr	r3, [pc, #320]	; (4ea8 <vendor_request_handler+0x660>)
    4d66:	6458      	str	r0, [r3, #68]	; 0x44
    4d68:	e767      	b.n	4c3a <vendor_request_handler+0x3f2>
		data[0] = 0x13;
    4d6a:	2313      	movs	r3, #19
    4d6c:	7013      	strb	r3, [r2, #0]
		data[1] = 0x37;
    4d6e:	2337      	movs	r3, #55	; 0x37
    4d70:	e64a      	b.n	4a08 <vendor_request_handler+0x1c0>
		data[0] = le.crc_verify ? 1 : 0;
    4d72:	4b4d      	ldr	r3, [pc, #308]	; (4ea8 <vendor_request_handler+0x660>)
    4d74:	691b      	ldr	r3, [r3, #16]
    4d76:	3b00      	subs	r3, #0
    4d78:	bf18      	it	ne
    4d7a:	2301      	movne	r3, #1
    4d7c:	e5c7      	b.n	490e <vendor_request_handler+0xc6>
		le.crc_verify = request_params[0] ? 1 : 0;
    4d7e:	880b      	ldrh	r3, [r1, #0]
    4d80:	4a49      	ldr	r2, [pc, #292]	; (4ea8 <vendor_request_handler+0x660>)
    4d82:	3b00      	subs	r3, #0
    4d84:	bf18      	it	ne
    4d86:	2301      	movne	r3, #1
    4d88:	6113      	str	r3, [r2, #16]
		break;
    4d8a:	e5e8      	b.n	495e <vendor_request_handler+0x116>
		p = dequeue();
    4d8c:	f002 f9c2 	bl	7114 <dequeue>
		if (p != NULL) {
    4d90:	4601      	mov	r1, r0
    4d92:	b128      	cbz	r0, 4da0 <vendor_request_handler+0x558>
			memcpy(data, (void *)p, sizeof(usb_pkt_rx));
    4d94:	2240      	movs	r2, #64	; 0x40
    4d96:	4628      	mov	r0, r5
    4d98:	f005 fe30 	bl	a9fc <memcpy>
			*data_len = sizeof(usb_pkt_rx);
    4d9c:	2340      	movs	r3, #64	; 0x40
    4d9e:	e61f      	b.n	49e0 <vendor_request_handler+0x198>
			data[0] = 0;
    4da0:	7028      	strb	r0, [r5, #0]
    4da2:	e5ff      	b.n	49a4 <vendor_request_handler+0x15c>
		*data_len = 0;
    4da4:	2200      	movs	r2, #0
		hop_mode = HOP_NONE;
    4da6:	4b35      	ldr	r3, [pc, #212]	; (4e7c <vendor_request_handler+0x634>)
		*data_len = 0;
    4da8:	6022      	str	r2, [r4, #0]
		hop_mode = HOP_NONE;
    4daa:	729a      	strb	r2, [r3, #10]
		requested_mode = MODE_BT_PROMISC_LE;
    4dac:	220a      	movs	r2, #10
    4dae:	749a      	strb	r2, [r3, #18]
		usb_queue_init();
    4db0:	f002 f988 	bl	70c4 <usb_queue_init>
    4db4:	e6be      	b.n	4b34 <vendor_request_handler+0x2ec>
		reg_val = cc2400_get(request_params[0]);
    4db6:	7808      	ldrb	r0, [r1, #0]
    4db8:	f004 fee0 	bl	9b7c <cc2400_get>
		data[0] = (reg_val >> 8) & 0xff;
    4dbc:	0a03      	lsrs	r3, r0, #8
    4dbe:	702b      	strb	r3, [r5, #0]
		data[1] = reg_val & 0xff;
    4dc0:	7068      	strb	r0, [r5, #1]
    4dc2:	e622      	b.n	4a0a <vendor_request_handler+0x1c2>
		cc2400_set(request_params[0] & 0xff, request_params[1]);
    4dc4:	8849      	ldrh	r1, [r1, #2]
    4dc6:	7830      	ldrb	r0, [r6, #0]
    4dc8:	e5f5      	b.n	49b6 <vendor_request_handler+0x16e>
			reg_val = (data[(i*3)+1] << 8) | data[(i*3)+2];
    4dca:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    4dce:	18ea      	adds	r2, r5, r3
    4dd0:	7851      	ldrb	r1, [r2, #1]
    4dd2:	7892      	ldrb	r2, [r2, #2]
			cc2400_set(data[i*3], reg_val);
    4dd4:	5ce8      	ldrb	r0, [r5, r3]
    4dd6:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
    4dda:	f004 fed8 	bl	9b8e <cc2400_set>
    4dde:	4623      	mov	r3, r4
		for(i=0; i<request_params[0]; i++) {
    4de0:	8831      	ldrh	r1, [r6, #0]
    4de2:	b2da      	uxtb	r2, r3
    4de4:	428a      	cmp	r2, r1
    4de6:	f103 0401 	add.w	r4, r3, #1
    4dea:	d3ee      	bcc.n	4dca <vendor_request_handler+0x582>
    4dec:	e5b7      	b.n	495e <vendor_request_handler+0x116>
			cc2400_set(data[i*3], reg_val);
    4dee:	2300      	movs	r3, #0
    4df0:	e7f6      	b.n	4de0 <vendor_request_handler+0x598>
    4df2:	2600      	movs	r6, #0
    4df4:	b2f7      	uxtb	r7, r6
			reg_val = cc2400_get(i);
    4df6:	4638      	mov	r0, r7
    4df8:	f004 fec0 	bl	9b7c <cc2400_get>
			data[i*3] = i;
    4dfc:	3601      	adds	r6, #1
			data[(i*3)+1] = (reg_val >> 8) & 0xff;
    4dfe:	0a03      	lsrs	r3, r0, #8
		for(i=0; i<=MAX_READ_REG; i++) {
    4e00:	2e2e      	cmp	r6, #46	; 0x2e
			data[i*3] = i;
    4e02:	702f      	strb	r7, [r5, #0]
			data[(i*3)+1] = (reg_val >> 8) & 0xff;
    4e04:	706b      	strb	r3, [r5, #1]
			data[(i*3)+2] = reg_val & 0xff;
    4e06:	70a8      	strb	r0, [r5, #2]
		for(i=0; i<=MAX_READ_REG; i++) {
    4e08:	f105 0503 	add.w	r5, r5, #3
    4e0c:	d1f2      	bne.n	4df4 <vendor_request_handler+0x5ac>
		*data_len = MAX_READ_REG*3;
    4e0e:	2387      	movs	r3, #135	; 0x87
    4e10:	e5e6      	b.n	49e0 <vendor_request_handler+0x198>
		i = 7 + data[6];
    4e12:	7992      	ldrb	r2, [r2, #6]
		memcpy(&tx_pkt, data, i);
    4e14:	4629      	mov	r1, r5
		i = 7 + data[6];
    4e16:	3207      	adds	r2, #7
		memcpy(&tx_pkt, data, i);
    4e18:	b2d2      	uxtb	r2, r2
    4e1a:	4824      	ldr	r0, [pc, #144]	; (4eac <vendor_request_handler+0x664>)
    4e1c:	f005 fdee 	bl	a9fc <memcpy>
		requested_mode = MODE_TX_GENERIC;
    4e20:	2210      	movs	r2, #16
    4e22:	4b16      	ldr	r3, [pc, #88]	; (4e7c <vendor_request_handler+0x634>)
    4e24:	e56d      	b.n	4902 <vendor_request_handler+0xba>
		memcpy(slave_mac_address, data, 6);
    4e26:	4c15      	ldr	r4, [pc, #84]	; (4e7c <vendor_request_handler+0x634>)
    4e28:	2206      	movs	r2, #6
    4e2a:	4629      	mov	r1, r5
    4e2c:	f104 0020 	add.w	r0, r4, #32
    4e30:	f005 fde4 	bl	a9fc <memcpy>
		requested_mode = MODE_BT_SLAVE_LE;
    4e34:	230c      	movs	r3, #12
    4e36:	74a3      	strb	r3, [r4, #18]
		break;
    4e38:	e591      	b.n	495e <vendor_request_handler+0x116>
	unsigned data_in_len = request_params[2];
    4e3a:	888a      	ldrh	r2, [r1, #4]
		if (data_in_len > LE_ADV_MAX_LEN)
    4e3c:	2aff      	cmp	r2, #255	; 0xff
    4e3e:	f200 8086 	bhi.w	4f4e <vendor_request_handler+0x706>
		le_adv_len = data_in_len;
    4e42:	4819      	ldr	r0, [pc, #100]	; (4ea8 <vendor_request_handler+0x660>)
		memcpy(le_adv_data, data, le_adv_len);
    4e44:	4629      	mov	r1, r5
		le_adv_len = data_in_len;
    4e46:	6582      	str	r2, [r0, #88]	; 0x58
		memcpy(le_adv_data, data, le_adv_len);
    4e48:	305c      	adds	r0, #92	; 0x5c
    4e4a:	f005 fdd7 	bl	a9fc <memcpy>
		break;
    4e4e:	e586      	b.n	495e <vendor_request_handler+0x116>
		if (data[6] > 48) {
    4e50:	7994      	ldrb	r4, [r2, #6]
    4e52:	2c30      	cmp	r4, #48	; 0x30
    4e54:	d87b      	bhi.n	4f4e <vendor_request_handler+0x706>
		else if (data[6] == 0) {
    4e56:	bb5c      	cbnz	r4, 4eb0 <vendor_request_handler+0x668>
			le.target_set = 0;
    4e58:	4d13      	ldr	r5, [pc, #76]	; (4ea8 <vendor_request_handler+0x660>)
			memset(le.target, 0, 6);
    4e5a:	4621      	mov	r1, r4
    4e5c:	2206      	movs	r2, #6
    4e5e:	f105 0038 	add.w	r0, r5, #56	; 0x38
			le.target_set = 0;
    4e62:	646c      	str	r4, [r5, #68]	; 0x44
			memset(le.target, 0, 6);
    4e64:	f7ff f9ba 	bl	41dc <memset>
			memset(le.target_mask, 0, 6);
    4e68:	2206      	movs	r2, #6
    4e6a:	4621      	mov	r1, r4
    4e6c:	f105 003e 	add.w	r0, r5, #62	; 0x3e
    4e70:	f7ff f9b4 	bl	41dc <memset>
    4e74:	e573      	b.n	495e <vendor_request_handler+0x116>
    4e76:	bf00      	nop
    4e78:	10001360 	.word	0x10001360
    4e7c:	10000b3c 	.word	0x10000b3c
    4e80:	2009c098 	.word	0x2009c098
    4e84:	100014ba 	.word	0x100014ba
    4e88:	10001353 	.word	0x10001353
    4e8c:	10001351 	.word	0x10001351
    4e90:	100017ef 	.word	0x100017ef
    4e94:	1000136c 	.word	0x1000136c
    4e98:	100017ec 	.word	0x100017ec
    4e9c:	10001824 	.word	0x10001824
    4ea0:	10001368 	.word	0x10001368
    4ea4:	10001364 	.word	0x10001364
    4ea8:	10000450 	.word	0x10000450
    4eac:	10001370 	.word	0x10001370
    4eb0:	4c28      	ldr	r4, [pc, #160]	; (4f54 <vendor_request_handler+0x70c>)
    4eb2:	1d93      	adds	r3, r2, #6
		else if (data[6] == 0) {
    4eb4:	4622      	mov	r2, r4
				le.target[i] = data[5-i];
    4eb6:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
			for (i = 0; i < 6; ++i)
    4eba:	429d      	cmp	r5, r3
				le.target[i] = data[5-i];
    4ebc:	f802 1b01 	strb.w	r1, [r2], #1
			for (i = 0; i < 6; ++i)
    4ec0:	d1f9      	bne.n	4eb6 <vendor_request_handler+0x66e>
			memset(le.target_mask, 0, 6);
    4ec2:	2100      	movs	r1, #0
    4ec4:	2206      	movs	r2, #6
    4ec6:	4824      	ldr	r0, [pc, #144]	; (4f58 <vendor_request_handler+0x710>)
    4ec8:	f7ff f988 	bl	41dc <memset>
				le.target_mask[i] = 0xff;
    4ecc:	26ff      	movs	r6, #255	; 0xff
			for (i = 5; data[6] > 8; --i, data[6] -= 8) {
    4ece:	2305      	movs	r3, #5
				le.target_mask[i] = 0xff;
    4ed0:	4922      	ldr	r1, [pc, #136]	; (4f5c <vendor_request_handler+0x714>)
			for (i = 5; data[6] > 8; --i, data[6] -= 8) {
    4ed2:	79a8      	ldrb	r0, [r5, #6]
    4ed4:	2808      	cmp	r0, #8
    4ed6:	d81a      	bhi.n	4f0e <vendor_request_handler+0x6c6>
			if (data[6] > 0) {
    4ed8:	b160      	cbz	r0, 4ef4 <vendor_request_handler+0x6ac>
    4eda:	2100      	movs	r1, #0
				uint8_t final_byte = 0;
    4edc:	460a      	mov	r2, r1
					final_byte >>= 1;
    4ede:	3101      	adds	r1, #1
				for (i = 0; i < data[6]; ++i) {
    4ee0:	b2cd      	uxtb	r5, r1
					final_byte >>= 1;
    4ee2:	0852      	lsrs	r2, r2, #1
				for (i = 0; i < data[6]; ++i) {
    4ee4:	42a8      	cmp	r0, r5
					final_byte |= 0b10000000;
    4ee6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
				for (i = 0; i < data[6]; ++i) {
    4eea:	d8f8      	bhi.n	4ede <vendor_request_handler+0x696>
				le.target_mask[last] = final_byte;
    4eec:	491b      	ldr	r1, [pc, #108]	; (4f5c <vendor_request_handler+0x714>)
    4eee:	440b      	add	r3, r1
    4ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
				uint8_t final_byte = 0;
    4ef4:	2305      	movs	r3, #5
				le.target[i] &= le.target_mask[i];
    4ef6:	f814 2b01 	ldrb.w	r2, [r4], #1
    4efa:	3b01      	subs	r3, #1
    4efc:	7961      	ldrb	r1, [r4, #5]
			for (i = 0; i < 5; ++i)
    4efe:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
				le.target[i] &= le.target_mask[i];
    4f02:	ea02 0201 	and.w	r2, r2, r1
    4f06:	f804 2c01 	strb.w	r2, [r4, #-1]
			for (i = 0; i < 5; ++i)
    4f0a:	d1f4      	bne.n	4ef6 <vendor_request_handler+0x6ae>
    4f0c:	e729      	b.n	4d62 <vendor_request_handler+0x51a>
				le.target_mask[i] = 0xff;
    4f0e:	18ca      	adds	r2, r1, r3
    4f10:	f882 603e 	strb.w	r6, [r2, #62]	; 0x3e
			for (i = 5; data[6] > 8; --i, data[6] -= 8) {
    4f14:	79aa      	ldrb	r2, [r5, #6]
    4f16:	3b01      	subs	r3, #1
    4f18:	3a08      	subs	r2, #8
    4f1a:	b2db      	uxtb	r3, r3
    4f1c:	71aa      	strb	r2, [r5, #6]
    4f1e:	e7d8      	b.n	4ed2 <vendor_request_handler+0x68a>
		cancel_follow = 1;
    4f20:	2001      	movs	r0, #1
    4f22:	4b0f      	ldr	r3, [pc, #60]	; (4f60 <vendor_request_handler+0x718>)
    4f24:	6298      	str	r0, [r3, #40]	; 0x28
		break;
    4f26:	e688      	b.n	4c3a <vendor_request_handler+0x3f2>
		jam_mode = request_params[0];
    4f28:	780a      	ldrb	r2, [r1, #0]
    4f2a:	4b0d      	ldr	r3, [pc, #52]	; (4f60 <vendor_request_handler+0x718>)
    4f2c:	74da      	strb	r2, [r3, #19]
		break;
    4f2e:	e516      	b.n	495e <vendor_request_handler+0x116>
		ego_mode = request_params[0];
    4f30:	780a      	ldrb	r2, [r1, #0]
    4f32:	4b0b      	ldr	r3, [pc, #44]	; (4f60 <vendor_request_handler+0x718>)
    4f34:	751a      	strb	r2, [r3, #20]
		requested_mode = MODE_EGO;
    4f36:	220d      	movs	r2, #13
    4f38:	e52c      	b.n	4994 <vendor_request_handler+0x14c>
		return rfcat_subcommand(request_params[0], data, *data_len);
    4f3a:	4629      	mov	r1, r5
    4f3c:	6822      	ldr	r2, [r4, #0]
    4f3e:	8830      	ldrh	r0, [r6, #0]
}
    4f40:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
		return rfcat_subcommand(request_params[0], data, *data_len);
    4f44:	f003 bfe8 	b.w	8f18 <rfcat_subcommand>
		requested_mode = MODE_XMAS;
    4f48:	2211      	movs	r2, #17
    4f4a:	4b05      	ldr	r3, [pc, #20]	; (4f60 <vendor_request_handler+0x718>)
    4f4c:	e522      	b.n	4994 <vendor_request_handler+0x14c>
			return 0;
    4f4e:	2000      	movs	r0, #0
    4f50:	e673      	b.n	4c3a <vendor_request_handler+0x3f2>
    4f52:	bf00      	nop
    4f54:	10000488 	.word	0x10000488
    4f58:	1000048e 	.word	0x1000048e
    4f5c:	10000450 	.word	0x10000450
    4f60:	10000b3c 	.word	0x10000b3c

00004f64 <enqueue_with_ts>:
{
    4f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4f68:	4606      	mov	r6, r0
    4f6a:	460f      	mov	r7, r1
    4f6c:	4690      	mov	r8, r2
	usb_pkt_rx* f = usb_enqueue();
    4f6e:	f002 f8b7 	bl	70e0 <usb_enqueue>
	if (f == NULL) {
    4f72:	4d0f      	ldr	r5, [pc, #60]	; (4fb0 <enqueue_with_ts+0x4c>)
    4f74:	4604      	mov	r4, r0
    4f76:	b928      	cbnz	r0, 4f84 <enqueue_with_ts+0x20>
		status |= FIFO_OVERFLOW;
    4f78:	786b      	ldrb	r3, [r5, #1]
    4f7a:	f043 0304 	orr.w	r3, r3, #4
    4f7e:	706b      	strb	r3, [r5, #1]
}
    4f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	f->pkt_type = type;
    4f84:	7006      	strb	r6, [r0, #0]
	f->clkn_high = 0;
    4f86:	2600      	movs	r6, #0
	f->channel = (uint8_t)((channel - 2402) & 0xff);
    4f88:	4b0a      	ldr	r3, [pc, #40]	; (4fb4 <enqueue_with_ts+0x50>)
	f->clkn_high = 0;
    4f8a:	70c6      	strb	r6, [r0, #3]
	f->channel = (uint8_t)((channel - 2402) & 0xff);
    4f8c:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
	f->clk100ns = ts;
    4f90:	f8c0 8004 	str.w	r8, [r0, #4]
	f->channel = (uint8_t)((channel - 2402) & 0xff);
    4f94:	3b62      	subs	r3, #98	; 0x62
    4f96:	7083      	strb	r3, [r0, #2]
	f->rssi_avg = 0;
    4f98:	8146      	strh	r6, [r0, #10]
	memcpy(f->data, buf, DMA_SIZE);
    4f9a:	2232      	movs	r2, #50	; 0x32
    4f9c:	4639      	mov	r1, r7
    4f9e:	300e      	adds	r0, #14
    4fa0:	f005 fd2c 	bl	a9fc <memcpy>
	f->status = status;
    4fa4:	786b      	ldrb	r3, [r5, #1]
	return 1;
    4fa6:	2001      	movs	r0, #1
	f->status = status;
    4fa8:	7063      	strb	r3, [r4, #1]
	status = 0;
    4faa:	706e      	strb	r6, [r5, #1]
	return 1;
    4fac:	e7e8      	b.n	4f80 <enqueue_with_ts+0x1c>
    4fae:	bf00      	nop
    4fb0:	10000b3c 	.word	0x10000b3c
    4fb4:	10000450 	.word	0x10000450

00004fb8 <TIMER0_IRQHandler>:
{
    4fb8:	b510      	push	{r4, lr}
	if (T0IR & TIR_MR0_Interrupt) {
    4fba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    4fbe:	681b      	ldr	r3, [r3, #0]
    4fc0:	07dc      	lsls	r4, r3, #31
    4fc2:	d546      	bpl.n	5052 <TIMER0_IRQHandler+0x9a>
		clkn += clkn_offset + 1;
    4fc4:	493f      	ldr	r1, [pc, #252]	; (50c4 <TIMER0_IRQHandler+0x10c>)
    4fc6:	4b40      	ldr	r3, [pc, #256]	; (50c8 <TIMER0_IRQHandler+0x110>)
    4fc8:	680a      	ldr	r2, [r1, #0]
    4fca:	6818      	ldr	r0, [r3, #0]
    4fcc:	4402      	add	r2, r0
    4fce:	3201      	adds	r2, #1
    4fd0:	601a      	str	r2, [r3, #0]
		clkn_offset = 0;
    4fd2:	2200      	movs	r2, #0
    4fd4:	600a      	str	r2, [r1, #0]
		if (hop_mode == HOP_NONE || hop_mode == HOP_SWEEP) {
    4fd6:	4a3d      	ldr	r2, [pc, #244]	; (50cc <TIMER0_IRQHandler+0x114>)
		uint32_t le_clk = (clkn - le.conn_epoch) & 0x03;
    4fd8:	6818      	ldr	r0, [r3, #0]
		if (hop_mode == HOP_NONE || hop_mode == HOP_SWEEP) {
    4fda:	7a94      	ldrb	r4, [r2, #10]
    4fdc:	4611      	mov	r1, r2
    4fde:	b114      	cbz	r4, 4fe6 <TIMER0_IRQHandler+0x2e>
    4fe0:	7a94      	ldrb	r4, [r2, #10]
    4fe2:	2c01      	cmp	r4, #1
    4fe4:	d136      	bne.n	5054 <TIMER0_IRQHandler+0x9c>
			if ((clkn & 0x7f) == 0)
    4fe6:	681a      	ldr	r2, [r3, #0]
    4fe8:	0650      	lsls	r0, r2, #25
    4fea:	d101      	bne.n	4ff0 <TIMER0_IRQHandler+0x38>
				do_hop = 1;
    4fec:	2201      	movs	r2, #1
    4fee:	72ca      	strb	r2, [r1, #11]
		if(clkn_next_drift_fix != 0 && clk100ns_offset == 0) {
    4ff0:	4937      	ldr	r1, [pc, #220]	; (50d0 <TIMER0_IRQHandler+0x118>)
    4ff2:	4a38      	ldr	r2, [pc, #224]	; (50d4 <TIMER0_IRQHandler+0x11c>)
    4ff4:	6808      	ldr	r0, [r1, #0]
    4ff6:	b1b8      	cbz	r0, 5028 <TIMER0_IRQHandler+0x70>
    4ff8:	8810      	ldrh	r0, [r2, #0]
    4ffa:	b280      	uxth	r0, r0
    4ffc:	b9a0      	cbnz	r0, 5028 <TIMER0_IRQHandler+0x70>
			if(clkn >= clkn_next_drift_fix) {
    4ffe:	681c      	ldr	r4, [r3, #0]
    5000:	6808      	ldr	r0, [r1, #0]
    5002:	4284      	cmp	r4, r0
    5004:	d310      	bcc.n	5028 <TIMER0_IRQHandler+0x70>
				if(clk_drift_ppm >= 0) {
    5006:	4834      	ldr	r0, [pc, #208]	; (50d8 <TIMER0_IRQHandler+0x120>)
				clkn_last_drift_fix = clkn;
    5008:	4c34      	ldr	r4, [pc, #208]	; (50dc <TIMER0_IRQHandler+0x124>)
				if(clk_drift_ppm >= 0) {
    500a:	8800      	ldrh	r0, [r0, #0]
    500c:	0400      	lsls	r0, r0, #16
					clk100ns_offset = 1;
    500e:	bf54      	ite	pl
    5010:	2001      	movpl	r0, #1
					clk100ns_offset = 6249;
    5012:	f641 0069 	movwmi	r0, #6249	; 0x1869
    5016:	8010      	strh	r0, [r2, #0]
				clkn_last_drift_fix = clkn;
    5018:	6818      	ldr	r0, [r3, #0]
    501a:	6020      	str	r0, [r4, #0]
				clkn_next_drift_fix = clkn_last_drift_fix + clk_drift_correction;
    501c:	4830      	ldr	r0, [pc, #192]	; (50e0 <TIMER0_IRQHandler+0x128>)
    501e:	8800      	ldrh	r0, [r0, #0]
    5020:	6824      	ldr	r4, [r4, #0]
    5022:	b280      	uxth	r0, r0
    5024:	4420      	add	r0, r4
    5026:	6008      	str	r0, [r1, #0]
		if(clk100ns_offset > 3124)
    5028:	f640 4034 	movw	r0, #3124	; 0xc34
    502c:	8811      	ldrh	r1, [r2, #0]
    502e:	b289      	uxth	r1, r1
    5030:	4281      	cmp	r1, r0
			clkn += 2;
    5032:	bf82      	ittt	hi
    5034:	6819      	ldrhi	r1, [r3, #0]
    5036:	3102      	addhi	r1, #2
    5038:	6019      	strhi	r1, [r3, #0]
		T0MR0 = 3124 + clk100ns_offset;
    503a:	8813      	ldrh	r3, [r2, #0]
    503c:	4929      	ldr	r1, [pc, #164]	; (50e4 <TIMER0_IRQHandler+0x12c>)
    503e:	b29b      	uxth	r3, r3
    5040:	f603 4334 	addw	r3, r3, #3124	; 0xc34
    5044:	600b      	str	r3, [r1, #0]
		clk100ns_offset = 0;
    5046:	2300      	movs	r3, #0
    5048:	8013      	strh	r3, [r2, #0]
		T0IR = TIR_MR0_Interrupt;
    504a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    504e:	2201      	movs	r2, #1
    5050:	601a      	str	r2, [r3, #0]
}
    5052:	bd10      	pop	{r4, pc}
		else if (hop_mode == HOP_BLUETOOTH) {
    5054:	7a91      	ldrb	r1, [r2, #10]
    5056:	2902      	cmp	r1, #2
    5058:	d105      	bne.n	5066 <TIMER0_IRQHandler+0xae>
			if ((clkn & 0x1) == 0)
    505a:	6819      	ldr	r1, [r3, #0]
    505c:	07c9      	lsls	r1, r1, #31
    505e:	d4c7      	bmi.n	4ff0 <TIMER0_IRQHandler+0x38>
				do_hop = 1;
    5060:	2101      	movs	r1, #1
    5062:	72d1      	strb	r1, [r2, #11]
    5064:	e7c4      	b.n	4ff0 <TIMER0_IRQHandler+0x38>
		else if (hop_mode == HOP_BTLE) {
    5066:	7a91      	ldrb	r1, [r2, #10]
    5068:	2903      	cmp	r1, #3
    506a:	d11c      	bne.n	50a6 <TIMER0_IRQHandler+0xee>
			if (le.link_state == LINK_CONNECTED && le_clk == 0) {
    506c:	491e      	ldr	r1, [pc, #120]	; (50e8 <TIMER0_IRQHandler+0x130>)
    506e:	7d0c      	ldrb	r4, [r1, #20]
    5070:	2c03      	cmp	r4, #3
    5072:	d1bd      	bne.n	4ff0 <TIMER0_IRQHandler+0x38>
		uint32_t le_clk = (clkn - le.conn_epoch) & 0x03;
    5074:	698c      	ldr	r4, [r1, #24]
    5076:	1b00      	subs	r0, r0, r4
			if (le.link_state == LINK_CONNECTED && le_clk == 0) {
    5078:	0784      	lsls	r4, r0, #30
    507a:	d1b9      	bne.n	4ff0 <TIMER0_IRQHandler+0x38>
				--le.interval_timer;
    507c:	8b88      	ldrh	r0, [r1, #28]
    507e:	3801      	subs	r0, #1
    5080:	b280      	uxth	r0, r0
    5082:	8388      	strh	r0, [r1, #28]
				if (le.interval_timer == 0) {
    5084:	8b88      	ldrh	r0, [r1, #28]
    5086:	b280      	uxth	r0, r0
    5088:	b940      	cbnz	r0, 509c <TIMER0_IRQHandler+0xe4>
					do_hop = 1;
    508a:	2001      	movs	r0, #1
    508c:	72d0      	strb	r0, [r2, #11]
					++le.conn_count;
    508e:	8c0a      	ldrh	r2, [r1, #32]
    5090:	4402      	add	r2, r0
    5092:	b292      	uxth	r2, r2
    5094:	840a      	strh	r2, [r1, #32]
					le.interval_timer = le.conn_interval;
    5096:	8bca      	ldrh	r2, [r1, #30]
    5098:	838a      	strh	r2, [r1, #28]
    509a:	e7a9      	b.n	4ff0 <TIMER0_IRQHandler+0x38>
					TXLED_CLR; // hack!
    509c:	f44f 7180 	mov.w	r1, #256	; 0x100
    50a0:	4a12      	ldr	r2, [pc, #72]	; (50ec <TIMER0_IRQHandler+0x134>)
    50a2:	6011      	str	r1, [r2, #0]
    50a4:	e7a4      	b.n	4ff0 <TIMER0_IRQHandler+0x38>
		else if (hop_mode == HOP_AFH) {
    50a6:	7a91      	ldrb	r1, [r2, #10]
    50a8:	2905      	cmp	r1, #5
    50aa:	d1a1      	bne.n	4ff0 <TIMER0_IRQHandler+0x38>
			if( (last_hop + hop_timeout) == clkn ) {
    50ac:	490e      	ldr	r1, [pc, #56]	; (50e8 <TIMER0_IRQHandler+0x130>)
    50ae:	4810      	ldr	r0, [pc, #64]	; (50f0 <TIMER0_IRQHandler+0x138>)
    50b0:	f8b1 104e 	ldrh.w	r1, [r1, #78]	; 0x4e
    50b4:	6804      	ldr	r4, [r0, #0]
    50b6:	b289      	uxth	r1, r1
    50b8:	6818      	ldr	r0, [r3, #0]
    50ba:	4421      	add	r1, r4
    50bc:	4281      	cmp	r1, r0
    50be:	d197      	bne.n	4ff0 <TIMER0_IRQHandler+0x38>
    50c0:	e7ce      	b.n	5060 <TIMER0_IRQHandler+0xa8>
    50c2:	bf00      	nop
    50c4:	10001360 	.word	0x10001360
    50c8:	1000136c 	.word	0x1000136c
    50cc:	10000b3c 	.word	0x10000b3c
    50d0:	10001824 	.word	0x10001824
    50d4:	100014ba 	.word	0x100014ba
    50d8:	100017ec 	.word	0x100017ec
    50dc:	10001364 	.word	0x10001364
    50e0:	10001368 	.word	0x10001368
    50e4:	40004018 	.word	0x40004018
    50e8:	10000450 	.word	0x10000450
    50ec:	2009c03c 	.word	0x2009c03c
    50f0:	10001348 	.word	0x10001348

000050f4 <EINT3_IRQHandler>:
	IO2IntClr   = PIN_GIO6; // clear interrupt
    50f4:	2204      	movs	r2, #4
    50f6:	4b08      	ldr	r3, [pc, #32]	; (5118 <EINT3_IRQHandler+0x24>)
    50f8:	601a      	str	r2, [r3, #0]
	DIO_SSEL_CLR;           // enable SPI
    50fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    50fe:	4b07      	ldr	r3, [pc, #28]	; (511c <EINT3_IRQHandler+0x28>)
    5100:	601a      	str	r2, [r3, #0]
	cs_trigger  = 1;        // signal trigger
    5102:	2201      	movs	r2, #1
    5104:	4b06      	ldr	r3, [pc, #24]	; (5120 <EINT3_IRQHandler+0x2c>)
    5106:	701a      	strb	r2, [r3, #0]
	if (hop_mode == HOP_BLUETOOTH)
    5108:	4b06      	ldr	r3, [pc, #24]	; (5124 <EINT3_IRQHandler+0x30>)
    510a:	7a9a      	ldrb	r2, [r3, #10]
    510c:	2a02      	cmp	r2, #2
		dma_discard = 0;
    510e:	bf04      	itt	eq
    5110:	2200      	moveq	r2, #0
    5112:	741a      	strbeq	r2, [r3, #16]
}
    5114:	4770      	bx	lr
    5116:	bf00      	nop
    5118:	400280ac 	.word	0x400280ac
    511c:	2009c09c 	.word	0x2009c09c
    5120:	10001865 	.word	0x10001865
    5124:	10000b3c 	.word	0x10000b3c

00005128 <legacy_DMA_IRQHandler>:
{
    5128:	b510      	push	{r4, lr}
	if ( mode == MODE_RX_SYMBOLS
    512a:	4b29      	ldr	r3, [pc, #164]	; (51d0 <legacy_DMA_IRQHandler+0xa8>)
    512c:	7c5a      	ldrb	r2, [r3, #17]
    512e:	2a01      	cmp	r2, #1
    5130:	d011      	beq.n	5156 <legacy_DMA_IRQHandler+0x2e>
	   || mode == MODE_BT_FOLLOW
    5132:	7c5a      	ldrb	r2, [r3, #17]
    5134:	2a08      	cmp	r2, #8
    5136:	d00e      	beq.n	5156 <legacy_DMA_IRQHandler+0x2e>
	   || mode == MODE_SPECAN
    5138:	7c5a      	ldrb	r2, [r3, #17]
    513a:	2a04      	cmp	r2, #4
    513c:	d00b      	beq.n	5156 <legacy_DMA_IRQHandler+0x2e>
	   || mode == MODE_BT_FOLLOW_LE
    513e:	7c5a      	ldrb	r2, [r3, #17]
    5140:	2a09      	cmp	r2, #9
    5142:	d008      	beq.n	5156 <legacy_DMA_IRQHandler+0x2e>
	   || mode == MODE_BT_PROMISC_LE
    5144:	7c5a      	ldrb	r2, [r3, #17]
    5146:	2a0a      	cmp	r2, #10
    5148:	d005      	beq.n	5156 <legacy_DMA_IRQHandler+0x2e>
	   || mode == MODE_BT_SLAVE_LE
    514a:	7c5a      	ldrb	r2, [r3, #17]
    514c:	2a0c      	cmp	r2, #12
    514e:	d002      	beq.n	5156 <legacy_DMA_IRQHandler+0x2e>
	   || mode == MODE_RX_GENERIC)
    5150:	7c5a      	ldrb	r2, [r3, #17]
    5152:	2a0f      	cmp	r2, #15
    5154:	d13a      	bne.n	51cc <legacy_DMA_IRQHandler+0xa4>
		if (DMACIntStat & (1 << 0)) {
    5156:	4a1f      	ldr	r2, [pc, #124]	; (51d4 <legacy_DMA_IRQHandler+0xac>)
    5158:	6812      	ldr	r2, [r2, #0]
    515a:	07d1      	lsls	r1, r2, #31
    515c:	d536      	bpl.n	51cc <legacy_DMA_IRQHandler+0xa4>
			if (DMACIntTCStat & (1 << 0)) {
    515e:	4a1e      	ldr	r2, [pc, #120]	; (51d8 <legacy_DMA_IRQHandler+0xb0>)
    5160:	6812      	ldr	r2, [r2, #0]
    5162:	07d2      	lsls	r2, r2, #31
    5164:	d527      	bpl.n	51b6 <legacy_DMA_IRQHandler+0x8e>
				DMACIntTCClear = (1 << 0);
    5166:	2101      	movs	r1, #1
    5168:	4a1c      	ldr	r2, [pc, #112]	; (51dc <legacy_DMA_IRQHandler+0xb4>)
				idle_buf_clk100ns  = CLK100NS;
    516a:	f640 4435 	movw	r4, #3125	; 0xc35
				DMACIntTCClear = (1 << 0);
    516e:	6011      	str	r1, [r2, #0]
				if (hop_mode == HOP_BLUETOOTH)
    5170:	7a9a      	ldrb	r2, [r3, #10]
				idle_buf_clk100ns  = CLK100NS;
    5172:	481b      	ldr	r0, [pc, #108]	; (51e0 <legacy_DMA_IRQHandler+0xb8>)
				if (hop_mode == HOP_BLUETOOTH)
    5174:	2a02      	cmp	r2, #2
					DIO_SSEL_SET;
    5176:	bf02      	ittt	eq
    5178:	f04f 5180 	moveq.w	r1, #268435456	; 0x10000000
    517c:	4a19      	ldreq	r2, [pc, #100]	; (51e4 <legacy_DMA_IRQHandler+0xbc>)
    517e:	6011      	streq	r1, [r2, #0]
				idle_buf_clk100ns  = CLK100NS;
    5180:	4919      	ldr	r1, [pc, #100]	; (51e8 <legacy_DMA_IRQHandler+0xc0>)
    5182:	680a      	ldr	r2, [r1, #0]
    5184:	6800      	ldr	r0, [r0, #0]
    5186:	f3c2 0213 	ubfx	r2, r2, #0, #20
    518a:	fb04 0202 	mla	r2, r4, r2, r0
    518e:	605a      	str	r2, [r3, #4]
				idle_buf_clkn_high = (clkn >> 20) & 0xff;
    5190:	680a      	ldr	r2, [r1, #0]
    5192:	f3c2 5207 	ubfx	r2, r2, #20, #8
    5196:	709a      	strb	r2, [r3, #2]
				idle_buf_channel   = channel;
    5198:	4a14      	ldr	r2, [pc, #80]	; (51ec <legacy_DMA_IRQHandler+0xc4>)
    519a:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
    519e:	b292      	uxth	r2, r2
    51a0:	811a      	strh	r2, [r3, #8]
				volatile uint8_t* tmp = active_rxbuf;
    51a2:	4a13      	ldr	r2, [pc, #76]	; (51f0 <legacy_DMA_IRQHandler+0xc8>)
				active_rxbuf = idle_rxbuf;
    51a4:	4b13      	ldr	r3, [pc, #76]	; (51f4 <legacy_DMA_IRQHandler+0xcc>)
				volatile uint8_t* tmp = active_rxbuf;
    51a6:	6811      	ldr	r1, [r2, #0]
				active_rxbuf = idle_rxbuf;
    51a8:	6818      	ldr	r0, [r3, #0]
    51aa:	6010      	str	r0, [r2, #0]
				++rx_tc;
    51ac:	4a12      	ldr	r2, [pc, #72]	; (51f8 <legacy_DMA_IRQHandler+0xd0>)
				idle_rxbuf = tmp;
    51ae:	6019      	str	r1, [r3, #0]
				++rx_tc;
    51b0:	6813      	ldr	r3, [r2, #0]
    51b2:	3301      	adds	r3, #1
    51b4:	6013      	str	r3, [r2, #0]
			if (DMACIntErrStat & (1 << 0)) {
    51b6:	4b11      	ldr	r3, [pc, #68]	; (51fc <legacy_DMA_IRQHandler+0xd4>)
    51b8:	681b      	ldr	r3, [r3, #0]
    51ba:	07db      	lsls	r3, r3, #31
    51bc:	d506      	bpl.n	51cc <legacy_DMA_IRQHandler+0xa4>
				DMACIntErrClr = (1 << 0);
    51be:	2201      	movs	r2, #1
    51c0:	4b0f      	ldr	r3, [pc, #60]	; (5200 <legacy_DMA_IRQHandler+0xd8>)
    51c2:	601a      	str	r2, [r3, #0]
				++rx_err;
    51c4:	4a0f      	ldr	r2, [pc, #60]	; (5204 <legacy_DMA_IRQHandler+0xdc>)
    51c6:	6813      	ldr	r3, [r2, #0]
    51c8:	3301      	adds	r3, #1
    51ca:	6013      	str	r3, [r2, #0]
}
    51cc:	bd10      	pop	{r4, pc}
    51ce:	bf00      	nop
    51d0:	10000b3c 	.word	0x10000b3c
    51d4:	50004000 	.word	0x50004000
    51d8:	50004004 	.word	0x50004004
    51dc:	50004008 	.word	0x50004008
    51e0:	40004008 	.word	0x40004008
    51e4:	2009c098 	.word	0x2009c098
    51e8:	1000136c 	.word	0x1000136c
    51ec:	10000450 	.word	0x10000450
    51f0:	100013ac 	.word	0x100013ac
    51f4:	100014c8 	.word	0x100014c8
    51f8:	1000134c 	.word	0x1000134c
    51fc:	5000400c 	.word	0x5000400c
    5200:	50004010 	.word	0x50004010
    5204:	10001860 	.word	0x10001860

00005208 <DMA_IRQHandler>:
void DMA_IRQHandler(void) {
    5208:	b508      	push	{r3, lr}
	if (mode == MODE_BT_FOLLOW_LE)
    520a:	4b11      	ldr	r3, [pc, #68]	; (5250 <DMA_IRQHandler+0x48>)
    520c:	7c5b      	ldrb	r3, [r3, #17]
    520e:	2b09      	cmp	r3, #9
    5210:	d11a      	bne.n	5248 <DMA_IRQHandler+0x40>
		le_DMA_IRQHandler();
    5212:	f002 fdbf 	bl	7d94 <le_DMA_IRQHandler>
	if (DMACIntStat & (1 << 7)) {
    5216:	4b0f      	ldr	r3, [pc, #60]	; (5254 <DMA_IRQHandler+0x4c>)
    5218:	681b      	ldr	r3, [r3, #0]
    521a:	0619      	lsls	r1, r3, #24
    521c:	d517      	bpl.n	524e <DMA_IRQHandler+0x46>
		if (DMACIntTCStat & (1 << 7)) {
    521e:	4b0e      	ldr	r3, [pc, #56]	; (5258 <DMA_IRQHandler+0x50>)
    5220:	681b      	ldr	r3, [r3, #0]
    5222:	061a      	lsls	r2, r3, #24
    5224:	d505      	bpl.n	5232 <DMA_IRQHandler+0x2a>
			DMACIntTCClear = (1 << 7);
    5226:	2280      	movs	r2, #128	; 0x80
    5228:	4b0c      	ldr	r3, [pc, #48]	; (525c <DMA_IRQHandler+0x54>)
    522a:	601a      	str	r2, [r3, #0]
			debug_dma_active = 0;
    522c:	2200      	movs	r2, #0
    522e:	4b0c      	ldr	r3, [pc, #48]	; (5260 <DMA_IRQHandler+0x58>)
    5230:	601a      	str	r2, [r3, #0]
		if (DMACIntErrStat & (1 << 7)) {
    5232:	4b0c      	ldr	r3, [pc, #48]	; (5264 <DMA_IRQHandler+0x5c>)
    5234:	681b      	ldr	r3, [r3, #0]
    5236:	061b      	lsls	r3, r3, #24
    5238:	d509      	bpl.n	524e <DMA_IRQHandler+0x46>
			DMACIntErrClr = (1 << 7);
    523a:	2280      	movs	r2, #128	; 0x80
    523c:	4b0a      	ldr	r3, [pc, #40]	; (5268 <DMA_IRQHandler+0x60>)
    523e:	601a      	str	r2, [r3, #0]
			USRLED_SET;
    5240:	2202      	movs	r2, #2
    5242:	4b0a      	ldr	r3, [pc, #40]	; (526c <DMA_IRQHandler+0x64>)
    5244:	601a      	str	r2, [r3, #0]
			while (1) { }
    5246:	e7fe      	b.n	5246 <DMA_IRQHandler+0x3e>
		legacy_DMA_IRQHandler();
    5248:	f7ff ff6e 	bl	5128 <legacy_DMA_IRQHandler>
    524c:	e7e3      	b.n	5216 <DMA_IRQHandler+0xe>
}
    524e:	bd08      	pop	{r3, pc}
    5250:	10000b3c 	.word	0x10000b3c
    5254:	50004000 	.word	0x50004000
    5258:	50004004 	.word	0x50004004
    525c:	50004008 	.word	0x50004008
    5260:	100012a8 	.word	0x100012a8
    5264:	5000400c 	.word	0x5000400c
    5268:	50004010 	.word	0x50004010
    526c:	2009c038 	.word	0x2009c038

00005270 <le_transmit>:
{
    5270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5274:	b0c1      	sub	sp, #260	; 0x104
    5276:	460c      	mov	r4, r1
    5278:	4690      	mov	r8, r2
	uint32_t sync = rbit(aa);
    527a:	f004 fb93 	bl	99a4 <rbit>
	int idx = whitening_index[btle_channel_index(channel)];
    527e:	4e5e      	ldr	r6, [pc, #376]	; (53f8 <le_transmit+0x188>)
	uint32_t sync = rbit(aa);
    5280:	4605      	mov	r5, r0
	int idx = whitening_index[btle_channel_index(channel)];
    5282:	f8b6 004c 	ldrh.w	r0, [r6, #76]	; 0x4c
    5286:	4f5d      	ldr	r7, [pc, #372]	; (53fc <le_transmit+0x18c>)
    5288:	b280      	uxth	r0, r0
    528a:	f001 fdad 	bl	6de8 <btle_channel_index>
			idx = (idx + 1) % sizeof(whitening);
    528e:	f04f 097f 	mov.w	r9, #127	; 0x7f
	int idx = whitening_index[btle_channel_index(channel)];
    5292:	5c39      	ldrb	r1, [r7, r0]
	for (i = 0; i < len; ++i) {
    5294:	46ee      	mov	lr, sp
    5296:	2000      	movs	r0, #0
    5298:	4284      	cmp	r4, r0
    529a:	d872      	bhi.n	5382 <le_transmit+0x112>
	cc2400_set(MANAND,  0x7fff);
    529c:	f647 71ff 	movw	r1, #32767	; 0x7fff
    52a0:	200d      	movs	r0, #13
    52a2:	f004 fc74 	bl	9b8e <cc2400_set>
	cc2400_set(LMTST,   0x2b22);    // LNA and receive mixers test register
    52a6:	f642 3122 	movw	r1, #11042	; 0x2b22
    52aa:	2012      	movs	r0, #18
    52ac:	f004 fc6f 	bl	9b8e <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);    // no PRNG
    52b0:	f241 314b 	movw	r1, #4939	; 0x134b
    52b4:	2014      	movs	r0, #20
    52b6:	f004 fc6a 	bl	9b8e <cc2400_set>
	cc2400_set(GRMDM,   0x0ce1);
    52ba:	f640 41e1 	movw	r1, #3297	; 0xce1
    52be:	2020      	movs	r0, #32
    52c0:	f004 fc65 	bl	9b8e <cc2400_set>
	cc2400_set(FSDIV,   channel);
    52c4:	f8b6 104c 	ldrh.w	r1, [r6, #76]	; 0x4c
    52c8:	2002      	movs	r0, #2
    52ca:	b289      	uxth	r1, r1
    52cc:	f004 fc5f 	bl	9b8e <cc2400_set>
	cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)
    52d0:	210b      	movs	r1, #11
    52d2:	2005      	movs	r0, #5
    52d4:	f004 fc5b 	bl	9b8e <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    52d8:	2140      	movs	r1, #64	; 0x40
    52da:	2003      	movs	r0, #3
    52dc:	f004 fc57 	bl	9b8e <cc2400_set>
	cc2400_set(INT,     0x0010);    // FIFO_THRESHOLD: 16 bytes
    52e0:	2110      	movs	r1, #16
    52e2:	2023      	movs	r0, #35	; 0x23
    52e4:	f004 fc53 	bl	9b8e <cc2400_set>
	cc2400_set(SYNCL,   sync & 0xffff);
    52e8:	b2a9      	uxth	r1, r5
    52ea:	202c      	movs	r0, #44	; 0x2c
    52ec:	f004 fc4f 	bl	9b8e <cc2400_set>
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);
    52f0:	0c29      	lsrs	r1, r5, #16
    52f2:	202d      	movs	r0, #45	; 0x2d
    52f4:	f004 fc4b 	bl	9b8e <cc2400_set>
	gio_save = cc2400_get(IOCFG);
    52f8:	2008      	movs	r0, #8
    52fa:	f004 fc3f 	bl	9b7c <cc2400_get>
	cc2400_set(IOCFG, (GIO_FIFO_EMPTY << 9) | (gio_save & 0x1ff));
    52fe:	f3c0 0108 	ubfx	r1, r0, #0, #9
	gio_save = cc2400_get(IOCFG);
    5302:	4605      	mov	r5, r0
	cc2400_set(IOCFG, (GIO_FIFO_EMPTY << 9) | (gio_save & 0x1ff));
    5304:	f441 4198 	orr.w	r1, r1, #19456	; 0x4c00
    5308:	2008      	movs	r0, #8
    530a:	f004 fc40 	bl	9b8e <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    530e:	f004 fcd7 	bl	9cc0 <cc2400_status>
    5312:	0640      	lsls	r0, r0, #25
    5314:	d5fb      	bpl.n	530e <le_transmit+0x9e>
	cc2400_strobe(SFSON);
    5316:	2061      	movs	r0, #97	; 0x61
    5318:	f004 fcd9 	bl	9cce <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    531c:	f004 fcd0 	bl	9cc0 <cc2400_status>
    5320:	0741      	lsls	r1, r0, #29
    5322:	d5fb      	bpl.n	531c <le_transmit+0xac>
	TXLED_SET;
    5324:	f44f 7280 	mov.w	r2, #256	; 0x100
    5328:	4b35      	ldr	r3, [pc, #212]	; (5400 <le_transmit+0x190>)
    532a:	601a      	str	r2, [r3, #0]
	PAEN_SET;
    532c:	2280      	movs	r2, #128	; 0x80
    532e:	621a      	str	r2, [r3, #32]
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    5330:	200e      	movs	r0, #14
    5332:	f004 fc23 	bl	9b7c <cc2400_get>
    5336:	f000 001f 	and.w	r0, r0, #31
    533a:	280f      	cmp	r0, #15
    533c:	d1f8      	bne.n	5330 <le_transmit+0xc0>
	i = 0;
    533e:	2700      	movs	r7, #0
	fifo_space = 32; // We start at 32, because the C2400 FIFO overall size is 32 bytes.
    5340:	2320      	movs	r3, #32
		while (!GIO6);
    5342:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 540c <le_transmit+0x19c>
	while (len != 0)
    5346:	2c00      	cmp	r4, #0
    5348:	d13f      	bne.n	53ca <le_transmit+0x15a>
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    534a:	200e      	movs	r0, #14
    534c:	f004 fc16 	bl	9b7c <cc2400_get>
    5350:	f000 001f 	and.w	r0, r0, #31
    5354:	280f      	cmp	r0, #15
    5356:	d1f8      	bne.n	534a <le_transmit+0xda>
	TXLED_CLR;
    5358:	f44f 7280 	mov.w	r2, #256	; 0x100
    535c:	4b29      	ldr	r3, [pc, #164]	; (5404 <le_transmit+0x194>)
	cc2400_strobe(SRFOFF);
    535e:	2064      	movs	r0, #100	; 0x64
	TXLED_CLR;
    5360:	601a      	str	r2, [r3, #0]
	cc2400_strobe(SRFOFF);
    5362:	f004 fcb4 	bl	9cce <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    5366:	f004 fcab 	bl	9cc0 <cc2400_status>
    536a:	0743      	lsls	r3, r0, #29
    536c:	d4fb      	bmi.n	5366 <le_transmit+0xf6>
	PAEN_CLR;
    536e:	2280      	movs	r2, #128	; 0x80
    5370:	4b25      	ldr	r3, [pc, #148]	; (5408 <le_transmit+0x198>)
 	cc2400_set(IOCFG, gio_save);
    5372:	4629      	mov	r1, r5
    5374:	2008      	movs	r0, #8
	PAEN_CLR;
    5376:	601a      	str	r2, [r3, #0]
 	cc2400_set(IOCFG, gio_save);
    5378:	f004 fc09 	bl	9b8e <cc2400_set>
}
    537c:	b041      	add	sp, #260	; 0x104
    537e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		byte = data[i];
    5382:	f04f 0c07 	mov.w	ip, #7
    5386:	f04f 0a00 	mov.w	sl, #0
    538a:	f818 2000 	ldrb.w	r2, [r8, r0]
			bit = (byte & 1) ^ whitening[idx];
    538e:	eb07 0b01 	add.w	fp, r7, r1
    5392:	f89b b028 	ldrb.w	fp, [fp, #40]	; 0x28
    5396:	f002 0301 	and.w	r3, r2, #1
			idx = (idx + 1) % sizeof(whitening);
    539a:	3101      	adds	r1, #1
			bit = (byte & 1) ^ whitening[idx];
    539c:	ea8b 0303 	eor.w	r3, fp, r3
			idx = (idx + 1) % sizeof(whitening);
    53a0:	fbb1 fbf9 	udiv	fp, r1, r9
			txbuf[i] |= bit << (7 - j);
    53a4:	fa03 f30c 	lsl.w	r3, r3, ip
			idx = (idx + 1) % sizeof(whitening);
    53a8:	ebcb 1bcb 	rsb	fp, fp, fp, lsl #7
			txbuf[i] |= bit << (7 - j);
    53ac:	ea43 030a 	orr.w	r3, r3, sl
		for (j = 0; j < 8; ++j) {
    53b0:	f1bc 0c01 	subs.w	ip, ip, #1
			idx = (idx + 1) % sizeof(whitening);
    53b4:	eba1 010b 	sub.w	r1, r1, fp
			byte >>= 1;
    53b8:	ea4f 0252 	mov.w	r2, r2, lsr #1
			txbuf[i] |= bit << (7 - j);
    53bc:	fa5f fa83 	uxtb.w	sl, r3
		for (j = 0; j < 8; ++j) {
    53c0:	d2e5      	bcs.n	538e <le_transmit+0x11e>
    53c2:	f80e ab01 	strb.w	sl, [lr], #1
	for (i = 0; i < len; ++i) {
    53c6:	3001      	adds	r0, #1
    53c8:	e766      	b.n	5298 <le_transmit+0x28>
		while (!GIO6);
    53ca:	f8d8 2000 	ldr.w	r2, [r8]
    53ce:	0752      	lsls	r2, r2, #29
    53d0:	d5fb      	bpl.n	53ca <le_transmit+0x15a>
		if (len >= fifo_space) {
    53d2:	429c      	cmp	r4, r3
			len -= fifo_space;
    53d4:	bf23      	ittte	cs
    53d6:	1ae4      	subcs	r4, r4, r3
    53d8:	b2e6      	uxtbcs	r6, r4
			tx_len = fifo_space;
    53da:	461c      	movcs	r4, r3
			len = 0;
    53dc:	2600      	movcc	r6, #0
		cc2400_fifo_write(tx_len, txbuf + i);
    53de:	4620      	mov	r0, r4
    53e0:	eb0d 0107 	add.w	r1, sp, r7
    53e4:	f004 fbe6 	bl	9bb4 <cc2400_fifo_write>
		cc2400_strobe(STX);
    53e8:	2063      	movs	r0, #99	; 0x63
    53ea:	f004 fc70 	bl	9cce <cc2400_strobe>
		i += tx_len;
    53ee:	4427      	add	r7, r4
		fifo_space = 16;
    53f0:	2310      	movs	r3, #16
		i += tx_len;
    53f2:	4634      	mov	r4, r6
    53f4:	e7a7      	b.n	5346 <le_transmit+0xd6>
    53f6:	bf00      	nop
    53f8:	10000450 	.word	0x10000450
    53fc:	0000abbc 	.word	0x0000abbc
    5400:	2009c038 	.word	0x2009c038
    5404:	2009c03c 	.word	0x2009c03c
    5408:	2009c05c 	.word	0x2009c05c
    540c:	2009c054 	.word	0x2009c054

00005410 <le_jam>:
void le_jam(void) {
    5410:	b508      	push	{r3, lr}
	cc2400_set(MANAND,  0x7fff);
    5412:	f647 71ff 	movw	r1, #32767	; 0x7fff
    5416:	200d      	movs	r0, #13
    5418:	f004 fbb9 	bl	9b8e <cc2400_set>
	cc2400_set(LMTST,   0x2b22);    // LNA and receive mixers test register
    541c:	f642 3122 	movw	r1, #11042	; 0x2b22
    5420:	2012      	movs	r0, #18
    5422:	f004 fbb4 	bl	9b8e <cc2400_set>
	cc2400_set(MDMTST0, 0x234b);    // PRNG, 1 MHz offset
    5426:	f242 314b 	movw	r1, #9035	; 0x234b
    542a:	2014      	movs	r0, #20
    542c:	f004 fbaf 	bl	9b8e <cc2400_set>
	cc2400_set(GRMDM,   0x0c01);
    5430:	f640 4101 	movw	r1, #3073	; 0xc01
    5434:	2020      	movs	r0, #32
    5436:	f004 fbaa 	bl	9b8e <cc2400_set>
	cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)
    543a:	210b      	movs	r1, #11
    543c:	2005      	movs	r0, #5
    543e:	f004 fba6 	bl	9b8e <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    5442:	2140      	movs	r1, #64	; 0x40
    5444:	2003      	movs	r0, #3
    5446:	f004 fba2 	bl	9b8e <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    544a:	f004 fc39 	bl	9cc0 <cc2400_status>
    544e:	0642      	lsls	r2, r0, #25
    5450:	d5fb      	bpl.n	544a <le_jam+0x3a>
	cc2400_strobe(SFSON);
    5452:	2061      	movs	r0, #97	; 0x61
    5454:	f004 fc3b 	bl	9cce <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    5458:	f004 fc32 	bl	9cc0 <cc2400_status>
    545c:	0743      	lsls	r3, r0, #29
    545e:	d5fb      	bpl.n	5458 <le_jam+0x48>
	TXLED_SET;
    5460:	f44f 7280 	mov.w	r2, #256	; 0x100
    5464:	4b07      	ldr	r3, [pc, #28]	; (5484 <le_jam+0x74>)
    5466:	601a      	str	r2, [r3, #0]
	PAEN_SET;
    5468:	2280      	movs	r2, #128	; 0x80
    546a:	621a      	str	r2, [r3, #32]
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    546c:	200e      	movs	r0, #14
    546e:	f004 fb85 	bl	9b7c <cc2400_get>
    5472:	f000 001f 	and.w	r0, r0, #31
    5476:	280f      	cmp	r0, #15
    5478:	d1f8      	bne.n	546c <le_jam+0x5c>
}
    547a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	cc2400_strobe(STX);
    547e:	2063      	movs	r0, #99	; 0x63
    5480:	f004 bc25 	b.w	9cce <cc2400_strobe>
    5484:	2009c038 	.word	0x2009c038

00005488 <hop>:
{
    5488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	do_hop = 0;
    548a:	2300      	movs	r3, #0
    548c:	4c6a      	ldr	r4, [pc, #424]	; (5638 <hop+0x1b0>)
	last_hop = clkn;
    548e:	4a6b      	ldr	r2, [pc, #428]	; (563c <hop+0x1b4>)
	do_hop = 0;
    5490:	72e3      	strb	r3, [r4, #11]
	last_hop = clkn;
    5492:	4b6b      	ldr	r3, [pc, #428]	; (5640 <hop+0x1b8>)
    5494:	6819      	ldr	r1, [r3, #0]
    5496:	6011      	str	r1, [r2, #0]
	if (hop_mode == HOP_NONE) {
    5498:	7aa2      	ldrb	r2, [r4, #10]
    549a:	b952      	cbnz	r2, 54b2 <hop+0x2a>
		if (cc2400_get(FSDIV) == (channel - 1))
    549c:	2002      	movs	r0, #2
    549e:	f004 fb6d 	bl	9b7c <cc2400_get>
    54a2:	4b68      	ldr	r3, [pc, #416]	; (5644 <hop+0x1bc>)
    54a4:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
    54a8:	b29b      	uxth	r3, r3
    54aa:	3b01      	subs	r3, #1
    54ac:	4298      	cmp	r0, r3
    54ae:	d13d      	bne.n	552c <hop+0xa4>
}
    54b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if (hop_mode == HOP_SWEEP) {
    54b2:	7aa2      	ldrb	r2, [r4, #10]
    54b4:	2a01      	cmp	r2, #1
    54b6:	d169      	bne.n	558c <hop+0x104>
			channel += 32;
    54b8:	4a62      	ldr	r2, [pc, #392]	; (5644 <hop+0x1bc>)
		} while ( used_channels != 0 && afh_enabled && !( afh_map[(channel-2402)/8] & 0x1<<((channel-2402)%8) ) );
    54ba:	4b63      	ldr	r3, [pc, #396]	; (5648 <hop+0x1c0>)
    54bc:	4610      	mov	r0, r2
    54be:	781e      	ldrb	r6, [r3, #0]
    54c0:	4b62      	ldr	r3, [pc, #392]	; (564c <hop+0x1c4>)
    54c2:	4d63      	ldr	r5, [pc, #396]	; (5650 <hop+0x1c8>)
    54c4:	781f      	ldrb	r7, [r3, #0]
			channel += 32;
    54c6:	f8b2 304c 	ldrh.w	r3, [r2, #76]	; 0x4c
    54ca:	3320      	adds	r3, #32
    54cc:	b29b      	uxth	r3, r3
    54ce:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
			if (channel > 2480)
    54d2:	f8b2 304c 	ldrh.w	r3, [r2, #76]	; 0x4c
    54d6:	b29b      	uxth	r3, r3
    54d8:	f5b3 6f1b 	cmp.w	r3, #2480	; 0x9b0
				channel -= 79;
    54dc:	bf81      	itttt	hi
    54de:	f8b2 304c 	ldrhhi.w	r3, [r2, #76]	; 0x4c
    54e2:	3b4f      	subhi	r3, #79	; 0x4f
    54e4:	b29b      	uxthhi	r3, r3
    54e6:	f8a2 304c 	strhhi.w	r3, [r2, #76]	; 0x4c
		} while ( used_channels != 0 && afh_enabled && !( afh_map[(channel-2402)/8] & 0x1<<((channel-2402)%8) ) );
    54ea:	b1fe      	cbz	r6, 552c <hop+0xa4>
    54ec:	b1f7      	cbz	r7, 552c <hop+0xa4>
    54ee:	f8b0 c04c 	ldrh.w	ip, [r0, #76]	; 0x4c
    54f2:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
    54f6:	fa1f fc8c 	uxth.w	ip, ip
    54fa:	f6ac 1162 	subw	r1, ip, #2402	; 0x962
    54fe:	2900      	cmp	r1, #0
    5500:	b29b      	uxth	r3, r3
    5502:	bfb8      	it	lt
    5504:	f6ac 115b 	subwlt	r1, ip, #2395	; 0x95b
    5508:	f6a3 1362 	subw	r3, r3, #2402	; 0x962
    550c:	f1d3 0c00 	rsbs	ip, r3, #0
    5510:	ea4f 01e1 	mov.w	r1, r1, asr #3
    5514:	5c69      	ldrb	r1, [r5, r1]
    5516:	f00c 0c07 	and.w	ip, ip, #7
    551a:	f003 0307 	and.w	r3, r3, #7
    551e:	bf58      	it	pl
    5520:	f1cc 0300 	rsbpl	r3, ip, #0
    5524:	fa41 f303 	asr.w	r3, r1, r3
    5528:	07db      	lsls	r3, r3, #31
    552a:	d5cc      	bpl.n	54c6 <hop+0x3e>
	cc2400_strobe(SRFOFF);
    552c:	2064      	movs	r0, #100	; 0x64
    552e:	f004 fbce 	bl	9cce <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    5532:	f004 fbc5 	bl	9cc0 <cc2400_status>
    5536:	0742      	lsls	r2, r0, #29
    5538:	d4fb      	bmi.n	5532 <hop+0xaa>
	if(mode == MODE_TX_SYMBOLS)
    553a:	4d42      	ldr	r5, [pc, #264]	; (5644 <hop+0x1bc>)
    553c:	7c63      	ldrb	r3, [r4, #17]
		cc2400_set(FSDIV, channel);
    553e:	f8b5 104c 	ldrh.w	r1, [r5, #76]	; 0x4c
	if(mode == MODE_TX_SYMBOLS)
    5542:	2b02      	cmp	r3, #2
		cc2400_set(FSDIV, channel - 1);
    5544:	bf18      	it	ne
    5546:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
	if(mode == MODE_TX_SYMBOLS)
    554a:	b2d8      	uxtb	r0, r3
		cc2400_set(FSDIV, channel);
    554c:	bf0e      	itee	eq
    554e:	b289      	uxtheq	r1, r1
		cc2400_set(FSDIV, channel - 1);
    5550:	2002      	movne	r0, #2
    5552:	b289      	uxthne	r1, r1
    5554:	f004 fb1b 	bl	9b8e <cc2400_set>
	if (hop_mode > 0) {
    5558:	7aa3      	ldrb	r3, [r4, #10]
    555a:	b123      	cbz	r3, 5566 <hop+0xde>
		cs_threshold_calc_and_set(channel);
    555c:	f8b5 004c 	ldrh.w	r0, [r5, #76]	; 0x4c
    5560:	b280      	uxth	r0, r0
    5562:	f001 fea1 	bl	72a8 <cs_threshold_calc_and_set>
	cc2400_strobe(SFSON);
    5566:	2061      	movs	r0, #97	; 0x61
    5568:	f004 fbb1 	bl	9cce <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    556c:	f004 fba8 	bl	9cc0 <cc2400_status>
    5570:	0743      	lsls	r3, r0, #29
    5572:	d5fb      	bpl.n	556c <hop+0xe4>
	dma_discard = 1;
    5574:	2301      	movs	r3, #1
    5576:	7423      	strb	r3, [r4, #16]
	if(mode == MODE_TX_SYMBOLS) {
    5578:	7c63      	ldrb	r3, [r4, #17]
    557a:	2b02      	cmp	r3, #2
		cc2400_strobe(STX);
    557c:	bf08      	it	eq
    557e:	2063      	moveq	r0, #99	; 0x63
}
    5580:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		cc2400_strobe(SRX);
    5584:	bf18      	it	ne
    5586:	2062      	movne	r0, #98	; 0x62
    5588:	f004 bba1 	b.w	9cce <cc2400_strobe>
	else if (hop_mode == HOP_AFH) {
    558c:	7aa2      	ldrb	r2, [r4, #10]
    558e:	2a05      	cmp	r2, #5
    5590:	d135      	bne.n	55fe <hop+0x176>
			channel += 32;
    5592:	4a2c      	ldr	r2, [pc, #176]	; (5644 <hop+0x1bc>)
		} while( used_channels != 79 && (afh_map[(channel-2402)/8] & 0x1<<((channel-2402)%8)) );
    5594:	4b2c      	ldr	r3, [pc, #176]	; (5648 <hop+0x1c0>)
    5596:	4610      	mov	r0, r2
    5598:	781e      	ldrb	r6, [r3, #0]
    559a:	4d2d      	ldr	r5, [pc, #180]	; (5650 <hop+0x1c8>)
			channel += 32;
    559c:	f8b2 304c 	ldrh.w	r3, [r2, #76]	; 0x4c
    55a0:	3320      	adds	r3, #32
    55a2:	b29b      	uxth	r3, r3
    55a4:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
			if (channel > 2480)
    55a8:	f8b2 304c 	ldrh.w	r3, [r2, #76]	; 0x4c
    55ac:	b29b      	uxth	r3, r3
    55ae:	f5b3 6f1b 	cmp.w	r3, #2480	; 0x9b0
				channel -= 79;
    55b2:	bf81      	itttt	hi
    55b4:	f8b2 304c 	ldrhhi.w	r3, [r2, #76]	; 0x4c
    55b8:	3b4f      	subhi	r3, #79	; 0x4f
    55ba:	b29b      	uxthhi	r3, r3
    55bc:	f8a2 304c 	strhhi.w	r3, [r2, #76]	; 0x4c
		} while( used_channels != 79 && (afh_map[(channel-2402)/8] & 0x1<<((channel-2402)%8)) );
    55c0:	2e4f      	cmp	r6, #79	; 0x4f
    55c2:	d0b3      	beq.n	552c <hop+0xa4>
    55c4:	f8b0 704c 	ldrh.w	r7, [r0, #76]	; 0x4c
    55c8:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
    55cc:	b2bf      	uxth	r7, r7
    55ce:	f6a7 1162 	subw	r1, r7, #2402	; 0x962
    55d2:	2900      	cmp	r1, #0
    55d4:	b29b      	uxth	r3, r3
    55d6:	bfb8      	it	lt
    55d8:	f6a7 115b 	subwlt	r1, r7, #2395	; 0x95b
    55dc:	f6a3 1362 	subw	r3, r3, #2402	; 0x962
    55e0:	425f      	negs	r7, r3
    55e2:	ea4f 01e1 	mov.w	r1, r1, asr #3
    55e6:	5c69      	ldrb	r1, [r5, r1]
    55e8:	f007 0707 	and.w	r7, r7, #7
    55ec:	f003 0307 	and.w	r3, r3, #7
    55f0:	bf58      	it	pl
    55f2:	427b      	negpl	r3, r7
    55f4:	fa41 f303 	asr.w	r3, r1, r3
    55f8:	07d9      	lsls	r1, r3, #31
    55fa:	d4cf      	bmi.n	559c <hop+0x114>
    55fc:	e796      	b.n	552c <hop+0xa4>
	else if (hop_mode == HOP_BLUETOOTH) {
    55fe:	7aa2      	ldrb	r2, [r4, #10]
    5600:	2a02      	cmp	r2, #2
    5602:	d106      	bne.n	5612 <hop+0x18a>
		channel = next_hop(clkn);
    5604:	6818      	ldr	r0, [r3, #0]
    5606:	f001 fb43 	bl	6c90 <next_hop>
    560a:	4b0e      	ldr	r3, [pc, #56]	; (5644 <hop+0x1bc>)
    560c:	f8a3 004c 	strh.w	r0, [r3, #76]	; 0x4c
    5610:	e78c      	b.n	552c <hop+0xa4>
	else if (hop_mode == HOP_BTLE) {
    5612:	7aa3      	ldrb	r3, [r4, #10]
    5614:	2b03      	cmp	r3, #3
    5616:	d106      	bne.n	5626 <hop+0x19e>
		channel = btle_next_hop(&le);
    5618:	4d0a      	ldr	r5, [pc, #40]	; (5644 <hop+0x1bc>)
    561a:	4628      	mov	r0, r5
    561c:	f001 fc14 	bl	6e48 <btle_next_hop>
    5620:	f8a5 004c 	strh.w	r0, [r5, #76]	; 0x4c
    5624:	e782      	b.n	552c <hop+0xa4>
	else if (hop_mode == HOP_DIRECT) {
    5626:	7aa3      	ldrb	r3, [r4, #10]
    5628:	2b04      	cmp	r3, #4
		channel = hop_direct_channel;
    562a:	bf01      	itttt	eq
    562c:	89a3      	ldrheq	r3, [r4, #12]
    562e:	4a05      	ldreq	r2, [pc, #20]	; (5644 <hop+0x1bc>)
    5630:	b29b      	uxtheq	r3, r3
    5632:	f8a2 304c 	strheq.w	r3, [r2, #76]	; 0x4c
    5636:	e779      	b.n	552c <hop+0xa4>
    5638:	10000b3c 	.word	0x10000b3c
    563c:	10001348 	.word	0x10001348
    5640:	1000136c 	.word	0x1000136c
    5644:	10000450 	.word	0x10000450
    5648:	10001351 	.word	0x10001351
    564c:	100017ef 	.word	0x100017ef
    5650:	10001353 	.word	0x10001353

00005654 <bt_stream_rx>:
{
    5654:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	RXLED_CLR;
    5658:	2310      	movs	r3, #16
    565a:	4e4d      	ldr	r6, [pc, #308]	; (5790 <bt_stream_rx+0x13c>)
	while ( requested_mode == MODE_RX_SYMBOLS || requested_mode == MODE_BT_FOLLOW )
    565c:	4f4d      	ldr	r7, [pc, #308]	; (5794 <bt_stream_rx+0x140>)
	RXLED_CLR;
    565e:	6033      	str	r3, [r6, #0]
	usb_queue_init();
    5660:	f001 fd30 	bl	70c4 <usb_queue_init>
	dio_ssp_init();
    5664:	463c      	mov	r4, r7
    5666:	f004 fa01 	bl	9a6c <dio_ssp_init>
	dma_init_rx_symbols();
    566a:	f001 ff0b 	bl	7484 <dma_init_rx_symbols>
	dio_ssp_start();
    566e:	f001 ff85 	bl	757c <dio_ssp_start>
	cc2400_rx();
    5672:	f7fe fe5d 	bl	4330 <cc2400_rx>
	cs_trigger_enable();
    5676:	f001 fe45 	bl	7304 <cs_trigger_enable>
		RXLED_SET;
    567a:	f8df b134 	ldr.w	fp, [pc, #308]	; 57b0 <bt_stream_rx+0x15c>
	while ( requested_mode == MODE_RX_SYMBOLS || requested_mode == MODE_BT_FOLLOW )
    567e:	7cbb      	ldrb	r3, [r7, #18]
    5680:	2b01      	cmp	r3, #1
    5682:	d008      	beq.n	5696 <bt_stream_rx+0x42>
    5684:	7cbb      	ldrb	r3, [r7, #18]
    5686:	2b08      	cmp	r3, #8
    5688:	d005      	beq.n	5696 <bt_stream_rx+0x42>
	dio_ssp_stop();
    568a:	f001 ff97 	bl	75bc <dio_ssp_stop>
}
    568e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	cs_trigger_disable();
    5692:	f001 be4f 	b.w	7334 <cs_trigger_disable>
		RXLED_CLR;
    5696:	2310      	movs	r3, #16
    5698:	6033      	str	r3, [r6, #0]
		rssi_reset();
    569a:	f001 fd8b 	bl	71b4 <rssi_reset>
		rssi_at_trigger = INT8_MIN;
    569e:	f06f 057f 	mvn.w	r5, #127	; 0x7f
		while (!rx_tc) {
    56a2:	f8df 8110 	ldr.w	r8, [pc, #272]	; 57b4 <bt_stream_rx+0x160>
    56a6:	f8df 9110 	ldr.w	r9, [pc, #272]	; 57b8 <bt_stream_rx+0x164>
    56aa:	f8d8 3000 	ldr.w	r3, [r8]
    56ae:	f8df a10c 	ldr.w	sl, [pc, #268]	; 57bc <bt_stream_rx+0x168>
    56b2:	2b00      	cmp	r3, #0
    56b4:	d049      	beq.n	574a <bt_stream_rx+0xf6>
		RXLED_SET;
    56b6:	2310      	movs	r3, #16
		if (rx_err) {
    56b8:	4d37      	ldr	r5, [pc, #220]	; (5798 <bt_stream_rx+0x144>)
		RXLED_SET;
    56ba:	f8cb 3000 	str.w	r3, [fp]
		if (rx_err) {
    56be:	682b      	ldr	r3, [r5, #0]
    56c0:	b11b      	cbz	r3, 56ca <bt_stream_rx+0x76>
			status |= DMA_ERROR;
    56c2:	7863      	ldrb	r3, [r4, #1]
    56c4:	f043 0302 	orr.w	r3, r3, #2
    56c8:	7063      	strb	r3, [r4, #1]
		if (rx_tc > 1)
    56ca:	f8d8 3000 	ldr.w	r3, [r8]
    56ce:	2b01      	cmp	r3, #1
			status |= DMA_OVERFLOW;
    56d0:	bf82      	ittt	hi
    56d2:	7863      	ldrbhi	r3, [r4, #1]
    56d4:	f043 0301 	orrhi.w	r3, r3, #1
    56d8:	7063      	strbhi	r3, [r4, #1]
		if (dma_discard) {
    56da:	7c23      	ldrb	r3, [r4, #16]
    56dc:	b12b      	cbz	r3, 56ea <bt_stream_rx+0x96>
			status |= DISCARD;
    56de:	7863      	ldrb	r3, [r4, #1]
    56e0:	f043 0320 	orr.w	r3, r3, #32
    56e4:	7063      	strb	r3, [r4, #1]
			dma_discard = 0;
    56e6:	2300      	movs	r3, #0
    56e8:	7423      	strb	r3, [r4, #16]
		rssi_iir_update(channel);
    56ea:	4b2c      	ldr	r3, [pc, #176]	; (579c <bt_stream_rx+0x148>)
    56ec:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
    56f0:	b280      	uxth	r0, r0
    56f2:	f001 fd9b 	bl	722c <rssi_iir_update>
		if (cs_trigger || cs_no_squelch) {
    56f6:	4b2a      	ldr	r3, [pc, #168]	; (57a0 <bt_stream_rx+0x14c>)
    56f8:	f899 2000 	ldrb.w	r2, [r9]
    56fc:	781b      	ldrb	r3, [r3, #0]
    56fe:	4313      	orrs	r3, r2
    5700:	d006      	beq.n	5710 <bt_stream_rx+0xbc>
			status |= CS_TRIGGER;
    5702:	7863      	ldrb	r3, [r4, #1]
    5704:	f043 0308 	orr.w	r3, r3, #8
    5708:	7063      	strb	r3, [r4, #1]
			cs_trigger = 0;
    570a:	2300      	movs	r3, #0
    570c:	f889 3000 	strb.w	r3, [r9]
		if (rssi_max >= (cs_threshold_cur + 54)) {
    5710:	4b24      	ldr	r3, [pc, #144]	; (57a4 <bt_stream_rx+0x150>)
    5712:	4a25      	ldr	r2, [pc, #148]	; (57a8 <bt_stream_rx+0x154>)
    5714:	f993 3000 	ldrsb.w	r3, [r3]
    5718:	f992 2000 	ldrsb.w	r2, [r2]
    571c:	3335      	adds	r3, #53	; 0x35
    571e:	4293      	cmp	r3, r2
			status |= RSSI_TRIGGER;
    5720:	bfb8      	it	lt
    5722:	7863      	ldrblt	r3, [r4, #1]
		enqueue(BR_PACKET, (uint8_t*)idle_rxbuf);
    5724:	f04f 0000 	mov.w	r0, #0
			status |= RSSI_TRIGGER;
    5728:	bfbc      	itt	lt
    572a:	f043 0310 	orrlt.w	r3, r3, #16
    572e:	7063      	strblt	r3, [r4, #1]
		enqueue(BR_PACKET, (uint8_t*)idle_rxbuf);
    5730:	4b1e      	ldr	r3, [pc, #120]	; (57ac <bt_stream_rx+0x158>)
    5732:	6819      	ldr	r1, [r3, #0]
    5734:	f7fe feaa 	bl	448c <enqueue>
		handle_usb(clkn);
    5738:	f8da 0000 	ldr.w	r0, [sl]
    573c:	f001 fd26 	bl	718c <handle_usb>
		rx_tc = 0;
    5740:	2300      	movs	r3, #0
    5742:	f8c8 3000 	str.w	r3, [r8]
		rx_err = 0;
    5746:	602b      	str	r3, [r5, #0]
    5748:	e799      	b.n	567e <bt_stream_rx+0x2a>
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    574a:	2006      	movs	r0, #6
    574c:	f004 fa16 	bl	9b7c <cc2400_get>
			if (cs_trigger && (rssi_at_trigger == INT8_MIN)) {
    5750:	f899 3000 	ldrb.w	r3, [r9]
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    5754:	f340 2007 	sbfx	r0, r0, #8, #8
			if (cs_trigger && (rssi_at_trigger == INT8_MIN)) {
    5758:	b15b      	cbz	r3, 5772 <bt_stream_rx+0x11e>
    575a:	f115 0f80 	cmn.w	r5, #128	; 0x80
    575e:	d108      	bne.n	5772 <bt_stream_rx+0x11e>
				rssi = MAX(rssi,(cs_threshold_cur+54));
    5760:	4b10      	ldr	r3, [pc, #64]	; (57a4 <bt_stream_rx+0x150>)
    5762:	f993 5000 	ldrsb.w	r5, [r3]
    5766:	3536      	adds	r5, #54	; 0x36
    5768:	42a8      	cmp	r0, r5
    576a:	bfb8      	it	lt
    576c:	4628      	movlt	r0, r5
    576e:	b245      	sxtb	r5, r0
				rssi_at_trigger = rssi;
    5770:	4628      	mov	r0, r5
			rssi_add(rssi);
    5772:	f001 fd3b 	bl	71ec <rssi_add>
			handle_usb(clkn);
    5776:	f8da 0000 	ldr.w	r0, [sl]
    577a:	f001 fd07 	bl	718c <handle_usb>
			if (do_hop) {
    577e:	7ae3      	ldrb	r3, [r4, #11]
    5780:	b113      	cbz	r3, 5788 <bt_stream_rx+0x134>
				hop();
    5782:	f7ff fe81 	bl	5488 <hop>
    5786:	e790      	b.n	56aa <bt_stream_rx+0x56>
				TXLED_CLR;
    5788:	f44f 7380 	mov.w	r3, #256	; 0x100
    578c:	6033      	str	r3, [r6, #0]
    578e:	e78c      	b.n	56aa <bt_stream_rx+0x56>
    5790:	2009c03c 	.word	0x2009c03c
    5794:	10000b3c 	.word	0x10000b3c
    5798:	10001860 	.word	0x10001860
    579c:	10000450 	.word	0x10000450
    57a0:	100014b8 	.word	0x100014b8
    57a4:	10001864 	.word	0x10001864
    57a8:	10001350 	.word	0x10001350
    57ac:	100014c8 	.word	0x100014c8
    57b0:	2009c038 	.word	0x2009c038
    57b4:	1000134c 	.word	0x1000134c
    57b8:	10001865 	.word	0x10001865
    57bc:	1000136c 	.word	0x1000136c

000057c0 <br_transmit>:
{
    57c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    57c4:	b085      	sub	sp, #20
	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
    57c6:	2400      	movs	r4, #0
    57c8:	4b95      	ldr	r3, [pc, #596]	; (5a20 <br_transmit+0x260>)
    57ca:	f245 5755 	movw	r7, #21845	; 0x5555
    57ce:	e9d3 6502 	ldrd	r6, r5, [r3, #8]
    57d2:	4623      	mov	r3, r4
    57d4:	f006 0201 	and.w	r2, r6, #1
    57d8:	4313      	orrs	r3, r2
    57da:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;
    57de:	ea4f 72d5 	mov.w	r2, r5, lsr #31
	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
    57e2:	bf08      	it	eq
    57e4:	461f      	moveq	r7, r3
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;
    57e6:	2c00      	cmp	r4, #0
    57e8:	bf08      	it	eq
    57ea:	2a01      	cmpeq	r2, #1
		reverse8((target.syncword >> 0) & 0xFF),
    57ec:	b2f0      	uxtb	r0, r6
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;
    57ee:	bf0c      	ite	eq
    57f0:	f04f 08aa 	moveq.w	r8, #170	; 0xaa
    57f4:	f04f 0855 	movne.w	r8, #85	; 0x55
		reverse8((target.syncword >> 0) & 0xFF),
    57f8:	f7fe fd7c 	bl	42f4 <reverse8>
	uint8_t data[16] = {
    57fc:	f88d 0000 	strb.w	r0, [sp]
		reverse8((target.syncword >> 8) & 0xFF),
    5800:	f3c6 2007 	ubfx	r0, r6, #8, #8
    5804:	f7fe fd76 	bl	42f4 <reverse8>
	uint8_t data[16] = {
    5808:	f88d 0001 	strb.w	r0, [sp, #1]
		reverse8((target.syncword >> 16) & 0xFF),
    580c:	f3c6 4007 	ubfx	r0, r6, #16, #8
    5810:	f7fe fd70 	bl	42f4 <reverse8>
	uint8_t data[16] = {
    5814:	f88d 0002 	strb.w	r0, [sp, #2]
		reverse8((target.syncword >> 24) & 0xFF),
    5818:	0e30      	lsrs	r0, r6, #24
    581a:	f7fe fd6b 	bl	42f4 <reverse8>
	uint8_t data[16] = {
    581e:	f88d 0003 	strb.w	r0, [sp, #3]
		reverse8((target.syncword >> 32) & 0xFF),
    5822:	b2e8      	uxtb	r0, r5
    5824:	f7fe fd66 	bl	42f4 <reverse8>
	uint8_t data[16] = {
    5828:	f88d 0004 	strb.w	r0, [sp, #4]
		reverse8((target.syncword >> 40) & 0xFF),
    582c:	f3c5 2007 	ubfx	r0, r5, #8, #8
    5830:	f7fe fd60 	bl	42f4 <reverse8>
	uint8_t data[16] = {
    5834:	f88d 0005 	strb.w	r0, [sp, #5]
		reverse8((target.syncword >> 48) & 0xFF),
    5838:	f3c5 4007 	ubfx	r0, r5, #16, #8
    583c:	f7fe fd5a 	bl	42f4 <reverse8>
	uint8_t data[16] = {
    5840:	f88d 0006 	strb.w	r0, [sp, #6]
		reverse8((target.syncword >> 56) & 0xFF),
    5844:	0e28      	lsrs	r0, r5, #24
    5846:	f7fe fd55 	bl	42f4 <reverse8>
	uint8_t data[16] = {
    584a:	f88d 0007 	strb.w	r0, [sp, #7]
		reverse8(trailer),
    584e:	4640      	mov	r0, r8
    5850:	f7fe fd50 	bl	42f4 <reverse8>
	uint8_t data[16] = {
    5854:	f88d 0008 	strb.w	r0, [sp, #8]
		reverse8(0x77),
    5858:	2077      	movs	r0, #119	; 0x77
    585a:	f7fe fd4b 	bl	42f4 <reverse8>
	uint8_t data[16] = {
    585e:	f88d 0009 	strb.w	r0, [sp, #9]
		reverse8(0x66),
    5862:	2066      	movs	r0, #102	; 0x66
    5864:	f7fe fd46 	bl	42f4 <reverse8>
	uint8_t data[16] = {
    5868:	f88d 000a 	strb.w	r0, [sp, #10]
		reverse8(0x55),
    586c:	2055      	movs	r0, #85	; 0x55
    586e:	f7fe fd41 	bl	42f4 <reverse8>
	uint8_t data[16] = {
    5872:	f88d 000b 	strb.w	r0, [sp, #11]
		reverse8(0x44),
    5876:	2044      	movs	r0, #68	; 0x44
    5878:	f7fe fd3c 	bl	42f4 <reverse8>
	uint8_t data[16] = {
    587c:	f88d 000c 	strb.w	r0, [sp, #12]
		reverse8(0x33),
    5880:	2033      	movs	r0, #51	; 0x33
    5882:	f7fe fd37 	bl	42f4 <reverse8>
	uint8_t data[16] = {
    5886:	f88d 000d 	strb.w	r0, [sp, #13]
		reverse8(0x22),
    588a:	2022      	movs	r0, #34	; 0x22
    588c:	f7fe fd32 	bl	42f4 <reverse8>
	uint8_t data[16] = {
    5890:	f88d 000e 	strb.w	r0, [sp, #14]
		reverse8(0x11)
    5894:	2011      	movs	r0, #17
    5896:	f7fe fd2d 	bl	42f4 <reverse8>
	for(size_t i=0; i<16; i++)
    589a:	4623      	mov	r3, r4
	uint8_t data[16] = {
    589c:	f88d 000f 	strb.w	r0, [sp, #15]
		reversed |= ((data >> i) & 0x01) << (15-i);
    58a0:	fa47 f203 	asr.w	r2, r7, r3
    58a4:	f1c3 010f 	rsb	r1, r3, #15
    58a8:	f002 0201 	and.w	r2, r2, #1
    58ac:	408a      	lsls	r2, r1
	for(size_t i=0; i<16; i++)
    58ae:	3301      	adds	r3, #1
		reversed |= ((data >> i) & 0x01) << (15-i);
    58b0:	4314      	orrs	r4, r2
	for(size_t i=0; i<16; i++)
    58b2:	2b10      	cmp	r3, #16
		reversed |= ((data >> i) & 0x01) << (15-i);
    58b4:	b2a4      	uxth	r4, r4
	for(size_t i=0; i<16; i++)
    58b6:	d1f3      	bne.n	58a0 <br_transmit+0xe0>
	cc2400_set(MANAND,  0x7fff);
    58b8:	f647 71ff 	movw	r1, #32767	; 0x7fff
    58bc:	200d      	movs	r0, #13
    58be:	f004 f966 	bl	9b8e <cc2400_set>
	cc2400_set(LMTST,   0x2b22);    // LNA and receive mixers test register
    58c2:	f642 3122 	movw	r1, #11042	; 0x2b22
    58c6:	2012      	movs	r0, #18
    58c8:	f004 f961 	bl	9b8e <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);    // no PRNG
    58cc:	f241 314b 	movw	r1, #4939	; 0x134b
    58d0:	2014      	movs	r0, #20
    58d2:	f004 f95c 	bl	9b8e <cc2400_set>
	cc2400_set(GRMDM,   0x0c01);
    58d6:	f640 4101 	movw	r1, #3073	; 0xc01
    58da:	2020      	movs	r0, #32
    58dc:	f004 f957 	bl	9b8e <cc2400_set>
	cc2400_set(SYNCL,   sync & 0xffff);
    58e0:	4621      	mov	r1, r4
    58e2:	202c      	movs	r0, #44	; 0x2c
    58e4:	f004 f953 	bl	9b8e <cc2400_set>
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);
    58e8:	2100      	movs	r1, #0
    58ea:	202d      	movs	r0, #45	; 0x2d
    58ec:	f004 f94f 	bl	9b8e <cc2400_set>
	cc2400_set(FSDIV,   channel);
    58f0:	4b4c      	ldr	r3, [pc, #304]	; (5a24 <br_transmit+0x264>)
    58f2:	2002      	movs	r0, #2
    58f4:	f8b3 104c 	ldrh.w	r1, [r3, #76]	; 0x4c
	if (modulation == MOD_BT_BASIC_RATE) {
    58f8:	4c4b      	ldr	r4, [pc, #300]	; (5a28 <br_transmit+0x268>)
	cc2400_set(FSDIV,   channel);
    58fa:	b289      	uxth	r1, r1
    58fc:	f004 f947 	bl	9b8e <cc2400_set>
	cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)
    5900:	210b      	movs	r1, #11
    5902:	2005      	movs	r0, #5
    5904:	f004 f943 	bl	9b8e <cc2400_set>
	if (modulation == MOD_BT_BASIC_RATE) {
    5908:	7823      	ldrb	r3, [r4, #0]
    590a:	bbbb      	cbnz	r3, 597c <br_transmit+0x1bc>
		cc2400_set(MDMCTRL, 0x0029);    // 160 kHz frequency deviation
    590c:	2129      	movs	r1, #41	; 0x29
		cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    590e:	2003      	movs	r0, #3
    5910:	f004 f93d 	bl	9b8e <cc2400_set>
	clkn_start();
    5914:	f001 fd60 	bl	73d8 <clkn_start>
	while (!(cc2400_status() & XOSC16M_STABLE));
    5918:	f004 f9d2 	bl	9cc0 <cc2400_status>
    591c:	0645      	lsls	r5, r0, #25
    591e:	d5fb      	bpl.n	5918 <br_transmit+0x158>
	cc2400_strobe(SFSON);
    5920:	2061      	movs	r0, #97	; 0x61
    5922:	f004 f9d4 	bl	9cce <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    5926:	f004 f9cb 	bl	9cc0 <cc2400_status>
    592a:	0740      	lsls	r0, r0, #29
    592c:	d5fb      	bpl.n	5926 <br_transmit+0x166>
	PAEN_SET;
    592e:	2280      	movs	r2, #128	; 0x80
    5930:	4b3e      	ldr	r3, [pc, #248]	; (5a2c <br_transmit+0x26c>)
    5932:	601a      	str	r2, [r3, #0]
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    5934:	200e      	movs	r0, #14
    5936:	f004 f921 	bl	9b7c <cc2400_get>
    593a:	f000 001f 	and.w	r0, r0, #31
    593e:	280f      	cmp	r0, #15
    5940:	d1f8      	bne.n	5934 <br_transmit+0x174>
	cc2400_strobe(STX);
    5942:	2063      	movs	r0, #99	; 0x63
    5944:	f004 f9c3 	bl	9cce <cc2400_strobe>
	cc2400_set(INT,     0x0014);    // FIFO_THRESHOLD: 20 bytes
    5948:	2114      	movs	r1, #20
    594a:	2023      	movs	r0, #35	; 0x23
    594c:	f004 f91f 	bl	9b8e <cc2400_set>
	gio_save = cc2400_get(IOCFG);
    5950:	2008      	movs	r0, #8
    5952:	f004 f913 	bl	9b7c <cc2400_get>
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));
    5956:	f3c0 0108 	ubfx	r1, r0, #0, #9
	gio_save = cc2400_get(IOCFG);
    595a:	4605      	mov	r5, r0
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));
    595c:	f441 419c 	orr.w	r1, r1, #19968	; 0x4e00
    5960:	2008      	movs	r0, #8
    5962:	f004 f914 	bl	9b8e <cc2400_set>
	uint32_t clkn_saved = 0;
    5966:	2600      	movs	r6, #0
		while ((clkn >> 1) == (clkn_saved >> 1) || T0TC < 2250) {
    5968:	4f31      	ldr	r7, [pc, #196]	; (5a30 <br_transmit+0x270>)
		TXLED_SET;
    596a:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 5a3c <br_transmit+0x27c>
	while ( requested_mode == MODE_TX_SYMBOLS )
    596e:	7ca3      	ldrb	r3, [r4, #18]
    5970:	2b02      	cmp	r3, #2
    5972:	d14a      	bne.n	5a0a <br_transmit+0x24a>
		while ((clkn >> 1) == (clkn_saved >> 1) || T0TC < 2250) {
    5974:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 5a40 <br_transmit+0x280>
    5978:	0876      	lsrs	r6, r6, #1
    597a:	e008      	b.n	598e <br_transmit+0x1ce>
	} else if (modulation == MOD_BT_LOW_ENERGY) {
    597c:	7823      	ldrb	r3, [r4, #0]
    597e:	2b01      	cmp	r3, #1
    5980:	d1e2      	bne.n	5948 <br_transmit+0x188>
		cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    5982:	2140      	movs	r1, #64	; 0x40
    5984:	e7c3      	b.n	590e <br_transmit+0x14e>
			if (do_hop) {
    5986:	7ae2      	ldrb	r2, [r4, #11]
    5988:	b11a      	cbz	r2, 5992 <br_transmit+0x1d2>
				hop();
    598a:	f7ff fd7d 	bl	5488 <hop>
		while ((clkn >> 1) == (clkn_saved >> 1) || T0TC < 2250) {
    598e:	f640 03c9 	movw	r3, #2249	; 0x8c9
    5992:	683a      	ldr	r2, [r7, #0]
    5994:	ebb6 0f52 	cmp.w	r6, r2, lsr #1
    5998:	d0f5      	beq.n	5986 <br_transmit+0x1c6>
    599a:	f8d9 2000 	ldr.w	r2, [r9]
    599e:	429a      	cmp	r2, r3
    59a0:	d9f1      	bls.n	5986 <br_transmit+0x1c6>
		TXLED_SET;
    59a2:	f44f 7380 	mov.w	r3, #256	; 0x100
		clkn_saved = clkn;
    59a6:	683e      	ldr	r6, [r7, #0]
		cc2400_fifo_write(16, data);
    59a8:	4669      	mov	r1, sp
    59aa:	2010      	movs	r0, #16
		TXLED_SET;
    59ac:	f8c8 3000 	str.w	r3, [r8]
		cc2400_fifo_write(16, data);
    59b0:	f004 f900 	bl	9bb4 <cc2400_fifo_write>
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    59b4:	200e      	movs	r0, #14
    59b6:	f004 f8e1 	bl	9b7c <cc2400_get>
    59ba:	f000 001f 	and.w	r0, r0, #31
    59be:	280f      	cmp	r0, #15
    59c0:	d1f8      	bne.n	59b4 <br_transmit+0x1f4>
		TXLED_CLR;
    59c2:	f44f 7280 	mov.w	r2, #256	; 0x100
    59c6:	4b1b      	ldr	r3, [pc, #108]	; (5a34 <br_transmit+0x274>)
		cc2400_strobe(SRFOFF);
    59c8:	2064      	movs	r0, #100	; 0x64
		TXLED_CLR;
    59ca:	601a      	str	r2, [r3, #0]
		cc2400_strobe(SRFOFF);
    59cc:	f004 f97f 	bl	9cce <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    59d0:	f004 f976 	bl	9cc0 <cc2400_status>
    59d4:	0741      	lsls	r1, r0, #29
    59d6:	d4fb      	bmi.n	59d0 <br_transmit+0x210>
		while (!(cc2400_status() & XOSC16M_STABLE));
    59d8:	f004 f972 	bl	9cc0 <cc2400_status>
    59dc:	0642      	lsls	r2, r0, #25
    59de:	d5fb      	bpl.n	59d8 <br_transmit+0x218>
		cc2400_strobe(SFSON);
    59e0:	2061      	movs	r0, #97	; 0x61
    59e2:	f004 f974 	bl	9cce <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    59e6:	f004 f96b 	bl	9cc0 <cc2400_status>
    59ea:	0743      	lsls	r3, r0, #29
    59ec:	d5fb      	bpl.n	59e6 <br_transmit+0x226>
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    59ee:	200e      	movs	r0, #14
    59f0:	f004 f8c4 	bl	9b7c <cc2400_get>
    59f4:	f000 001f 	and.w	r0, r0, #31
    59f8:	280f      	cmp	r0, #15
    59fa:	d1f8      	bne.n	59ee <br_transmit+0x22e>
		cc2400_strobe(STX);
    59fc:	2063      	movs	r0, #99	; 0x63
    59fe:	f004 f966 	bl	9cce <cc2400_strobe>
		handle_usb(clkn);
    5a02:	6838      	ldr	r0, [r7, #0]
    5a04:	f001 fbc2 	bl	718c <handle_usb>
    5a08:	e7b1      	b.n	596e <br_transmit+0x1ae>
	PAEN_CLR;
    5a0a:	2280      	movs	r2, #128	; 0x80
    5a0c:	4b0a      	ldr	r3, [pc, #40]	; (5a38 <br_transmit+0x278>)
	cc2400_set(IOCFG, gio_save);
    5a0e:	4629      	mov	r1, r5
    5a10:	2008      	movs	r0, #8
	PAEN_CLR;
    5a12:	601a      	str	r2, [r3, #0]
	cc2400_set(IOCFG, gio_save);
    5a14:	f004 f8bb 	bl	9b8e <cc2400_set>
}
    5a18:	b005      	add	sp, #20
    5a1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5a1e:	bf00      	nop
    5a20:	10001868 	.word	0x10001868
    5a24:	10000450 	.word	0x10000450
    5a28:	10000b3c 	.word	0x10000b3c
    5a2c:	2009c058 	.word	0x2009c058
    5a30:	1000136c 	.word	0x1000136c
    5a34:	2009c03c 	.word	0x2009c03c
    5a38:	2009c05c 	.word	0x2009c05c
    5a3c:	2009c038 	.word	0x2009c038
    5a40:	40004008 	.word	0x40004008

00005a44 <reset_le>:
void reset_le() {
    5a44:	b508      	push	{r3, lr}
	le_set_access_address(0x8e89bed6);     // advertising channel access address
    5a46:	480e      	ldr	r0, [pc, #56]	; (5a80 <reset_le+0x3c>)
    5a48:	f7fe fc66 	bl	4318 <le_set_access_address>
	le.last_packet = 0;
    5a4c:	2200      	movs	r2, #0
    5a4e:	4b0d      	ldr	r3, [pc, #52]	; (5a84 <reset_le+0x40>)
	le.crc_init_reversed = 0xAAAAAA;
    5a50:	480d      	ldr	r0, [pc, #52]	; (5a88 <reset_le+0x44>)
    5a52:	490e      	ldr	r1, [pc, #56]	; (5a8c <reset_le+0x48>)
	le.interval_timer = 0;
    5a54:	839a      	strh	r2, [r3, #28]
	le.crc_init_reversed = 0xAAAAAA;
    5a56:	e9c3 0102 	strd	r0, r1, [r3, #8]
	le.conn_count = 0;
    5a5a:	841a      	strh	r2, [r3, #32]
	le.update_instant = 0;
    5a5c:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
	le.last_packet = 0;
    5a60:	649a      	str	r2, [r3, #72]	; 0x48
	le.crc_verify = 0;
    5a62:	611a      	str	r2, [r3, #16]
	le.link_state = LINK_INACTIVE;
    5a64:	829a      	strh	r2, [r3, #20]
	le.channel_increment = 0;
    5a66:	759a      	strb	r2, [r3, #22]
	le.conn_epoch = 0;
    5a68:	619a      	str	r2, [r3, #24]
	le.conn_interval = 0;
    5a6a:	83da      	strh	r2, [r3, #30]
	le.win_size = 0;
    5a6c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	le.win_offset = 0;
    5a70:	849a      	strh	r2, [r3, #36]	; 0x24
	le.win_size_update = 0;
    5a72:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	le.win_offset_update = 0;
    5a76:	865a      	strh	r2, [r3, #50]	; 0x32
	do_hop = 0;
    5a78:	4b05      	ldr	r3, [pc, #20]	; (5a90 <reset_le+0x4c>)
    5a7a:	72da      	strb	r2, [r3, #11]
}
    5a7c:	bd08      	pop	{r3, pc}
    5a7e:	bf00      	nop
    5a80:	8e89bed6 	.word	0x8e89bed6
    5a84:	10000450 	.word	0x10000450
    5a88:	00555555 	.word	0x00555555
    5a8c:	00aaaaaa 	.word	0x00aaaaaa
    5a90:	10000b3c 	.word	0x10000b3c

00005a94 <reset_le_promisc>:
void reset_le_promisc(void) {
    5a94:	b510      	push	{r4, lr}
	memset(&le_promisc, 0, sizeof(le_promisc));
    5a96:	4c06      	ldr	r4, [pc, #24]	; (5ab0 <reset_le_promisc+0x1c>)
    5a98:	f44f 7284 	mov.w	r2, #264	; 0x108
    5a9c:	2100      	movs	r1, #0
    5a9e:	4620      	mov	r0, r4
    5aa0:	f7fe fb9c 	bl	41dc <memset>
	le_promisc.smallest_hop_interval = 0xffffffff;
    5aa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5aa8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
}
    5aac:	bd10      	pop	{r4, pc}
    5aae:	bf00      	nop
    5ab0:	100013b0 	.word	0x100013b0

00005ab4 <bt_generic_le>:
{
    5ab4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	modulation = MOD_BT_LOW_ENERGY;
    5ab8:	2301      	movs	r3, #1
    5aba:	4c72      	ldr	r4, [pc, #456]	; (5c84 <bt_generic_le+0x1d0>)
{
    5abc:	4607      	mov	r7, r0
	modulation = MOD_BT_LOW_ENERGY;
    5abe:	7023      	strb	r3, [r4, #0]
	mode = active_mode;
    5ac0:	7460      	strb	r0, [r4, #17]
	reset_le();
    5ac2:	f7ff ffbf 	bl	5a44 <reset_le>
	ISER0 = ISER0_ISE_USB;
    5ac6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5aca:	4b6f      	ldr	r3, [pc, #444]	; (5c88 <bt_generic_le+0x1d4>)
	RXLED_CLR;
    5acc:	4e6f      	ldr	r6, [pc, #444]	; (5c8c <bt_generic_le+0x1d8>)
	ISER0 = ISER0_ISE_USB;
    5ace:	601a      	str	r2, [r3, #0]
	RXLED_CLR;
    5ad0:	2310      	movs	r3, #16
    5ad2:	6033      	str	r3, [r6, #0]
	usb_queue_init();
    5ad4:	f001 faf6 	bl	70c4 <usb_queue_init>
	hold = 0;
    5ad8:	2500      	movs	r5, #0
	dio_ssp_init();
    5ada:	f003 ffc7 	bl	9a6c <dio_ssp_init>
	dma_init_rx_symbols();
    5ade:	f001 fcd1 	bl	7484 <dma_init_rx_symbols>
	dio_ssp_start();
    5ae2:	f001 fd4b 	bl	757c <dio_ssp_start>
	cc2400_rx();
    5ae6:	f7fe fc23 	bl	4330 <cc2400_rx>
	cs_trigger_enable();
    5aea:	f001 fc0b 	bl	7304 <cs_trigger_enable>
			cc2400_set(FSDIV, channel - 1);
    5aee:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 5cac <bt_generic_le+0x1f8>
		while ((rx_tc == 0) && (rx_err == 0))
    5af2:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 5cb0 <bt_generic_le+0x1fc>
	while (requested_mode == active_mode) {
    5af6:	7ca3      	ldrb	r3, [r4, #18]
    5af8:	42bb      	cmp	r3, r7
    5afa:	f040 8091 	bne.w	5c20 <bt_generic_le+0x16c>
		if (requested_channel != 0) {
    5afe:	89e3      	ldrh	r3, [r4, #14]
    5b00:	b29b      	uxth	r3, r3
    5b02:	b1cb      	cbz	r3, 5b38 <bt_generic_le+0x84>
			cc2400_strobe(SRFOFF);
    5b04:	2064      	movs	r0, #100	; 0x64
    5b06:	f004 f8e2 	bl	9cce <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    5b0a:	f004 f8d9 	bl	9cc0 <cc2400_status>
    5b0e:	0742      	lsls	r2, r0, #29
    5b10:	d4fb      	bmi.n	5b0a <bt_generic_le+0x56>
			cc2400_set(FSDIV, channel - 1);
    5b12:	f8ba 104c 	ldrh.w	r1, [sl, #76]	; 0x4c
    5b16:	2002      	movs	r0, #2
    5b18:	3901      	subs	r1, #1
    5b1a:	b289      	uxth	r1, r1
    5b1c:	f004 f837 	bl	9b8e <cc2400_set>
			cc2400_strobe(SFSON);
    5b20:	2061      	movs	r0, #97	; 0x61
    5b22:	f004 f8d4 	bl	9cce <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    5b26:	f004 f8cb 	bl	9cc0 <cc2400_status>
    5b2a:	0743      	lsls	r3, r0, #29
    5b2c:	d5fb      	bpl.n	5b26 <bt_generic_le+0x72>
			cc2400_strobe(SRX);
    5b2e:	2062      	movs	r0, #98	; 0x62
    5b30:	f004 f8cd 	bl	9cce <cc2400_strobe>
			requested_channel = 0;
    5b34:	2300      	movs	r3, #0
    5b36:	81e3      	strh	r3, [r4, #14]
		if (do_hop) {
    5b38:	7ae3      	ldrb	r3, [r4, #11]
    5b3a:	2b00      	cmp	r3, #0
    5b3c:	d07c      	beq.n	5c38 <bt_generic_le+0x184>
			hop();
    5b3e:	f7ff fca3 	bl	5488 <hop>
		RXLED_CLR;
    5b42:	2310      	movs	r3, #16
    5b44:	6033      	str	r3, [r6, #0]
		rssi_reset();
    5b46:	f001 fb35 	bl	71b4 <rssi_reset>
		rssi_at_trigger = INT8_MIN;
    5b4a:	f06f 0b7f 	mvn.w	fp, #127	; 0x7f
    5b4e:	f8df 9164 	ldr.w	r9, [pc, #356]	; 5cb4 <bt_generic_le+0x200>
		while ((rx_tc == 0) && (rx_err == 0))
    5b52:	f8d8 3000 	ldr.w	r3, [r8]
    5b56:	b91b      	cbnz	r3, 5b60 <bt_generic_le+0xac>
    5b58:	f8d9 3000 	ldr.w	r3, [r9]
    5b5c:	2b00      	cmp	r3, #0
    5b5e:	d06f      	beq.n	5c40 <bt_generic_le+0x18c>
		if (rx_err) {
    5b60:	f8d9 3000 	ldr.w	r3, [r9]
    5b64:	b11b      	cbz	r3, 5b6e <bt_generic_le+0xba>
			status |= DMA_ERROR;
    5b66:	7863      	ldrb	r3, [r4, #1]
    5b68:	f043 0302 	orr.w	r3, r3, #2
    5b6c:	7063      	strb	r3, [r4, #1]
		if (!rx_tc)
    5b6e:	f8d8 3000 	ldr.w	r3, [r8]
    5b72:	2b00      	cmp	r3, #0
    5b74:	d07f      	beq.n	5c76 <bt_generic_le+0x1c2>
		if (rx_tc > 1)
    5b76:	f8d8 3000 	ldr.w	r3, [r8]
    5b7a:	2b01      	cmp	r3, #1
			status |= DMA_OVERFLOW;
    5b7c:	bf82      	ittt	hi
    5b7e:	7863      	ldrbhi	r3, [r4, #1]
    5b80:	f043 0301 	orrhi.w	r3, r3, #1
    5b84:	7063      	strbhi	r3, [r4, #1]
		rssi_iir_update(channel);
    5b86:	f8ba 004c 	ldrh.w	r0, [sl, #76]	; 0x4c
    5b8a:	b280      	uxth	r0, r0
    5b8c:	f001 fb4e 	bl	722c <rssi_iir_update>
		if (cs_trigger || cs_no_squelch) {
    5b90:	4a3f      	ldr	r2, [pc, #252]	; (5c90 <bt_generic_le+0x1dc>)
    5b92:	4b40      	ldr	r3, [pc, #256]	; (5c94 <bt_generic_le+0x1e0>)
    5b94:	7811      	ldrb	r1, [r2, #0]
    5b96:	781b      	ldrb	r3, [r3, #0]
    5b98:	430b      	orrs	r3, r1
    5b9a:	d006      	beq.n	5baa <bt_generic_le+0xf6>
			status |= CS_TRIGGER;
    5b9c:	7863      	ldrb	r3, [r4, #1]
			hold = CS_HOLD_TIME;
    5b9e:	2502      	movs	r5, #2
			status |= CS_TRIGGER;
    5ba0:	f043 0308 	orr.w	r3, r3, #8
    5ba4:	7063      	strb	r3, [r4, #1]
			cs_trigger = 0;
    5ba6:	2300      	movs	r3, #0
    5ba8:	7013      	strb	r3, [r2, #0]
		if (rssi_max >= (cs_threshold_cur + 54)) {
    5baa:	4b3b      	ldr	r3, [pc, #236]	; (5c98 <bt_generic_le+0x1e4>)
    5bac:	4a3b      	ldr	r2, [pc, #236]	; (5c9c <bt_generic_le+0x1e8>)
    5bae:	f993 3000 	ldrsb.w	r3, [r3]
    5bb2:	f992 2000 	ldrsb.w	r2, [r2]
    5bb6:	3335      	adds	r3, #53	; 0x35
    5bb8:	4293      	cmp	r3, r2
    5bba:	da5a      	bge.n	5c72 <bt_generic_le+0x1be>
			hold = CS_HOLD_TIME;
    5bbc:	2502      	movs	r5, #2
			status |= RSSI_TRIGGER;
    5bbe:	7863      	ldrb	r3, [r4, #1]
    5bc0:	f043 0310 	orr.w	r3, r3, #16
    5bc4:	7063      	strb	r3, [r4, #1]
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);
    5bc6:	4936      	ldr	r1, [pc, #216]	; (5ca0 <bt_generic_le+0x1ec>)
    5bc8:	f44f 72c8 	mov.w	r2, #400	; 0x190
    5bcc:	f5a1 70c8 	sub.w	r0, r1, #400	; 0x190
    5bd0:	f004 ff14 	bl	a9fc <memcpy>
    5bd4:	f44f 70c8 	mov.w	r0, #400	; 0x190
		for (i = 0; i < DMA_SIZE; ++i) {
    5bd8:	2300      	movs	r3, #0
		hold--;
    5bda:	3d01      	subs	r5, #1
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
    5bdc:	f8df e0d8 	ldr.w	lr, [pc, #216]	; 5cb8 <bt_generic_le+0x204>
		hold--;
    5be0:	b2ed      	uxtb	r5, r5
			for (j = 0; j < 8; ++j) {
    5be2:	2100      	movs	r1, #0
    5be4:	4a2f      	ldr	r2, [pc, #188]	; (5ca4 <bt_generic_le+0x1f0>)
    5be6:	eb00 0c02 	add.w	ip, r0, r2
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
    5bea:	f8de 2000 	ldr.w	r2, [lr]
			for (j = 0; j < 8; ++j) {
    5bee:	3101      	adds	r1, #1
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
    5bf0:	5cd2      	ldrb	r2, [r2, r3]
				idle_rxbuf[i] <<= 1;
    5bf2:	f8de b000 	ldr.w	fp, [lr]
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
    5bf6:	09d2      	lsrs	r2, r2, #7
    5bf8:	f80c 2b01 	strb.w	r2, [ip], #1
				idle_rxbuf[i] <<= 1;
    5bfc:	f81b 2003 	ldrb.w	r2, [fp, r3]
			for (j = 0; j < 8; ++j) {
    5c00:	2908      	cmp	r1, #8
				idle_rxbuf[i] <<= 1;
    5c02:	ea4f 0242 	mov.w	r2, r2, lsl #1
    5c06:	b2d2      	uxtb	r2, r2
    5c08:	f80b 2003 	strb.w	r2, [fp, r3]
			for (j = 0; j < 8; ++j) {
    5c0c:	d1ed      	bne.n	5bea <bt_generic_le+0x136>
		for (i = 0; i < DMA_SIZE; ++i) {
    5c0e:	3301      	adds	r3, #1
    5c10:	2b32      	cmp	r3, #50	; 0x32
    5c12:	f100 0008 	add.w	r0, r0, #8
    5c16:	d1e4      	bne.n	5be2 <bt_generic_le+0x12e>
		int ret = data_cb(unpacked);
    5c18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5c1a:	4822      	ldr	r0, [pc, #136]	; (5ca4 <bt_generic_le+0x1f0>)
    5c1c:	4798      	blx	r3
		if (!ret) break;
    5c1e:	bb50      	cbnz	r0, 5c76 <bt_generic_le+0x1c2>
	ICER0 = ICER0_ICE_USB;
    5c20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5c24:	4b20      	ldr	r3, [pc, #128]	; (5ca8 <bt_generic_le+0x1f4>)
    5c26:	601a      	str	r2, [r3, #0]
	cc2400_idle();
    5c28:	f7fe fc7c 	bl	4524 <cc2400_idle>
	dio_ssp_stop();
    5c2c:	f001 fcc6 	bl	75bc <dio_ssp_stop>
}
    5c30:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	cs_trigger_disable();
    5c34:	f001 bb7e 	b.w	7334 <cs_trigger_disable>
			TXLED_CLR;
    5c38:	f44f 7380 	mov.w	r3, #256	; 0x100
    5c3c:	6033      	str	r3, [r6, #0]
    5c3e:	e780      	b.n	5b42 <bt_generic_le+0x8e>
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    5c40:	2006      	movs	r0, #6
    5c42:	f003 ff9b 	bl	9b7c <cc2400_get>
			if (cs_trigger && (rssi_at_trigger == INT8_MIN)) {
    5c46:	4b12      	ldr	r3, [pc, #72]	; (5c90 <bt_generic_le+0x1dc>)
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    5c48:	f340 2007 	sbfx	r0, r0, #8, #8
			if (cs_trigger && (rssi_at_trigger == INT8_MIN)) {
    5c4c:	781b      	ldrb	r3, [r3, #0]
    5c4e:	b16b      	cbz	r3, 5c6c <bt_generic_le+0x1b8>
    5c50:	f11b 0f80 	cmn.w	fp, #128	; 0x80
    5c54:	d10a      	bne.n	5c6c <bt_generic_le+0x1b8>
				rssi = MAX(rssi,(cs_threshold_cur+54));
    5c56:	4b10      	ldr	r3, [pc, #64]	; (5c98 <bt_generic_le+0x1e4>)
    5c58:	f993 b000 	ldrsb.w	fp, [r3]
    5c5c:	f10b 0b36 	add.w	fp, fp, #54	; 0x36
    5c60:	4558      	cmp	r0, fp
    5c62:	bfb8      	it	lt
    5c64:	4658      	movlt	r0, fp
    5c66:	fa4f fb80 	sxtb.w	fp, r0
				rssi_at_trigger = rssi;
    5c6a:	4658      	mov	r0, fp
			rssi_add(rssi);
    5c6c:	f001 fabe 	bl	71ec <rssi_add>
    5c70:	e76f      	b.n	5b52 <bt_generic_le+0x9e>
		if (hold == 0) {
    5c72:	2d00      	cmp	r5, #0
    5c74:	d1a7      	bne.n	5bc6 <bt_generic_le+0x112>
		rx_tc = 0;
    5c76:	2300      	movs	r3, #0
    5c78:	f8c8 3000 	str.w	r3, [r8]
		rx_err = 0;
    5c7c:	f8c9 3000 	str.w	r3, [r9]
    5c80:	e739      	b.n	5af6 <bt_generic_le+0x42>
    5c82:	bf00      	nop
    5c84:	10000b3c 	.word	0x10000b3c
    5c88:	e000e100 	.word	0xe000e100
    5c8c:	2009c03c 	.word	0x2009c03c
    5c90:	10001865 	.word	0x10001865
    5c94:	100014b8 	.word	0x100014b8
    5c98:	10001864 	.word	0x10001864
    5c9c:	10001350 	.word	0x10001350
    5ca0:	1000165c 	.word	0x1000165c
    5ca4:	100014cc 	.word	0x100014cc
    5ca8:	e000e180 	.word	0xe000e180
    5cac:	10000450 	.word	0x10000450
    5cb0:	1000134c 	.word	0x1000134c
    5cb4:	10001860 	.word	0x10001860
    5cb8:	100014c8 	.word	0x100014c8

00005cbc <bt_le_sync>:
{
    5cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5cc0:	b093      	sub	sp, #76	; 0x4c
	modulation = MOD_BT_LOW_ENERGY;
    5cc2:	2301      	movs	r3, #1
	ISER0 = ISER0_ISE_USB;
    5cc4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
	modulation = MOD_BT_LOW_ENERGY;
    5cc8:	4cab      	ldr	r4, [pc, #684]	; (5f78 <bt_le_sync+0x2bc>)
	le.link_state = LINK_LISTENING;
    5cca:	4dac      	ldr	r5, [pc, #688]	; (5f7c <bt_le_sync+0x2c0>)
	modulation = MOD_BT_LOW_ENERGY;
    5ccc:	7023      	strb	r3, [r4, #0]
	le.link_state = LINK_LISTENING;
    5cce:	752b      	strb	r3, [r5, #20]
	ISER0 = ISER0_ISE_USB;
    5cd0:	4bab      	ldr	r3, [pc, #684]	; (5f80 <bt_le_sync+0x2c4>)
	mode = active_mode;
    5cd2:	7460      	strb	r0, [r4, #17]
	ISER0 = ISER0_ISE_USB;
    5cd4:	601a      	str	r2, [r3, #0]
	RXLED_CLR;
    5cd6:	2310      	movs	r3, #16
    5cd8:	4eaa      	ldr	r6, [pc, #680]	; (5f84 <bt_le_sync+0x2c8>)
{
    5cda:	4680      	mov	r8, r0
	RXLED_CLR;
    5cdc:	6033      	str	r3, [r6, #0]
	usb_queue_init();
    5cde:	f001 f9f1 	bl	70c4 <usb_queue_init>
	dio_ssp_init();
    5ce2:	f003 fec3 	bl	9a6c <dio_ssp_init>
	dma_init_le();
    5ce6:	f001 fc11 	bl	750c <dma_init_le>
	dio_ssp_start();
    5cea:	f001 fc47 	bl	757c <dio_ssp_start>
	cc2400_rx_sync(rbit(le.access_address)); // bit-reversed access address
    5cee:	6828      	ldr	r0, [r5, #0]
    5cf0:	f003 fe58 	bl	99a4 <rbit>
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    5cf4:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 5fc0 <bt_le_sync+0x304>
	cc2400_rx_sync(rbit(le.access_address)); // bit-reversed access address
    5cf8:	f7fe fb6e 	bl	43d8 <cc2400_rx_sync>
	while (requested_mode == active_mode) {
    5cfc:	9601      	str	r6, [sp, #4]
    5cfe:	7ca3      	ldrb	r3, [r4, #18]
    5d00:	4543      	cmp	r3, r8
    5d02:	f040 8114 	bne.w	5f2e <bt_le_sync+0x272>
		if (requested_channel != 0) {
    5d06:	89e3      	ldrh	r3, [r4, #14]
    5d08:	b29b      	uxth	r3, r3
    5d0a:	b1cb      	cbz	r3, 5d40 <bt_le_sync+0x84>
			cc2400_strobe(SRFOFF);
    5d0c:	2064      	movs	r0, #100	; 0x64
    5d0e:	f003 ffde 	bl	9cce <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    5d12:	f003 ffd5 	bl	9cc0 <cc2400_status>
    5d16:	0747      	lsls	r7, r0, #29
    5d18:	d4fb      	bmi.n	5d12 <bt_le_sync+0x56>
			cc2400_set(FSDIV, channel - 1);
    5d1a:	f8b5 104c 	ldrh.w	r1, [r5, #76]	; 0x4c
    5d1e:	2002      	movs	r0, #2
    5d20:	3901      	subs	r1, #1
    5d22:	b289      	uxth	r1, r1
    5d24:	f003 ff33 	bl	9b8e <cc2400_set>
			cc2400_strobe(SFSON);
    5d28:	2061      	movs	r0, #97	; 0x61
    5d2a:	f003 ffd0 	bl	9cce <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    5d2e:	f003 ffc7 	bl	9cc0 <cc2400_status>
    5d32:	0746      	lsls	r6, r0, #29
    5d34:	d5fb      	bpl.n	5d2e <bt_le_sync+0x72>
			cc2400_strobe(SRX);
    5d36:	2062      	movs	r0, #98	; 0x62
    5d38:	f003 ffc9 	bl	9cce <cc2400_strobe>
			requested_channel = 0;
    5d3c:	2300      	movs	r3, #0
    5d3e:	81e3      	strh	r3, [r4, #14]
		RXLED_CLR;
    5d40:	2310      	movs	r3, #16
    5d42:	9a01      	ldr	r2, [sp, #4]
		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode)
    5d44:	f8df b27c 	ldr.w	fp, [pc, #636]	; 5fc4 <bt_le_sync+0x308>
		RXLED_CLR;
    5d48:	6013      	str	r3, [r2, #0]
		rssi_reset();
    5d4a:	f001 fa33 	bl	71b4 <rssi_reset>
		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode)
    5d4e:	4a8e      	ldr	r2, [pc, #568]	; (5f88 <bt_le_sync+0x2cc>)
    5d50:	f8db 3000 	ldr.w	r3, [fp]
    5d54:	b933      	cbnz	r3, 5d64 <bt_le_sync+0xa8>
    5d56:	6813      	ldr	r3, [r2, #0]
    5d58:	b923      	cbnz	r3, 5d64 <bt_le_sync+0xa8>
    5d5a:	7ae3      	ldrb	r3, [r4, #11]
    5d5c:	b913      	cbnz	r3, 5d64 <bt_le_sync+0xa8>
    5d5e:	7ca3      	ldrb	r3, [r4, #18]
    5d60:	4543      	cmp	r3, r8
    5d62:	d0f5      	beq.n	5d50 <bt_le_sync+0x94>
		rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    5d64:	2006      	movs	r0, #6
    5d66:	f003 ff09 	bl	9b7c <cc2400_get>
		rssi_min = rssi_max = rssi;
    5d6a:	4b88      	ldr	r3, [pc, #544]	; (5f8c <bt_le_sync+0x2d0>)
		rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    5d6c:	f340 2007 	sbfx	r0, r0, #8, #8
		rssi_min = rssi_max = rssi;
    5d70:	7018      	strb	r0, [r3, #0]
    5d72:	4b87      	ldr	r3, [pc, #540]	; (5f90 <bt_le_sync+0x2d4>)
    5d74:	7018      	strb	r0, [r3, #0]
		if (requested_mode != active_mode) {
    5d76:	7ca3      	ldrb	r3, [r4, #18]
    5d78:	4543      	cmp	r3, r8
    5d7a:	f040 80d8 	bne.w	5f2e <bt_le_sync+0x272>
		if (rx_err) {
    5d7e:	4f82      	ldr	r7, [pc, #520]	; (5f88 <bt_le_sync+0x2cc>)
    5d80:	683b      	ldr	r3, [r7, #0]
    5d82:	b11b      	cbz	r3, 5d8c <bt_le_sync+0xd0>
			status |= DMA_ERROR;
    5d84:	7863      	ldrb	r3, [r4, #1]
    5d86:	f043 0302 	orr.w	r3, r3, #2
    5d8a:	7063      	strb	r3, [r4, #1]
		if (do_hop)
    5d8c:	7ae3      	ldrb	r3, [r4, #11]
    5d8e:	f003 01ff 	and.w	r1, r3, #255	; 0xff
    5d92:	2b00      	cmp	r3, #0
    5d94:	f040 8093 	bne.w	5ebe <bt_le_sync+0x202>
		if (!rx_tc)
    5d98:	f8db 3000 	ldr.w	r3, [fp]
    5d9c:	2b00      	cmp	r3, #0
    5d9e:	d0ae      	beq.n	5cfe <bt_le_sync+0x42>
		uint32_t packet[48/4+1] = { 0, };
    5da0:	f04f 0930 	mov.w	r9, #48	; 0x30
    5da4:	a806      	add	r0, sp, #24
    5da6:	464a      	mov	r2, r9
    5da8:	f7fe fa18 	bl	41dc <memset>
		const uint32_t *whit = whitening_word[btle_channel_index(channel)];
    5dac:	f8b5 004c 	ldrh.w	r0, [r5, #76]	; 0x4c
		packet[0] = le.access_address;
    5db0:	682b      	ldr	r3, [r5, #0]
		const uint32_t *whit = whitening_word[btle_channel_index(channel)];
    5db2:	b280      	uxth	r0, r0
		packet[0] = le.access_address;
    5db4:	9305      	str	r3, [sp, #20]
		const uint32_t *whit = whitening_word[btle_channel_index(channel)];
    5db6:	f001 f817 	bl	6de8 <btle_channel_index>
    5dba:	fb09 f900 	mul.w	r9, r9, r0
    5dbe:	4e75      	ldr	r6, [pc, #468]	; (5f94 <bt_le_sync+0x2d8>)
    5dc0:	eb06 0309 	add.w	r3, r6, r9
    5dc4:	9302      	str	r3, [sp, #8]
			uint32_t v = rxbuf1[i+0] << 24
    5dc6:	4b74      	ldr	r3, [pc, #464]	; (5f98 <bt_le_sync+0x2dc>)
    5dc8:	f893 c000 	ldrb.w	ip, [r3]
					   | rxbuf1[i+1] << 16
    5dcc:	7859      	ldrb	r1, [r3, #1]
					   | rxbuf1[i+2] << 8
    5dce:	789a      	ldrb	r2, [r3, #2]
					   | rxbuf1[i+1] << 16
    5dd0:	0409      	lsls	r1, r1, #16
					   | rxbuf1[i+3] << 0;
    5dd2:	78d8      	ldrb	r0, [r3, #3]
					   | rxbuf1[i+1] << 16
    5dd4:	ea41 610c 	orr.w	r1, r1, ip, lsl #24
					   | rxbuf1[i+3] << 0;
    5dd8:	4308      	orrs	r0, r1
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5dda:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
    5dde:	f003 fde1 	bl	99a4 <rbit>
    5de2:	f856 6009 	ldr.w	r6, [r6, r9]
    5de6:	4046      	eors	r6, r0
    5de8:	9606      	str	r6, [sp, #24]
		unsigned len = (p[5] & 0x3f) + 2;
    5dea:	f3c6 2605 	ubfx	r6, r6, #8, #6
    5dee:	1cb2      	adds	r2, r6, #2
		if (len > 39)
    5df0:	2a27      	cmp	r2, #39	; 0x27
    5df2:	dc64      	bgt.n	5ebe <bt_le_sync+0x202>
		unsigned total_transfers = ((len + 3) + 4 - 1) / 4;
    5df4:	f106 0908 	add.w	r9, r6, #8
		if (total_transfers < 11) {
    5df8:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
    5dfc:	4b66      	ldr	r3, [pc, #408]	; (5f98 <bt_le_sync+0x2dc>)
    5dfe:	d907      	bls.n	5e10 <bt_le_sync+0x154>
			while (DMACC0Config & DMACCxConfig_E && rx_err == 0)
    5e00:	4966      	ldr	r1, [pc, #408]	; (5f9c <bt_le_sync+0x2e0>)
    5e02:	680b      	ldr	r3, [r1, #0]
    5e04:	07d8      	lsls	r0, r3, #31
    5e06:	d50d      	bpl.n	5e24 <bt_le_sync+0x168>
    5e08:	683b      	ldr	r3, [r7, #0]
    5e0a:	2b00      	cmp	r3, #0
    5e0c:	d0f9      	beq.n	5e02 <bt_le_sync+0x146>
    5e0e:	e009      	b.n	5e24 <bt_le_sync+0x168>
			while (DMACC0DestAddr < (uint32_t)rxbuf1 + 4 * total_transfers && rx_err == 0)
    5e10:	f029 0103 	bic.w	r1, r9, #3
    5e14:	4862      	ldr	r0, [pc, #392]	; (5fa0 <bt_le_sync+0x2e4>)
    5e16:	440b      	add	r3, r1
    5e18:	6801      	ldr	r1, [r0, #0]
    5e1a:	4299      	cmp	r1, r3
    5e1c:	d202      	bcs.n	5e24 <bt_le_sync+0x168>
    5e1e:	6839      	ldr	r1, [r7, #0]
    5e20:	2900      	cmp	r1, #0
    5e22:	d0f9      	beq.n	5e18 <bt_le_sync+0x15c>
		for (i = 4; i < 44; i += 4) {
    5e24:	2704      	movs	r7, #4
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    5e26:	f8da 3000 	ldr.w	r3, [sl]
    5e2a:	9203      	str	r2, [sp, #12]
    5e2c:	f023 0301 	bic.w	r3, r3, #1
		cc2400_strobe(SFSON);
    5e30:	2061      	movs	r0, #97	; 0x61
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    5e32:	f8ca 3000 	str.w	r3, [sl]
		cc2400_strobe(SFSON);
    5e36:	f003 ff4a 	bl	9cce <cc2400_strobe>
			uint32_t v = rxbuf1[i+0] << 24
    5e3a:	4957      	ldr	r1, [pc, #348]	; (5f98 <bt_le_sync+0x2dc>)
    5e3c:	9a03      	ldr	r2, [sp, #12]
    5e3e:	1c7b      	adds	r3, r7, #1
    5e40:	f811 e007 	ldrb.w	lr, [r1, r7]
					   | rxbuf1[i+1] << 16
    5e44:	5cc8      	ldrb	r0, [r1, r3]
    5e46:	1cbb      	adds	r3, r7, #2
					   | rxbuf1[i+2] << 8
    5e48:	f811 c003 	ldrb.w	ip, [r1, r3]
    5e4c:	1cfb      	adds	r3, r7, #3
					   | rxbuf1[i+3] << 0;
    5e4e:	5ccb      	ldrb	r3, [r1, r3]
    5e50:	9203      	str	r2, [sp, #12]
    5e52:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
    5e56:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5e5a:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
    5e5e:	f003 fda1 	bl	99a4 <rbit>
    5e62:	10bb      	asrs	r3, r7, #2
    5e64:	aa12      	add	r2, sp, #72	; 0x48
    5e66:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
    5e6a:	9a02      	ldr	r2, [sp, #8]
		for (i = 4; i < 44; i += 4) {
    5e6c:	3704      	adds	r7, #4
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		for (i = 4; i < 44; i += 4) {
    5e72:	2f2c      	cmp	r7, #44	; 0x2c
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5e74:	ea83 0300 	eor.w	r3, r3, r0
		for (i = 4; i < 44; i += 4) {
    5e78:	4947      	ldr	r1, [pc, #284]	; (5f98 <bt_le_sync+0x2dc>)
    5e7a:	9a03      	ldr	r2, [sp, #12]
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5e7c:	f84c 3c30 	str.w	r3, [ip, #-48]
		for (i = 4; i < 44; i += 4) {
    5e80:	d1dd      	bne.n	5e3e <bt_le_sync+0x182>
		if (le.crc_verify) {
    5e82:	692b      	ldr	r3, [r5, #16]
    5e84:	2b00      	cmp	r3, #0
    5e86:	d15f      	bne.n	5f48 <bt_le_sync+0x28c>
		RXLED_SET;
    5e88:	2210      	movs	r2, #16
		ICER0 = ICER0_ICE_USB;
    5e8a:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
		RXLED_SET;
    5e8e:	4b45      	ldr	r3, [pc, #276]	; (5fa4 <bt_le_sync+0x2e8>)
		packet_cb((uint8_t *)packet);
    5e90:	a805      	add	r0, sp, #20
		RXLED_SET;
    5e92:	601a      	str	r2, [r3, #0]
		packet_cb((uint8_t *)packet);
    5e94:	69a3      	ldr	r3, [r4, #24]
    5e96:	4798      	blx	r3
		ICER0 = ICER0_ICE_USB;
    5e98:	4b43      	ldr	r3, [pc, #268]	; (5fa8 <bt_le_sync+0x2ec>)
		enqueue(LE_PACKET, (uint8_t *)packet);
    5e9a:	a905      	add	r1, sp, #20
		ICER0 = ICER0_ICE_USB;
    5e9c:	601e      	str	r6, [r3, #0]
		enqueue(LE_PACKET, (uint8_t *)packet);
    5e9e:	2001      	movs	r0, #1
    5ea0:	f7fe faf4 	bl	448c <enqueue>
		le.last_packet = CLK100NS;
    5ea4:	f640 4135 	movw	r1, #3125	; 0xc35
		ISER0 = ISER0_ISE_USB;
    5ea8:	4b35      	ldr	r3, [pc, #212]	; (5f80 <bt_le_sync+0x2c4>)
		le.last_packet = CLK100NS;
    5eaa:	4a40      	ldr	r2, [pc, #256]	; (5fac <bt_le_sync+0x2f0>)
		ISER0 = ISER0_ISE_USB;
    5eac:	601e      	str	r6, [r3, #0]
		le.last_packet = CLK100NS;
    5eae:	4b40      	ldr	r3, [pc, #256]	; (5fb0 <bt_le_sync+0x2f4>)
    5eb0:	681b      	ldr	r3, [r3, #0]
    5eb2:	6812      	ldr	r2, [r2, #0]
    5eb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5eb8:	fb01 2303 	mla	r3, r1, r3, r2
    5ebc:	64ab      	str	r3, [r5, #72]	; 0x48
		cc2400_strobe(SFSON);
    5ebe:	2061      	movs	r0, #97	; 0x61
    5ec0:	f003 ff05 	bl	9cce <cc2400_strobe>
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    5ec4:	f8da 3000 	ldr.w	r3, [sl]
		while (SSP1SR & SSPSR_RNE) {
    5ec8:	4a3a      	ldr	r2, [pc, #232]	; (5fb4 <bt_le_sync+0x2f8>)
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    5eca:	f023 0301 	bic.w	r3, r3, #1
    5ece:	f8ca 3000 	str.w	r3, [sl]
		while (SSP1SR & SSPSR_RNE) {
    5ed2:	6813      	ldr	r3, [r2, #0]
    5ed4:	0759      	lsls	r1, r3, #29
    5ed6:	d44b      	bmi.n	5f70 <bt_le_sync+0x2b4>
		u32 now = CLK100NS;
    5ed8:	f640 4135 	movw	r1, #3125	; 0xc35
    5edc:	4b34      	ldr	r3, [pc, #208]	; (5fb0 <bt_le_sync+0x2f4>)
    5ede:	4a33      	ldr	r2, [pc, #204]	; (5fac <bt_le_sync+0x2f0>)
    5ee0:	681b      	ldr	r3, [r3, #0]
    5ee2:	6812      	ldr	r2, [r2, #0]
    5ee4:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5ee8:	fb01 2303 	mla	r3, r1, r3, r2
		if (now < le.last_packet)
    5eec:	6ca9      	ldr	r1, [r5, #72]	; 0x48
			((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING)
    5eee:	7d2a      	ldrb	r2, [r5, #20]
		if (now < le.last_packet)
    5ef0:	4299      	cmp	r1, r3
			now += 3276800000; // handle rollover
    5ef2:	bf88      	it	hi
    5ef4:	f103 4343 	addhi.w	r3, r3, #3271557120	; 0xc3000000
		if  ( // timeout
    5ef8:	f1a2 0202 	sub.w	r2, r2, #2
			now += 3276800000; // handle rollover
    5efc:	bf88      	it	hi
    5efe:	f503 03a0 	addhi.w	r3, r3, #5242880	; 0x500000
		if  ( // timeout
    5f02:	2a01      	cmp	r2, #1
    5f04:	d803      	bhi.n	5f0e <bt_le_sync+0x252>
			&& (now - le.last_packet > 50000000))
    5f06:	4a2c      	ldr	r2, [pc, #176]	; (5fb8 <bt_le_sync+0x2fc>)
    5f08:	1a5b      	subs	r3, r3, r1
    5f0a:	4293      	cmp	r3, r2
    5f0c:	d802      	bhi.n	5f14 <bt_le_sync+0x258>
			|| (le_jam_count == 1)
    5f0e:	69e3      	ldr	r3, [r4, #28]
    5f10:	2b01      	cmp	r3, #1
    5f12:	d170      	bne.n	5ff6 <bt_le_sync+0x33a>
			reset_le();
    5f14:	f7ff fd96 	bl	5a44 <reset_le>
			TXLED_CLR;
    5f18:	f44f 7280 	mov.w	r2, #256	; 0x100
			le_jam_count = 0;
    5f1c:	2300      	movs	r3, #0
			TXLED_CLR;
    5f1e:	9901      	ldr	r1, [sp, #4]
			le_jam_count = 0;
    5f20:	61e3      	str	r3, [r4, #28]
			TXLED_CLR;
    5f22:	600a      	str	r2, [r1, #0]
			if (jam_mode == JAM_ONCE) {
    5f24:	7ce2      	ldrb	r2, [r4, #19]
    5f26:	2a01      	cmp	r2, #1
    5f28:	d14e      	bne.n	5fc8 <bt_le_sync+0x30c>
				jam_mode = JAM_NONE;
    5f2a:	74e3      	strb	r3, [r4, #19]
				requested_mode = MODE_IDLE;
    5f2c:	74a3      	strb	r3, [r4, #18]
	ICER0 = ICER0_ICE_USB;
    5f2e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5f32:	4b1d      	ldr	r3, [pc, #116]	; (5fa8 <bt_le_sync+0x2ec>)
    5f34:	601a      	str	r2, [r3, #0]
	cc2400_idle();
    5f36:	f7fe faf5 	bl	4524 <cc2400_idle>
	dio_ssp_stop();
    5f3a:	f001 fb3f 	bl	75bc <dio_ssp_stop>
	cs_trigger_disable();
    5f3e:	f001 f9f9 	bl	7334 <cs_trigger_disable>
}
    5f42:	b013      	add	sp, #76	; 0x4c
    5f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
    5f48:	68e8      	ldr	r0, [r5, #12]
    5f4a:	a906      	add	r1, sp, #24
    5f4c:	f000 ffd4 	bl	6ef8 <btle_crcgen_lut>
						 | (p[4+len+1] << 8)
    5f50:	ab12      	add	r3, sp, #72	; 0x48
			u32 wire_crc = (p[4+len+2] << 16)
    5f52:	4499      	add	r9, r3
						 | (p[4+len+1] << 8)
    5f54:	441e      	add	r6, r3
			u32 wire_crc = (p[4+len+2] << 16)
    5f56:	f819 3c34 	ldrb.w	r3, [r9, #-52]
						 | (p[4+len+1] << 8)
    5f5a:	f816 2c2d 	ldrb.w	r2, [r6, #-45]
			u32 wire_crc = (p[4+len+2] << 16)
    5f5e:	041b      	lsls	r3, r3, #16
						 | (p[4+len+1] << 8)
    5f60:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
						 | (p[4+len+0] << 0);
    5f64:	f816 2c2e 	ldrb.w	r2, [r6, #-46]
    5f68:	4313      	orrs	r3, r2
			if (calc_crc != wire_crc) // skip packets with a bad CRC
    5f6a:	4298      	cmp	r0, r3
    5f6c:	d08c      	beq.n	5e88 <bt_le_sync+0x1cc>
    5f6e:	e7a6      	b.n	5ebe <bt_le_sync+0x202>
			u8 tmp = (u8)DIO_SSP_DR;
    5f70:	4b12      	ldr	r3, [pc, #72]	; (5fbc <bt_le_sync+0x300>)
    5f72:	681b      	ldr	r3, [r3, #0]
    5f74:	e7ad      	b.n	5ed2 <bt_le_sync+0x216>
    5f76:	bf00      	nop
    5f78:	10000b3c 	.word	0x10000b3c
    5f7c:	10000450 	.word	0x10000450
    5f80:	e000e100 	.word	0xe000e100
    5f84:	2009c03c 	.word	0x2009c03c
    5f88:	10001860 	.word	0x10001860
    5f8c:	10001350 	.word	0x10001350
    5f90:	10001352 	.word	0x10001352
    5f94:	0000acac 	.word	0x0000acac
    5f98:	1000182d 	.word	0x1000182d
    5f9c:	50004110 	.word	0x50004110
    5fa0:	50004104 	.word	0x50004104
    5fa4:	2009c038 	.word	0x2009c038
    5fa8:	e000e180 	.word	0xe000e180
    5fac:	40004008 	.word	0x40004008
    5fb0:	1000136c 	.word	0x1000136c
    5fb4:	4003000c 	.word	0x4003000c
    5fb8:	02faf080 	.word	0x02faf080
    5fbc:	40030008 	.word	0x40030008
    5fc0:	40030024 	.word	0x40030024
    5fc4:	1000134c 	.word	0x1000134c
			if (active_mode == MODE_BT_PROMISC_LE)
    5fc8:	f1b8 0f0a 	cmp.w	r8, #10
    5fcc:	d0af      	beq.n	5f2e <bt_le_sync+0x272>
			le.link_state = LINK_LISTENING;
    5fce:	2301      	movs	r3, #1
			cc2400_strobe(SRFOFF);
    5fd0:	2064      	movs	r0, #100	; 0x64
			le.link_state = LINK_LISTENING;
    5fd2:	752b      	strb	r3, [r5, #20]
			cc2400_strobe(SRFOFF);
    5fd4:	f003 fe7b 	bl	9cce <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK));
    5fd8:	f003 fe72 	bl	9cc0 <cc2400_status>
    5fdc:	0742      	lsls	r2, r0, #29
    5fde:	d4fb      	bmi.n	5fd8 <bt_le_sync+0x31c>
			channel = le_adv_channel != 0 ? le_adv_channel : 2402;
    5fe0:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
    5fe4:	b29b      	uxth	r3, r3
    5fe6:	b303      	cbz	r3, 602a <bt_le_sync+0x36e>
    5fe8:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
    5fec:	b29b      	uxth	r3, r3
    5fee:	f8a5 304c 	strh.w	r3, [r5, #76]	; 0x4c
			restart_jamming = 1;
    5ff2:	2301      	movs	r3, #1
    5ff4:	6323      	str	r3, [r4, #48]	; 0x30
		cc2400_set(SYNCL, le.syncl);
    5ff6:	202c      	movs	r0, #44	; 0x2c
    5ff8:	88e9      	ldrh	r1, [r5, #6]
    5ffa:	f003 fdc8 	bl	9b8e <cc2400_set>
		cc2400_set(SYNCH, le.synch);
    5ffe:	202d      	movs	r0, #45	; 0x2d
    6000:	88a9      	ldrh	r1, [r5, #4]
    6002:	f003 fdc4 	bl	9b8e <cc2400_set>
		if (do_hop)
    6006:	7ae3      	ldrb	r3, [r4, #11]
    6008:	b10b      	cbz	r3, 600e <bt_le_sync+0x352>
			hop();
    600a:	f7ff fa3d 	bl	5488 <hop>
		if (le_jam_count > 0) {
    600e:	69e3      	ldr	r3, [r4, #28]
    6010:	2b00      	cmp	r3, #0
    6012:	dd0d      	ble.n	6030 <bt_le_sync+0x374>
			le_jam();
    6014:	f7ff f9fc 	bl	5410 <le_jam>
			--le_jam_count;
    6018:	69e3      	ldr	r3, [r4, #28]
    601a:	3b01      	subs	r3, #1
    601c:	61e3      	str	r3, [r4, #28]
		rx_tc = 0;
    601e:	2300      	movs	r3, #0
		rx_err = 0;
    6020:	4a0e      	ldr	r2, [pc, #56]	; (605c <bt_le_sync+0x3a0>)
		rx_tc = 0;
    6022:	f8cb 3000 	str.w	r3, [fp]
		rx_err = 0;
    6026:	6013      	str	r3, [r2, #0]
    6028:	e669      	b.n	5cfe <bt_le_sync+0x42>
			channel = le_adv_channel != 0 ? le_adv_channel : 2402;
    602a:	f640 1362 	movw	r3, #2402	; 0x962
    602e:	e7de      	b.n	5fee <bt_le_sync+0x332>
			dma_init_le();
    6030:	f001 fa6c 	bl	750c <dma_init_le>
			dio_ssp_start();
    6034:	f001 faa2 	bl	757c <dio_ssp_start>
			if (restart_jamming) {
    6038:	6b23      	ldr	r3, [r4, #48]	; 0x30
    603a:	b13b      	cbz	r3, 604c <bt_le_sync+0x390>
				cc2400_rx_sync(rbit(le.access_address));
    603c:	6828      	ldr	r0, [r5, #0]
    603e:	f003 fcb1 	bl	99a4 <rbit>
    6042:	f7fe f9c9 	bl	43d8 <cc2400_rx_sync>
				restart_jamming = 0;
    6046:	2300      	movs	r3, #0
    6048:	6323      	str	r3, [r4, #48]	; 0x30
    604a:	e7e8      	b.n	601e <bt_le_sync+0x362>
				while (!(cc2400_status() & FS_LOCK));
    604c:	f003 fe38 	bl	9cc0 <cc2400_status>
    6050:	0743      	lsls	r3, r0, #29
    6052:	d5fb      	bpl.n	604c <bt_le_sync+0x390>
				cc2400_strobe(SRX);
    6054:	2062      	movs	r0, #98	; 0x62
    6056:	f003 fe3a 	bl	9cce <cc2400_strobe>
    605a:	e7e0      	b.n	601e <bt_le_sync+0x362>
    605c:	10001860 	.word	0x10001860

00006060 <le_promisc_state>:
	bt_le_sync(MODE_BT_FOLLOW_LE);
	*/
}

// issue state change message
void le_promisc_state(u8 type, void *data, unsigned len) {
    6060:	b570      	push	{r4, r5, r6, lr}
    6062:	b08e      	sub	sp, #56	; 0x38
    6064:	4615      	mov	r5, r2
    6066:	460c      	mov	r4, r1
	u8 buf[50] = { 0, };
    6068:	2100      	movs	r1, #0
void le_promisc_state(u8 type, void *data, unsigned len) {
    606a:	4606      	mov	r6, r0
	u8 buf[50] = { 0, };
    606c:	222e      	movs	r2, #46	; 0x2e
    606e:	a802      	add	r0, sp, #8
    6070:	9101      	str	r1, [sp, #4]
    6072:	f7fe f8b3 	bl	41dc <memset>
	if (len > 49)
		len = 49;

	buf[0] = type;
	memcpy(&buf[1], data, len);
    6076:	2d31      	cmp	r5, #49	; 0x31
    6078:	462a      	mov	r2, r5
    607a:	4621      	mov	r1, r4
    607c:	bf28      	it	cs
    607e:	2231      	movcs	r2, #49	; 0x31
    6080:	f10d 0005 	add.w	r0, sp, #5
	buf[0] = type;
    6084:	f88d 6004 	strb.w	r6, [sp, #4]
	memcpy(&buf[1], data, len);
    6088:	f004 fcb8 	bl	a9fc <memcpy>
	enqueue(LE_PROMISC, (uint8_t*)buf);
    608c:	a901      	add	r1, sp, #4
    608e:	2005      	movs	r0, #5
    6090:	f7fe f9fc 	bl	448c <enqueue>
}
    6094:	b00e      	add	sp, #56	; 0x38
    6096:	bd70      	pop	{r4, r5, r6, pc}

00006098 <promisc_recover_hop_increment>:

// divide, rounding to the nearest integer: round up at 0.5.
#define DIVIDE_ROUND(N, D) ((N) + (D)/2) / (D)

void promisc_recover_hop_increment(u8 *packet) {
    6098:	b538      	push	{r3, r4, r5, lr}
	static u32 first_ts = 0;
	if (channel == 2404) {
    609a:	f640 1164 	movw	r1, #2404	; 0x964
    609e:	4b31      	ldr	r3, [pc, #196]	; (6164 <promisc_recover_hop_increment+0xcc>)
    60a0:	4c31      	ldr	r4, [pc, #196]	; (6168 <promisc_recover_hop_increment+0xd0>)
    60a2:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
    60a6:	b292      	uxth	r2, r2
    60a8:	428a      	cmp	r2, r1
    60aa:	d110      	bne.n	60ce <promisc_recover_hop_increment+0x36>
		first_ts = CLK100NS;
    60ac:	f640 4135 	movw	r1, #3125	; 0xc35
    60b0:	4b2e      	ldr	r3, [pc, #184]	; (616c <promisc_recover_hop_increment+0xd4>)
    60b2:	4a2f      	ldr	r2, [pc, #188]	; (6170 <promisc_recover_hop_increment+0xd8>)
    60b4:	681b      	ldr	r3, [r3, #0]
    60b6:	6812      	ldr	r2, [r2, #0]
    60b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
    60bc:	fb01 2303 	mla	r3, r1, r3, r2
    60c0:	6363      	str	r3, [r4, #52]	; 0x34
		hop_direct_channel = 2406;
    60c2:	f640 1366 	movw	r3, #2406	; 0x966
			if (jam_mode != JAM_NONE)
				le_jam_count = JAM_COUNT_DEFAULT;

			return;
		}
		hop_direct_channel = 2404;
    60c6:	81a3      	strh	r3, [r4, #12]
		do_hop = 1;
	}
	else {
		hop_direct_channel = 2404;
		do_hop = 1;
    60c8:	2301      	movs	r3, #1
    60ca:	72e3      	strb	r3, [r4, #11]
    60cc:	e044      	b.n	6158 <promisc_recover_hop_increment+0xc0>
	} else if (channel == 2406) {
    60ce:	f640 1066 	movw	r0, #2406	; 0x966
    60d2:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
    60d6:	b292      	uxth	r2, r2
    60d8:	4282      	cmp	r2, r0
    60da:	d141      	bne.n	6160 <promisc_recover_hop_increment+0xc8>
		u32 second_ts = CLK100NS;
    60dc:	f640 4035 	movw	r0, #3125	; 0xc35
    60e0:	4a22      	ldr	r2, [pc, #136]	; (616c <promisc_recover_hop_increment+0xd4>)
    60e2:	4923      	ldr	r1, [pc, #140]	; (6170 <promisc_recover_hop_increment+0xd8>)
    60e4:	6812      	ldr	r2, [r2, #0]
    60e6:	6809      	ldr	r1, [r1, #0]
    60e8:	f3c2 0213 	ubfx	r2, r2, #0, #20
    60ec:	fb00 1202 	mla	r2, r0, r2, r1
		u32 channels_hopped = DIVIDE_ROUND(second_ts - first_ts,
    60f0:	f641 016a 	movw	r1, #6250	; 0x186a
		if (second_ts < first_ts)
    60f4:	6b65      	ldr	r5, [r4, #52]	; 0x34
		u32 channels_hopped = DIVIDE_ROUND(second_ts - first_ts,
    60f6:	8bd8      	ldrh	r0, [r3, #30]
		if (second_ts < first_ts)
    60f8:	42aa      	cmp	r2, r5
			second_ts += 3276800000; // handle rollover
    60fa:	bf3c      	itt	cc
    60fc:	f102 4243 	addcc.w	r2, r2, #3271557120	; 0xc3000000
    6100:	f502 02a0 	addcc.w	r2, r2, #5242880	; 0x500000
		u32 channels_hopped = DIVIDE_ROUND(second_ts - first_ts,
    6104:	fb01 2200 	mla	r2, r1, r0, r2
    6108:	f243 01d4 	movw	r1, #12500	; 0x30d4
    610c:	4341      	muls	r1, r0
    610e:	1b52      	subs	r2, r2, r5
    6110:	fbb2 f2f1 	udiv	r2, r2, r1
		if (channels_hopped < 37) {
    6114:	2a24      	cmp	r2, #36	; 0x24
    6116:	d820      	bhi.n	615a <promisc_recover_hop_increment+0xc2>
			le.channel_idx = (1 + le.channel_increment) % 37;
    6118:	2525      	movs	r5, #37	; 0x25
			le.channel_increment = hop_interval_lut[channels_hopped];
    611a:	4916      	ldr	r1, [pc, #88]	; (6174 <promisc_recover_hop_increment+0xdc>)
			le.interval_timer = le.conn_interval / 2;
    611c:	0840      	lsrs	r0, r0, #1
			le.channel_increment = hop_interval_lut[channels_hopped];
    611e:	440a      	add	r2, r1
    6120:	f892 2870 	ldrb.w	r2, [r2, #2160]	; 0x870
			le.interval_timer = le.conn_interval / 2;
    6124:	8398      	strh	r0, [r3, #28]
			le.channel_increment = hop_interval_lut[channels_hopped];
    6126:	759a      	strb	r2, [r3, #22]
			le.channel_idx = (1 + le.channel_increment) % 37;
    6128:	3201      	adds	r2, #1
    612a:	fbb2 f0f5 	udiv	r0, r2, r5
			le.conn_count = 0;
    612e:	2100      	movs	r1, #0
			le.channel_idx = (1 + le.channel_increment) % 37;
    6130:	fb05 2210 	mls	r2, r5, r0, r2
			le.link_state = LINK_CONNECTED;
    6134:	2003      	movs	r0, #3
			le.conn_count = 0;
    6136:	8419      	strh	r1, [r3, #32]
			le.conn_epoch = 0;
    6138:	6199      	str	r1, [r3, #24]
			le.channel_idx = (1 + le.channel_increment) % 37;
    613a:	755a      	strb	r2, [r3, #21]
			le.crc_verify = 0;
    613c:	6119      	str	r1, [r3, #16]
			le.link_state = LINK_CONNECTED;
    613e:	7518      	strb	r0, [r3, #20]
			packet_cb = connection_follow_cb;
    6140:	4b0d      	ldr	r3, [pc, #52]	; (6178 <promisc_recover_hop_increment+0xe0>)
			do_hop = 0;
    6142:	72e1      	strb	r1, [r4, #11]
			le_promisc_state(3, &le.channel_increment, 1);
    6144:	2201      	movs	r2, #1
    6146:	490d      	ldr	r1, [pc, #52]	; (617c <promisc_recover_hop_increment+0xe4>)
			packet_cb = connection_follow_cb;
    6148:	61a3      	str	r3, [r4, #24]
			hop_mode = HOP_BTLE;
    614a:	72a0      	strb	r0, [r4, #10]
			le_promisc_state(3, &le.channel_increment, 1);
    614c:	f7ff ff88 	bl	6060 <le_promisc_state>
			if (jam_mode != JAM_NONE)
    6150:	7ce3      	ldrb	r3, [r4, #19]
    6152:	b10b      	cbz	r3, 6158 <promisc_recover_hop_increment+0xc0>
				le_jam_count = JAM_COUNT_DEFAULT;
    6154:	2328      	movs	r3, #40	; 0x28
    6156:	61e3      	str	r3, [r4, #28]
	}
}
    6158:	bd38      	pop	{r3, r4, r5, pc}
		hop_direct_channel = 2404;
    615a:	f640 1364 	movw	r3, #2404	; 0x964
    615e:	e7b2      	b.n	60c6 <promisc_recover_hop_increment+0x2e>
		hop_direct_channel = 2404;
    6160:	81a1      	strh	r1, [r4, #12]
    6162:	e7b1      	b.n	60c8 <promisc_recover_hop_increment+0x30>
    6164:	10000450 	.word	0x10000450
    6168:	10000b3c 	.word	0x10000b3c
    616c:	1000136c 	.word	0x1000136c
    6170:	40004008 	.word	0x40004008
    6174:	0000abbc 	.word	0x0000abbc
    6178:	000046e1 	.word	0x000046e1
    617c:	10000466 	.word	0x10000466

00006180 <promisc_recover_hop_interval>:

void promisc_recover_hop_interval(u8 *packet) {
    6180:	b538      	push	{r3, r4, r5, lr}
	static u32 prev_clk = 0;

	u32 cur_clk = CLK100NS;
    6182:	f640 4235 	movw	r2, #3125	; 0xc35
    6186:	4b24      	ldr	r3, [pc, #144]	; (6218 <promisc_recover_hop_interval+0x98>)
	if (cur_clk < prev_clk)
    6188:	4d24      	ldr	r5, [pc, #144]	; (621c <promisc_recover_hop_interval+0x9c>)
	u32 cur_clk = CLK100NS;
    618a:	681c      	ldr	r4, [r3, #0]
    618c:	4b24      	ldr	r3, [pc, #144]	; (6220 <promisc_recover_hop_interval+0xa0>)
    618e:	f3c4 0413 	ubfx	r4, r4, #0, #20
    6192:	681b      	ldr	r3, [r3, #0]
    6194:	fb02 3404 	mla	r4, r2, r4, r3
		cur_clk += 3267800000; // handle rollover
	u32 clk_diff = cur_clk - prev_clk;
	u16 obsv_hop_interval; // observed hop interval

	// probably consecutive data packets on the same channel
	if (clk_diff < 2 * LE_BASECLK)
    6198:	f246 12a7 	movw	r2, #24999	; 0x61a7
	if (cur_clk < prev_clk)
    619c:	6bab      	ldr	r3, [r5, #56]	; 0x38
    619e:	42a3      	cmp	r3, r4
		cur_clk += 3267800000; // handle rollover
    61a0:	bf82      	ittt	hi
    61a2:	f104 4443 	addhi.w	r4, r4, #3271557120	; 0xc3000000
    61a6:	f5a4 1465 	subhi.w	r4, r4, #3751936	; 0x394000
    61aa:	f5a4 54a2 	subhi.w	r4, r4, #5184	; 0x1440
	u32 clk_diff = cur_clk - prev_clk;
    61ae:	1ae3      	subs	r3, r4, r3
	if (clk_diff < 2 * LE_BASECLK)
    61b0:	4293      	cmp	r3, r2
    61b2:	d92a      	bls.n	620a <promisc_recover_hop_interval+0x8a>
		return;

	if (clk_diff < le_promisc.smallest_hop_interval)
    61b4:	4a1b      	ldr	r2, [pc, #108]	; (6224 <promisc_recover_hop_interval+0xa4>)
    61b6:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
    61ba:	4299      	cmp	r1, r3
		le_promisc.smallest_hop_interval = clk_diff;
    61bc:	bf88      	it	hi
    61be:	f8c2 3100 	strhi.w	r3, [r2, #256]	; 0x100

	obsv_hop_interval = DIVIDE_ROUND(le_promisc.smallest_hop_interval, 37 * LE_BASECLK);
    61c2:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
    61c6:	4918      	ldr	r1, [pc, #96]	; (6228 <promisc_recover_hop_interval+0xa8>)
    61c8:	f503 3361 	add.w	r3, r3, #230400	; 0x38400
    61cc:	f203 3352 	addw	r3, r3, #850	; 0x352
    61d0:	fbb3 f3f1 	udiv	r3, r3, r1

	if (le.conn_interval == obsv_hop_interval) {
    61d4:	4915      	ldr	r1, [pc, #84]	; (622c <promisc_recover_hop_interval+0xac>)
	obsv_hop_interval = DIVIDE_ROUND(le_promisc.smallest_hop_interval, 37 * LE_BASECLK);
    61d6:	b29b      	uxth	r3, r3
	if (le.conn_interval == obsv_hop_interval) {
    61d8:	8bc8      	ldrh	r0, [r1, #30]
    61da:	4298      	cmp	r0, r3
    61dc:	d116      	bne.n	620c <promisc_recover_hop_interval+0x8c>
		// 5 consecutive hop intervals: consider it legit and move on
		++le_promisc.consec_intervals;
    61de:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    61e2:	3301      	adds	r3, #1
		if (le_promisc.consec_intervals == 5) {
    61e4:	2b05      	cmp	r3, #5
		++le_promisc.consec_intervals;
    61e6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
		if (le_promisc.consec_intervals == 5) {
    61ea:	d10d      	bne.n	6208 <promisc_recover_hop_interval+0x88>
			packet_cb = promisc_recover_hop_increment;
    61ec:	4b10      	ldr	r3, [pc, #64]	; (6230 <promisc_recover_hop_interval+0xb0>)
			hop_direct_channel = 2404;
			hop_mode = HOP_DIRECT;
			do_hop = 1;
			le_promisc_state(2, &le.conn_interval, 2);
    61ee:	2202      	movs	r2, #2
			packet_cb = promisc_recover_hop_increment;
    61f0:	61ab      	str	r3, [r5, #24]
			hop_direct_channel = 2404;
    61f2:	f640 1364 	movw	r3, #2404	; 0x964
    61f6:	81ab      	strh	r3, [r5, #12]
			hop_mode = HOP_DIRECT;
    61f8:	2304      	movs	r3, #4
    61fa:	72ab      	strb	r3, [r5, #10]
			do_hop = 1;
    61fc:	2301      	movs	r3, #1
			le_promisc_state(2, &le.conn_interval, 2);
    61fe:	4610      	mov	r0, r2
    6200:	311e      	adds	r1, #30
			do_hop = 1;
    6202:	72eb      	strb	r3, [r5, #11]
			le_promisc_state(2, &le.conn_interval, 2);
    6204:	f7ff ff2c 	bl	6060 <le_promisc_state>
	} else {
		le.conn_interval = obsv_hop_interval;
		le_promisc.consec_intervals = 0;
	}

	prev_clk = cur_clk;
    6208:	63ac      	str	r4, [r5, #56]	; 0x38
}
    620a:	bd38      	pop	{r3, r4, r5, pc}
		le.conn_interval = obsv_hop_interval;
    620c:	83cb      	strh	r3, [r1, #30]
		le_promisc.consec_intervals = 0;
    620e:	2300      	movs	r3, #0
    6210:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    6214:	e7f8      	b.n	6208 <promisc_recover_hop_interval+0x88>
    6216:	bf00      	nop
    6218:	1000136c 	.word	0x1000136c
    621c:	10000b3c 	.word	0x10000b3c
    6220:	40004008 	.word	0x40004008
    6224:	100013b0 	.word	0x100013b0
    6228:	00070ea4 	.word	0x00070ea4
    622c:	10000450 	.word	0x10000450
    6230:	00006099 	.word	0x00006099

00006234 <promisc_follow_cb>:

void promisc_follow_cb(u8 *packet) {
    6234:	b570      	push	{r4, r5, r6, lr}
	int i;

	// get the CRCInit
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
    6236:	4d17      	ldr	r5, [pc, #92]	; (6294 <promisc_follow_cb+0x60>)
    6238:	692c      	ldr	r4, [r5, #16]
    623a:	bb54      	cbnz	r4, 6292 <promisc_follow_cb+0x5e>
    623c:	7903      	ldrb	r3, [r0, #4]
    623e:	2b01      	cmp	r3, #1
    6240:	d127      	bne.n	6292 <promisc_follow_cb+0x5e>
    6242:	7943      	ldrb	r3, [r0, #5]
    6244:	bb2b      	cbnz	r3, 6292 <promisc_follow_cb+0x5e>
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];
    6246:	79c3      	ldrb	r3, [r0, #7]
    6248:	7a02      	ldrb	r2, [r0, #8]
    624a:	7986      	ldrb	r6, [r0, #6]
    624c:	021b      	lsls	r3, r3, #8
    624e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
    6252:	1d01      	adds	r1, r0, #4
    6254:	2202      	movs	r2, #2
    6256:	ea43 0006 	orr.w	r0, r3, r6
    625a:	f000 fe1f 	bl	6e9c <btle_reverse_crc>
    625e:	4622      	mov	r2, r4
    6260:	60a8      	str	r0, [r5, #8]
		le.crc_init_reversed = 0;
		for (i = 0; i < 24; ++i)
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);
    6262:	fa20 f304 	lsr.w	r3, r0, r4
    6266:	f1c4 0117 	rsb	r1, r4, #23
    626a:	f003 0301 	and.w	r3, r3, #1
		for (i = 0; i < 24; ++i)
    626e:	3401      	adds	r4, #1
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);
    6270:	408b      	lsls	r3, r1
		for (i = 0; i < 24; ++i)
    6272:	2c18      	cmp	r4, #24
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);
    6274:	ea42 0203 	orr.w	r2, r2, r3
		for (i = 0; i < 24; ++i)
    6278:	d1f3      	bne.n	6262 <promisc_follow_cb+0x2e>

		le.crc_verify = 1;
    627a:	2001      	movs	r0, #1
    627c:	60ea      	str	r2, [r5, #12]
		packet_cb = promisc_recover_hop_interval;
    627e:	4b06      	ldr	r3, [pc, #24]	; (6298 <promisc_follow_cb+0x64>)
    6280:	4a06      	ldr	r2, [pc, #24]	; (629c <promisc_follow_cb+0x68>)
		le.crc_verify = 1;
    6282:	6128      	str	r0, [r5, #16]
		packet_cb = promisc_recover_hop_interval;
    6284:	619a      	str	r2, [r3, #24]
		le_promisc_state(1, &le.crc_init, 3);
    6286:	4906      	ldr	r1, [pc, #24]	; (62a0 <promisc_follow_cb+0x6c>)
    6288:	2203      	movs	r2, #3
	}
}
    628a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		le_promisc_state(1, &le.crc_init, 3);
    628e:	f7ff bee7 	b.w	6060 <le_promisc_state>
}
    6292:	bd70      	pop	{r4, r5, r6, pc}
    6294:	10000450 	.word	0x10000450
    6298:	10000b3c 	.word	0x10000b3c
    629c:	00006181 	.word	0x00006181
    62a0:	10000458 	.word	0x10000458

000062a4 <see_aa>:

// called when we see an AA, add it to the list
void see_aa(u32 aa) {
    62a4:	b570      	push	{r4, r5, r6, lr}
	int i, max = -1, killme = -1;
	for (i = 0; i < AA_LIST_SIZE; ++i)
		if (le_promisc.active_aa[i].aa == aa) {
    62a6:	4a13      	ldr	r2, [pc, #76]	; (62f4 <see_aa+0x50>)
	for (i = 0; i < AA_LIST_SIZE; ++i)
    62a8:	2300      	movs	r3, #0
    62aa:	4611      	mov	r1, r2
		if (le_promisc.active_aa[i].aa == aa) {
    62ac:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
    62b0:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
    62b4:	4285      	cmp	r5, r0
    62b6:	d103      	bne.n	62c0 <see_aa+0x1c>
			++le_promisc.active_aa[i].count;
    62b8:	6863      	ldr	r3, [r4, #4]
    62ba:	3301      	adds	r3, #1
    62bc:	6063      	str	r3, [r4, #4]
			max = le_promisc.active_aa[i].count;
		}

	le_promisc.active_aa[killme].aa = aa;
	le_promisc.active_aa[killme].count = 1;
}
    62be:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < AA_LIST_SIZE; ++i)
    62c0:	3301      	adds	r3, #1
    62c2:	2b20      	cmp	r3, #32
    62c4:	d1f2      	bne.n	62ac <see_aa+0x8>
	int i, max = -1, killme = -1;
    62c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	for (i = 0; i < AA_LIST_SIZE; ++i)
    62ca:	2300      	movs	r3, #0
	int i, max = -1, killme = -1;
    62cc:	4614      	mov	r4, r2
		if (le_promisc.active_aa[i].count < max || max < 0) {
    62ce:	4e0a      	ldr	r6, [pc, #40]	; (62f8 <see_aa+0x54>)
    62d0:	f856 5033 	ldr.w	r5, [r6, r3, lsl #3]
    62d4:	42a5      	cmp	r5, r4
    62d6:	db01      	blt.n	62dc <see_aa+0x38>
    62d8:	2c00      	cmp	r4, #0
    62da:	da01      	bge.n	62e0 <see_aa+0x3c>
    62dc:	461a      	mov	r2, r3
    62de:	462c      	mov	r4, r5
	for (i = 0; i < AA_LIST_SIZE; ++i)
    62e0:	3301      	adds	r3, #1
    62e2:	2b20      	cmp	r3, #32
    62e4:	d1f4      	bne.n	62d0 <see_aa+0x2c>
	le_promisc.active_aa[killme].count = 1;
    62e6:	2301      	movs	r3, #1
	le_promisc.active_aa[killme].aa = aa;
    62e8:	f841 0032 	str.w	r0, [r1, r2, lsl #3]
	le_promisc.active_aa[killme].count = 1;
    62ec:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    62f0:	6053      	str	r3, [r2, #4]
    62f2:	e7e4      	b.n	62be <see_aa+0x1a>
    62f4:	100013b0 	.word	0x100013b0
    62f8:	100013b4 	.word	0x100013b4

000062fc <cb_le_promisc>:

/* le promiscuous mode */
int cb_le_promisc(char *unpacked) {
    62fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6300:	b097      	sub	sp, #92	; 0x5c
	int i, j, k;
	int idx;

	// empty data PDU: 01 00
	char desired[4][16] = {
    6302:	aa06      	add	r2, sp, #24
int cb_le_promisc(char *unpacked) {
    6304:	4604      	mov	r4, r0
    6306:	4690      	mov	r8, r2
	char desired[4][16] = {
    6308:	4b69      	ldr	r3, [pc, #420]	; (64b0 <cb_le_promisc+0x1b4>)
    630a:	f103 0640 	add.w	r6, r3, #64	; 0x40
    630e:	4615      	mov	r5, r2
    6310:	6818      	ldr	r0, [r3, #0]
    6312:	6859      	ldr	r1, [r3, #4]
    6314:	3308      	adds	r3, #8
    6316:	c503      	stmia	r5!, {r0, r1}
    6318:	42b3      	cmp	r3, r6
    631a:	462a      	mov	r2, r5
    631c:	d1f7      	bne.n	630e <cb_le_promisc+0x12>
    631e:	4647      	mov	r7, r8
		  0, 0, 0, 0, 0, 0, 0, 0, },
		{ 1, 0, 1, 1, 0, 0, 0, 0,
		  0, 0, 0, 0, 0, 0, 0, 0, },
	};

	for (i = 0; i < 4; ++i) {
    6320:	2500      	movs	r5, #0
		idx = whitening_index[btle_channel_index(channel)];
    6322:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 64d0 <cb_le_promisc+0x1d4>
    6326:	4e63      	ldr	r6, [pc, #396]	; (64b4 <cb_le_promisc+0x1b8>)
    6328:	f8b9 004c 	ldrh.w	r0, [r9, #76]	; 0x4c
    632c:	b280      	uxth	r0, r0
    632e:	f000 fd5b 	bl	6de8 <btle_channel_index>
    6332:	2110      	movs	r1, #16
    6334:	5c33      	ldrb	r3, [r6, r0]

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
			desired[i][j] ^= whitening[idx];
			idx = (idx + 1) % sizeof(whitening);
    6336:	f04f 0c7f 	mov.w	ip, #127	; 0x7f
		idx = whitening_index[btle_channel_index(channel)];
    633a:	4638      	mov	r0, r7
			desired[i][j] ^= whitening[idx];
    633c:	eb06 0e03 	add.w	lr, r6, r3
    6340:	7802      	ldrb	r2, [r0, #0]
    6342:	f89e e028 	ldrb.w	lr, [lr, #40]	; 0x28
			idx = (idx + 1) % sizeof(whitening);
    6346:	3301      	adds	r3, #1
			desired[i][j] ^= whitening[idx];
    6348:	ea82 020e 	eor.w	r2, r2, lr
    634c:	f800 2b01 	strb.w	r2, [r0], #1
			idx = (idx + 1) % sizeof(whitening);
    6350:	fbb3 f2fc 	udiv	r2, r3, ip
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    6354:	3901      	subs	r1, #1
			idx = (idx + 1) % sizeof(whitening);
    6356:	ebc2 12c2 	rsb	r2, r2, r2, lsl #7
    635a:	eba3 0302 	sub.w	r3, r3, r2
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    635e:	d1ed      	bne.n	633c <cb_le_promisc+0x40>
	for (i = 0; i < 4; ++i) {
    6360:	3501      	adds	r5, #1
    6362:	2d04      	cmp	r5, #4
    6364:	f107 0710 	add.w	r7, r7, #16
    6368:	d1de      	bne.n	6328 <cb_le_promisc+0x2c>
		}
	}

	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
    636a:	2720      	movs	r7, #32
    636c:	f104 0530 	add.w	r5, r4, #48	; 0x30
    6370:	3420      	adds	r4, #32
		int ok[4] = { 1, 1, 1, 1 };
    6372:	4b51      	ldr	r3, [pc, #324]	; (64b8 <cb_le_promisc+0x1bc>)
    6374:	f10d 0c08 	add.w	ip, sp, #8
    6378:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    637a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		int matching = -1;

		for (j = 0; j < 4; ++j) {
    637e:	2300      	movs	r3, #0
		int ok[4] = { 1, 1, 1, 1 };
    6380:	4641      	mov	r1, r8
			for (k = 0; k < (int)sizeof(desired[j]); ++k) {
				if (unpacked[i+k] != desired[j][k]) {
					ok[j] = 0;
    6382:	469e      	mov	lr, r3
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
    6384:	4608      	mov	r0, r1
    6386:	4622      	mov	r2, r4
    6388:	e001      	b.n	638e <cb_le_promisc+0x92>
			for (k = 0; k < (int)sizeof(desired[j]); ++k) {
    638a:	42aa      	cmp	r2, r5
    638c:	d007      	beq.n	639e <cb_le_promisc+0xa2>
				if (unpacked[i+k] != desired[j][k]) {
    638e:	f812 ab01 	ldrb.w	sl, [r2], #1
    6392:	f810 9b01 	ldrb.w	r9, [r0], #1
    6396:	45ca      	cmp	sl, r9
    6398:	d0f7      	beq.n	638a <cb_le_promisc+0x8e>
					ok[j] = 0;
    639a:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
		for (j = 0; j < 4; ++j) {
    639e:	3301      	adds	r3, #1
    63a0:	2b04      	cmp	r3, #4
    63a2:	f101 0110 	add.w	r1, r1, #16
    63a6:	d1ed      	bne.n	6384 <cb_le_promisc+0x88>
				}
			}
		}

		// see if any match
		for (j = 0; j < 4; ++j) {
    63a8:	2300      	movs	r3, #0
			if (ok[j]) {
    63aa:	f85c 2b04 	ldr.w	r2, [ip], #4
    63ae:	2a00      	cmp	r2, #0
    63b0:	d171      	bne.n	6496 <cb_le_promisc+0x19a>
		for (j = 0; j < 4; ++j) {
    63b2:	3301      	adds	r3, #1
    63b4:	2b04      	cmp	r3, #4
    63b6:	d1f8      	bne.n	63aa <cb_le_promisc+0xae>
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
    63b8:	3701      	adds	r7, #1
    63ba:	f5b7 7f3c 	cmp.w	r7, #752	; 0x2f0
    63be:	f105 0501 	add.w	r5, r5, #1
    63c2:	f104 0401 	add.w	r4, r4, #1
    63c6:	d1d4      	bne.n	6372 <cb_le_promisc+0x76>
		enqueue(LE_PACKET, (uint8_t*)idle_rxbuf);

	}

	// once we see an AA 5 times, start following it
	for (i = 0; i < AA_LIST_SIZE; ++i) {
    63c8:	2300      	movs	r3, #0
		if (le_promisc.active_aa[i].count > 3) {
    63ca:	4a3c      	ldr	r2, [pc, #240]	; (64bc <cb_le_promisc+0x1c0>)
    63cc:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    63d0:	2903      	cmp	r1, #3
    63d2:	dd5b      	ble.n	648c <cb_le_promisc+0x190>
			le_set_access_address(le_promisc.active_aa[i].aa);
			data_cb = cb_follow_le;
			packet_cb = promisc_follow_cb;
			le.crc_verify = 0;
    63d4:	2400      	movs	r4, #0
			le_set_access_address(le_promisc.active_aa[i].aa);
    63d6:	4a3a      	ldr	r2, [pc, #232]	; (64c0 <cb_le_promisc+0x1c4>)
    63d8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
    63dc:	f7fd ff9c 	bl	4318 <le_set_access_address>
			data_cb = cb_follow_le;
    63e0:	4b38      	ldr	r3, [pc, #224]	; (64c4 <cb_le_promisc+0x1c8>)
    63e2:	4a39      	ldr	r2, [pc, #228]	; (64c8 <cb_le_promisc+0x1cc>)
			le_promisc_state(0, &le.access_address, 4);
    63e4:	4620      	mov	r0, r4
			data_cb = cb_follow_le;
    63e6:	62da      	str	r2, [r3, #44]	; 0x2c
			packet_cb = promisc_follow_cb;
    63e8:	4a38      	ldr	r2, [pc, #224]	; (64cc <cb_le_promisc+0x1d0>)
    63ea:	619a      	str	r2, [r3, #24]
			le.crc_verify = 0;
    63ec:	4b38      	ldr	r3, [pc, #224]	; (64d0 <cb_le_promisc+0x1d4>)
			le_promisc_state(0, &le.access_address, 4);
    63ee:	2204      	movs	r2, #4
    63f0:	4619      	mov	r1, r3
			le.crc_verify = 0;
    63f2:	611c      	str	r4, [r3, #16]
			le_promisc_state(0, &le.access_address, 4);
    63f4:	f7ff fe34 	bl	6060 <le_promisc_state>
			// quit using the old stuff and switch to sync mode
			return 0;
    63f8:	4620      	mov	r0, r4
		}
	}

	return 1;
}
    63fa:	b017      	add	sp, #92	; 0x5c
    63fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				int bit = unpacked[offset];
    6400:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
				if (j >= 4) { // unwhiten data bytes
    6404:	2903      	cmp	r1, #3
				int bit = unpacked[offset];
    6406:	9301      	str	r3, [sp, #4]
				if (j >= 4) { // unwhiten data bytes
    6408:	dd10      	ble.n	642c <cb_le_promisc+0x130>
					bit ^= whitening[idx];
    640a:	4b2a      	ldr	r3, [pc, #168]	; (64b4 <cb_le_promisc+0x1b8>)
    640c:	eb03 0b02 	add.w	fp, r3, r2
    6410:	f89b b028 	ldrb.w	fp, [fp, #40]	; 0x28
    6414:	9b01      	ldr	r3, [sp, #4]
    6416:	ea83 030b 	eor.w	r3, r3, fp
					idx = (idx + 1) % sizeof(whitening);
    641a:	f102 0b01 	add.w	fp, r2, #1
    641e:	227f      	movs	r2, #127	; 0x7f
    6420:	fbbb f2f2 	udiv	r2, fp, r2
    6424:	ebc2 12c2 	rsb	r2, r2, r2, lsl #7
    6428:	ebab 0202 	sub.w	r2, fp, r2
				byte |= bit << k;
    642c:	4083      	lsls	r3, r0
			for (k = 0; k < 8; k++) {
    642e:	3001      	adds	r0, #1
				byte |= bit << k;
    6430:	ea43 030c 	orr.w	r3, r3, ip
			for (k = 0; k < 8; k++) {
    6434:	2808      	cmp	r0, #8
				byte |= bit << k;
    6436:	fa5f fc83 	uxtb.w	ip, r3
			for (k = 0; k < 8; k++) {
    643a:	d1e1      	bne.n	6400 <cb_le_promisc+0x104>
			idle_rxbuf[j] = byte;
    643c:	f8d9 3000 	ldr.w	r3, [r9]
    6440:	f10e 0e08 	add.w	lr, lr, #8
    6444:	f803 c001 	strb.w	ip, [r3, r1]
		for (j = 0; j < 4+3+3; ++j) {
    6448:	3101      	adds	r1, #1
    644a:	290a      	cmp	r1, #10
    644c:	d004      	beq.n	6458 <cb_le_promisc+0x15c>
			u8 byte = 0;
    644e:	f04f 0c00 	mov.w	ip, #0
		for (j = 0; j < 4; ++j) {
    6452:	46f2      	mov	sl, lr
			for (k = 0; k < 8; k++) {
    6454:	4660      	mov	r0, ip
    6456:	e7d3      	b.n	6400 <cb_le_promisc+0x104>
		u32 aa = (idle_rxbuf[3] << 24) |
    6458:	f8d9 3000 	ldr.w	r3, [r9]
    645c:	78d9      	ldrb	r1, [r3, #3]
				 (idle_rxbuf[2] << 16) |
    645e:	f8d9 3000 	ldr.w	r3, [r9]
    6462:	789b      	ldrb	r3, [r3, #2]
				 (idle_rxbuf[1] <<  8) |
    6464:	f8d9 2000 	ldr.w	r2, [r9]
				 (idle_rxbuf[2] << 16) |
    6468:	041b      	lsls	r3, r3, #16
				 (idle_rxbuf[1] <<  8) |
    646a:	7850      	ldrb	r0, [r2, #1]
				 (idle_rxbuf[0]);
    646c:	f8d9 2000 	ldr.w	r2, [r9]
		u32 aa = (idle_rxbuf[3] << 24) |
    6470:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
				 (idle_rxbuf[0]);
    6474:	7812      	ldrb	r2, [r2, #0]
				 (idle_rxbuf[1] <<  8) |
    6476:	4313      	orrs	r3, r2
		see_aa(aa);
    6478:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    647c:	f7ff ff12 	bl	62a4 <see_aa>
		enqueue(LE_PACKET, (uint8_t*)idle_rxbuf);
    6480:	f8d9 1000 	ldr.w	r1, [r9]
    6484:	2001      	movs	r0, #1
    6486:	f7fe f801 	bl	448c <enqueue>
    648a:	e795      	b.n	63b8 <cb_le_promisc+0xbc>
	for (i = 0; i < AA_LIST_SIZE; ++i) {
    648c:	3301      	adds	r3, #1
    648e:	2b20      	cmp	r3, #32
    6490:	d19c      	bne.n	63cc <cb_le_promisc+0xd0>
	return 1;
    6492:	2001      	movs	r0, #1
    6494:	e7b1      	b.n	63fa <cb_le_promisc+0xfe>
		idx = whitening_index[btle_channel_index(channel)];
    6496:	4b0e      	ldr	r3, [pc, #56]	; (64d0 <cb_le_promisc+0x1d4>)
			idle_rxbuf[j] = byte;
    6498:	f8df 9038 	ldr.w	r9, [pc, #56]	; 64d4 <cb_le_promisc+0x1d8>
		idx = whitening_index[btle_channel_index(channel)];
    649c:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
    64a0:	b280      	uxth	r0, r0
    64a2:	f000 fca1 	bl	6de8 <btle_channel_index>
		for (j = 0; j < 4+3+3; ++j) {
    64a6:	2100      	movs	r1, #0
		idx = whitening_index[btle_channel_index(channel)];
    64a8:	5c32      	ldrb	r2, [r6, r0]
		for (j = 0; j < 4+3+3; ++j) {
    64aa:	f1a5 0e31 	sub.w	lr, r5, #49	; 0x31
    64ae:	e7ce      	b.n	644e <cb_le_promisc+0x152>
    64b0:	0000b451 	.word	0x0000b451
    64b4:	0000abbc 	.word	0x0000abbc
    64b8:	0000b494 	.word	0x0000b494
    64bc:	100013b4 	.word	0x100013b4
    64c0:	100013b0 	.word	0x100013b0
    64c4:	10000b3c 	.word	0x10000b3c
    64c8:	000045d1 	.word	0x000045d1
    64cc:	00006235 	.word	0x00006235
    64d0:	10000450 	.word	0x10000450
    64d4:	100014c8 	.word	0x100014c8

000064d8 <bt_promisc_le>:

void bt_promisc_le() {
    64d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	while (requested_mode == MODE_BT_PROMISC_LE) {
    64da:	4e17      	ldr	r6, [pc, #92]	; (6538 <bt_promisc_le+0x60>)
		reset_le_promisc();

		// jump to a random data channel and turn up the squelch
		if ((channel & 1) == 1)
    64dc:	4c17      	ldr	r4, [pc, #92]	; (653c <bt_promisc_le+0x64>)
    64de:	4635      	mov	r5, r6
	while (requested_mode == MODE_BT_PROMISC_LE) {
    64e0:	7cb3      	ldrb	r3, [r6, #18]
    64e2:	2b0a      	cmp	r3, #10
    64e4:	d000      	beq.n	64e8 <bt_promisc_le+0x10>
		le_promisc_state(0, &le.access_address, 4);
		packet_cb = promisc_follow_cb;
		le.crc_verify = 0;
		bt_le_sync(MODE_BT_PROMISC_LE);
	}
}
    64e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		reset_le_promisc();
    64e8:	f7ff fad4 	bl	5a94 <reset_le_promisc>
		if ((channel & 1) == 1)
    64ec:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    64f0:	07db      	lsls	r3, r3, #31
			channel = 2440;
    64f2:	bf44      	itt	mi
    64f4:	f640 1388 	movwmi	r3, #2440	; 0x988
    64f8:	f8a4 304c 	strhmi.w	r3, [r4, #76]	; 0x4c
		if (!le.target_set) {
    64fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
    64fe:	b94b      	cbnz	r3, 6514 <bt_promisc_le+0x3c>
			cs_threshold_calc_and_set(channel);
    6500:	f8b4 004c 	ldrh.w	r0, [r4, #76]	; 0x4c
    6504:	b280      	uxth	r0, r0
    6506:	f000 fecf 	bl	72a8 <cs_threshold_calc_and_set>
			data_cb = cb_le_promisc;
    650a:	4b0d      	ldr	r3, [pc, #52]	; (6540 <bt_promisc_le+0x68>)
			bt_generic_le(MODE_BT_PROMISC_LE);
    650c:	200a      	movs	r0, #10
			data_cb = cb_le_promisc;
    650e:	62eb      	str	r3, [r5, #44]	; 0x2c
			bt_generic_le(MODE_BT_PROMISC_LE);
    6510:	f7ff fad0 	bl	5ab4 <bt_generic_le>
		if (requested_mode != MODE_BT_PROMISC_LE)
    6514:	7cab      	ldrb	r3, [r5, #18]
    6516:	2b0a      	cmp	r3, #10
    6518:	b2df      	uxtb	r7, r3
    651a:	d1e4      	bne.n	64e6 <bt_promisc_le+0xe>
		le_promisc_state(0, &le.access_address, 4);
    651c:	2204      	movs	r2, #4
    651e:	4621      	mov	r1, r4
    6520:	2000      	movs	r0, #0
    6522:	f7ff fd9d 	bl	6060 <le_promisc_state>
		packet_cb = promisc_follow_cb;
    6526:	4b07      	ldr	r3, [pc, #28]	; (6544 <bt_promisc_le+0x6c>)
		bt_le_sync(MODE_BT_PROMISC_LE);
    6528:	4638      	mov	r0, r7
		packet_cb = promisc_follow_cb;
    652a:	61ab      	str	r3, [r5, #24]
		le.crc_verify = 0;
    652c:	2300      	movs	r3, #0
    652e:	6123      	str	r3, [r4, #16]
		bt_le_sync(MODE_BT_PROMISC_LE);
    6530:	f7ff fbc4 	bl	5cbc <bt_le_sync>
    6534:	e7d4      	b.n	64e0 <bt_promisc_le+0x8>
    6536:	bf00      	nop
    6538:	10000b3c 	.word	0x10000b3c
    653c:	10000450 	.word	0x10000450
    6540:	000062fd 	.word	0x000062fd
    6544:	00006235 	.word	0x00006235

00006548 <bt_slave_le>:

#ifdef TX_ENABLE
void bt_slave_le() {
    6548:	b5f0      	push	{r4, r5, r6, r7, lr}
    654a:	b089      	sub	sp, #36	; 0x24
	u32 calc_crc;
	int i;
	uint8_t adv_ind[32] = { 0x00, };
    654c:	2500      	movs	r5, #0
	uint8_t adv_ind_len;

	if (le_adv_len > LE_ADV_MAX_LEN) {
    654e:	4f31      	ldr	r7, [pc, #196]	; (6614 <bt_slave_le+0xcc>)
	uint8_t adv_ind[32] = { 0x00, };
    6550:	221c      	movs	r2, #28
    6552:	4629      	mov	r1, r5
    6554:	a801      	add	r0, sp, #4
    6556:	9500      	str	r5, [sp, #0]
    6558:	f7fd fe40 	bl	41dc <memset>
	if (le_adv_len > LE_ADV_MAX_LEN) {
    655c:	6dba      	ldr	r2, [r7, #88]	; 0x58
    655e:	4c2e      	ldr	r4, [pc, #184]	; (6618 <bt_slave_le+0xd0>)
    6560:	2aff      	cmp	r2, #255	; 0xff
    6562:	d902      	bls.n	656a <bt_slave_le+0x22>
		requested_mode = MODE_IDLE;
    6564:	74a5      	strb	r5, [r4, #18]
		msleep(100);
	}

	// disable USB interrupts
	ICER0 = ICER0_ICE_USB;
}
    6566:	b009      	add	sp, #36	; 0x24
    6568:	bdf0      	pop	{r4, r5, r6, r7, pc}
	adv_ind_len = 6 + le_adv_len;
    656a:	b2d6      	uxtb	r6, r2
    656c:	1db3      	adds	r3, r6, #6
	adv_ind[1] = adv_ind_len;
    656e:	f88d 3001 	strb.w	r3, [sp, #1]
		adv_ind[i+2] = slave_mac_address[5-i];
    6572:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
	memcpy(adv_ind + 2 + 6, le_adv_data, le_adv_len);
    6576:	f107 015c 	add.w	r1, r7, #92	; 0x5c
		adv_ind[i+2] = slave_mac_address[5-i];
    657a:	f88d 3002 	strb.w	r3, [sp, #2]
    657e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	memcpy(adv_ind + 2 + 6, le_adv_data, le_adv_len);
    6582:	a802      	add	r0, sp, #8
		adv_ind[i+2] = slave_mac_address[5-i];
    6584:	f88d 3003 	strb.w	r3, [sp, #3]
    6588:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    658c:	f88d 3004 	strb.w	r3, [sp, #4]
    6590:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    6594:	f88d 3005 	strb.w	r3, [sp, #5]
    6598:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    659c:	f88d 3006 	strb.w	r3, [sp, #6]
    65a0:	f894 3020 	ldrb.w	r3, [r4, #32]
    65a4:	f88d 3007 	strb.w	r3, [sp, #7]
	memcpy(adv_ind + 2 + 6, le_adv_data, le_adv_len);
    65a8:	f004 fa28 	bl	a9fc <memcpy>
	adv_ind_len += 2;
    65ac:	f106 0208 	add.w	r2, r6, #8
	calc_crc = btle_calc_crc(le.crc_init_reversed, adv_ind, adv_ind_len);
    65b0:	b2d5      	uxtb	r5, r2
    65b2:	462a      	mov	r2, r5
    65b4:	4669      	mov	r1, sp
    65b6:	68f8      	ldr	r0, [r7, #12]
    65b8:	f000 fc56 	bl	6e68 <btle_calc_crc>
	adv_ind[adv_ind_len + 0] = (calc_crc >>  0) & 0xff;
    65bc:	ab08      	add	r3, sp, #32
    65be:	195a      	adds	r2, r3, r5
    65c0:	f802 0c20 	strb.w	r0, [r2, #-32]
	adv_ind[adv_ind_len + 1] = (calc_crc >>  8) & 0xff;
    65c4:	0a03      	lsrs	r3, r0, #8
	adv_ind[adv_ind_len + 2] = (calc_crc >> 16) & 0xff;
    65c6:	0c00      	lsrs	r0, r0, #16
	adv_ind[adv_ind_len + 1] = (calc_crc >>  8) & 0xff;
    65c8:	f802 3c1f 	strb.w	r3, [r2, #-31]
	adv_ind[adv_ind_len + 2] = (calc_crc >> 16) & 0xff;
    65cc:	f802 0c1e 	strb.w	r0, [r2, #-30]
	clkn_start();
    65d0:	f000 ff02 	bl	73d8 <clkn_start>
	ISER0 = ISER0_ISE_USB;
    65d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    65d8:	4b10      	ldr	r3, [pc, #64]	; (661c <bt_slave_le+0xd4>)
		le_transmit(0x8e89bed6, adv_ind_len+3, adv_ind);
    65da:	4f11      	ldr	r7, [pc, #68]	; (6620 <bt_slave_le+0xd8>)
	uint32_t now = (clkn & 0xffffff);
    65dc:	4d11      	ldr	r5, [pc, #68]	; (6624 <bt_slave_le+0xdc>)
	ISER0 = ISER0_ISE_USB;
    65de:	601a      	str	r2, [r3, #0]
	while (requested_mode == MODE_BT_SLAVE_LE) {
    65e0:	7ca3      	ldrb	r3, [r4, #18]
    65e2:	2b0c      	cmp	r3, #12
    65e4:	d004      	beq.n	65f0 <bt_slave_le+0xa8>
	ICER0 = ICER0_ICE_USB;
    65e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    65ea:	4b0f      	ldr	r3, [pc, #60]	; (6628 <bt_slave_le+0xe0>)
    65ec:	601a      	str	r2, [r3, #0]
    65ee:	e7ba      	b.n	6566 <bt_slave_le+0x1e>
		le_transmit(0x8e89bed6, adv_ind_len+3, adv_ind);
    65f0:	f106 010b 	add.w	r1, r6, #11
    65f4:	466a      	mov	r2, sp
    65f6:	4638      	mov	r0, r7
    65f8:	b2c9      	uxtb	r1, r1
    65fa:	f7fe fe39 	bl	5270 <le_transmit>
	uint32_t now = (clkn & 0xffffff);
    65fe:	682b      	ldr	r3, [r5, #0]
    6600:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	uint32_t stop_at = now + millis * 10000 / 3125; // millis -> clkn ticks
    6604:	f503 73a0 	add.w	r3, r3, #320	; 0x140
		while ((clkn & 0xffffff) < stop_at);
    6608:	682a      	ldr	r2, [r5, #0]
    660a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    660e:	4293      	cmp	r3, r2
    6610:	d8fa      	bhi.n	6608 <bt_slave_le+0xc0>
    6612:	e7e5      	b.n	65e0 <bt_slave_le+0x98>
    6614:	10000450 	.word	0x10000450
    6618:	10000b3c 	.word	0x10000b3c
    661c:	e000e100 	.word	0xe000e100
    6620:	8e89bed6 	.word	0x8e89bed6
    6624:	1000136c 	.word	0x1000136c
    6628:	e000e180 	.word	0xe000e180

0000662c <rx_generic_sync>:
#endif

void rx_generic_sync(void) {
    662c:	b5f0      	push	{r4, r5, r6, r7, lr}
    662e:	b08b      	sub	sp, #44	; 0x2c
	u16 reg_val;

	/* Put syncword at start of buffer
	 * DGS: fix this later, we don't know number of syncword bytes, etc
	 */
	reg_val = cc2400_get(SYNCH);
    6630:	202d      	movs	r0, #45	; 0x2d
    6632:	f003 faa3 	bl	9b7c <cc2400_get>
	buf[0] = (reg_val >> 8) & 0xFF;
    6636:	0a03      	lsrs	r3, r0, #8
	buf[1] = reg_val & 0xFF;
    6638:	f88d 0005 	strb.w	r0, [sp, #5]
	reg_val = cc2400_get(SYNCL);
    663c:	202c      	movs	r0, #44	; 0x2c
	buf[0] = (reg_val >> 8) & 0xFF;
    663e:	f88d 3004 	strb.w	r3, [sp, #4]
	reg_val = cc2400_get(SYNCL);
    6642:	f003 fa9b 	bl	9b7c <cc2400_get>
	buf[2] = (reg_val >> 8) & 0xFF;
    6646:	0a03      	lsrs	r3, r0, #8
    6648:	f88d 3006 	strb.w	r3, [sp, #6]
	buf[3] = reg_val & 0xFF;
    664c:	f88d 0007 	strb.w	r0, [sp, #7]

	usb_queue_init();
    6650:	f000 fd38 	bl	70c4 <usb_queue_init>
	clkn_start();
    6654:	f000 fec0 	bl	73d8 <clkn_start>

	while (!(cc2400_status() & XOSC16M_STABLE));
    6658:	f003 fb32 	bl	9cc0 <cc2400_status>
    665c:	0641      	lsls	r1, r0, #25
    665e:	d5fb      	bpl.n	6658 <rx_generic_sync+0x2c>
	cc2400_strobe(SFSON);
    6660:	2061      	movs	r0, #97	; 0x61
    6662:	f003 fb34 	bl	9cce <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    6666:	f003 fb2b 	bl	9cc0 <cc2400_status>
    666a:	0742      	lsls	r2, r0, #29
    666c:	d5fb      	bpl.n	6666 <rx_generic_sync+0x3a>
	RXLED_SET;
    666e:	2210      	movs	r2, #16
#ifdef UBERTOOTH_ONE
		PAEN_SET;
    6670:	2180      	movs	r1, #128	; 0x80
	RXLED_SET;
    6672:	4c13      	ldr	r4, [pc, #76]	; (66c0 <rx_generic_sync+0x94>)
		HGM_SET;
#endif
	while (1) {
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
		cc2400_strobe(SRX);
		USRLED_CLR;
    6674:	2502      	movs	r5, #2
	RXLED_SET;
    6676:	6022      	str	r2, [r4, #0]
		PAEN_SET;
    6678:	4a12      	ldr	r2, [pc, #72]	; (66c4 <rx_generic_sync+0x98>)
		USRLED_CLR;
    667a:	4f13      	ldr	r7, [pc, #76]	; (66c8 <rx_generic_sync+0x9c>)
		PAEN_SET;
    667c:	6011      	str	r1, [r2, #0]
		HGM_SET;
    667e:	f44f 7180 	mov.w	r1, #256	; 0x100
		while (!(cc2400_status() & SYNC_RECEIVED));
		USRLED_SET;

		cc2400_fifo_read(len, buf+4);
		enqueue(BR_PACKET, buf);
		handle_usb(clkn);
    6682:	4e12      	ldr	r6, [pc, #72]	; (66cc <rx_generic_sync+0xa0>)
		HGM_SET;
    6684:	6011      	str	r1, [r2, #0]
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    6686:	200e      	movs	r0, #14
    6688:	f003 fa78 	bl	9b7c <cc2400_get>
    668c:	f000 001f 	and.w	r0, r0, #31
    6690:	280f      	cmp	r0, #15
    6692:	d1f8      	bne.n	6686 <rx_generic_sync+0x5a>
		cc2400_strobe(SRX);
    6694:	2062      	movs	r0, #98	; 0x62
    6696:	f003 fb1a 	bl	9cce <cc2400_strobe>
		USRLED_CLR;
    669a:	603d      	str	r5, [r7, #0]
		while (!(cc2400_status() & SYNC_RECEIVED));
    669c:	f003 fb10 	bl	9cc0 <cc2400_status>
    66a0:	06c3      	lsls	r3, r0, #27
    66a2:	d5fb      	bpl.n	669c <rx_generic_sync+0x70>
		cc2400_fifo_read(len, buf+4);
    66a4:	a902      	add	r1, sp, #8
    66a6:	2020      	movs	r0, #32
		USRLED_SET;
    66a8:	6025      	str	r5, [r4, #0]
		cc2400_fifo_read(len, buf+4);
    66aa:	f003 fac3 	bl	9c34 <cc2400_fifo_read>
		enqueue(BR_PACKET, buf);
    66ae:	a901      	add	r1, sp, #4
    66b0:	2000      	movs	r0, #0
    66b2:	f7fd feeb 	bl	448c <enqueue>
		handle_usb(clkn);
    66b6:	6830      	ldr	r0, [r6, #0]
    66b8:	f000 fd68 	bl	718c <handle_usb>
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    66bc:	e7e3      	b.n	6686 <rx_generic_sync+0x5a>
    66be:	bf00      	nop
    66c0:	2009c038 	.word	0x2009c038
    66c4:	2009c058 	.word	0x2009c058
    66c8:	2009c03c 	.word	0x2009c03c
    66cc:	1000136c 	.word	0x1000136c

000066d0 <rx_generic>:
	}
}

void rx_generic(void) {
    66d0:	b508      	push	{r3, lr}
	// Check for packet mode
	if(cc2400_get(GRMDM) && 0x0400) {
    66d2:	2020      	movs	r0, #32
    66d4:	f003 fa52 	bl	9b7c <cc2400_get>
    66d8:	b108      	cbz	r0, 66de <rx_generic+0xe>
		rx_generic_sync();
    66da:	f7ff ffa7 	bl	662c <rx_generic_sync>
	} else {
		modulation = MOD_NONE;
    66de:	2203      	movs	r2, #3
    66e0:	4b02      	ldr	r3, [pc, #8]	; (66ec <rx_generic+0x1c>)
    66e2:	701a      	strb	r2, [r3, #0]
		bt_stream_rx();
	}
}
    66e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_stream_rx();
    66e8:	f7fe bfb4 	b.w	5654 <bt_stream_rx>
    66ec:	10000b3c 	.word	0x10000b3c

000066f0 <tx_generic>:

#ifdef TX_ENABLE
void tx_generic(void) {
    66f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u16 synch, syncl;
	u8 prev_mode = mode;

	mode = MODE_TX_GENERIC;
    66f4:	2310      	movs	r3, #16
	u8 prev_mode = mode;
    66f6:	4d35      	ldr	r5, [pc, #212]	; (67cc <tx_generic+0xdc>)

	// Save existing syncword
	synch = cc2400_get(SYNCH);
    66f8:	202d      	movs	r0, #45	; 0x2d
	u8 prev_mode = mode;
    66fa:	7c6e      	ldrb	r6, [r5, #17]
	mode = MODE_TX_GENERIC;
    66fc:	746b      	strb	r3, [r5, #17]
	synch = cc2400_get(SYNCH);
    66fe:	f003 fa3d 	bl	9b7c <cc2400_get>
    6702:	4680      	mov	r8, r0
	syncl = cc2400_get(SYNCL);
    6704:	202c      	movs	r0, #44	; 0x2c
    6706:	f003 fa39 	bl	9b7c <cc2400_get>

	cc2400_set(SYNCH, tx_pkt.synch);
    670a:	4c31      	ldr	r4, [pc, #196]	; (67d0 <tx_generic+0xe0>)
	syncl = cc2400_get(SYNCL);
    670c:	4607      	mov	r7, r0
	cc2400_set(SYNCH, tx_pkt.synch);
    670e:	8821      	ldrh	r1, [r4, #0]
    6710:	202d      	movs	r0, #45	; 0x2d
    6712:	f003 fa3c 	bl	9b8e <cc2400_set>
	cc2400_set(SYNCL, tx_pkt.syncl);
    6716:	202c      	movs	r0, #44	; 0x2c
    6718:	8861      	ldrh	r1, [r4, #2]
    671a:	f003 fa38 	bl	9b8e <cc2400_set>
	cc2400_set(MDMCTRL, 0x0057);
    671e:	2157      	movs	r1, #87	; 0x57
    6720:	2003      	movs	r0, #3
    6722:	f003 fa34 	bl	9b8e <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);
    6726:	f241 314b 	movw	r1, #4939	; 0x134b
    672a:	2014      	movs	r0, #20
    672c:	f003 fa2f 	bl	9b8e <cc2400_set>
	cc2400_set(GRMDM, 0x0f61);
    6730:	f640 7161 	movw	r1, #3937	; 0xf61
    6734:	2020      	movs	r0, #32
    6736:	f003 fa2a 	bl	9b8e <cc2400_set>
	cc2400_set(FSDIV, tx_pkt.channel);
    673a:	2002      	movs	r0, #2
    673c:	88a1      	ldrh	r1, [r4, #4]
    673e:	f003 fa26 	bl	9b8e <cc2400_set>
	cc2400_set(FREND, tx_pkt.pa_level);
    6742:	2005      	movs	r0, #5
    6744:	79e1      	ldrb	r1, [r4, #7]
	u8 prev_mode = mode;
    6746:	b2f6      	uxtb	r6, r6
	cc2400_set(FREND, tx_pkt.pa_level);
    6748:	f003 fa21 	bl	9b8e <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    674c:	f003 fab8 	bl	9cc0 <cc2400_status>
    6750:	0641      	lsls	r1, r0, #25
    6752:	d5fb      	bpl.n	674c <tx_generic+0x5c>
	cc2400_strobe(SFSON);
    6754:	2061      	movs	r0, #97	; 0x61
    6756:	f003 faba 	bl	9cce <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    675a:	f003 fab1 	bl	9cc0 <cc2400_status>
    675e:	0742      	lsls	r2, r0, #29
    6760:	d5fb      	bpl.n	675a <tx_generic+0x6a>
	TXLED_SET;
    6762:	f44f 7280 	mov.w	r2, #256	; 0x100
    6766:	4b1b      	ldr	r3, [pc, #108]	; (67d4 <tx_generic+0xe4>)
    6768:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
		PAEN_SET;
    676a:	2280      	movs	r2, #128	; 0x80
    676c:	621a      	str	r2, [r3, #32]
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    676e:	200e      	movs	r0, #14
    6770:	f003 fa04 	bl	9b7c <cc2400_get>
    6774:	f000 001f 	and.w	r0, r0, #31
    6778:	280f      	cmp	r0, #15
    677a:	d1f8      	bne.n	676e <tx_generic+0x7e>

	cc2400_fifo_write(tx_pkt.length, tx_pkt.data);
    677c:	79a0      	ldrb	r0, [r4, #6]
    677e:	4916      	ldr	r1, [pc, #88]	; (67d8 <tx_generic+0xe8>)
    6780:	f003 fa18 	bl	9bb4 <cc2400_fifo_write>
	cc2400_strobe(STX);
    6784:	2063      	movs	r0, #99	; 0x63
    6786:	f003 faa2 	bl	9cce <cc2400_strobe>

	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    678a:	200e      	movs	r0, #14
    678c:	f003 f9f6 	bl	9b7c <cc2400_get>
    6790:	f000 001f 	and.w	r0, r0, #31
    6794:	280f      	cmp	r0, #15
    6796:	d1f8      	bne.n	678a <tx_generic+0x9a>
	TXLED_CLR;
    6798:	f44f 7280 	mov.w	r2, #256	; 0x100
    679c:	4b0f      	ldr	r3, [pc, #60]	; (67dc <tx_generic+0xec>)

	cc2400_strobe(SRFOFF);
    679e:	2064      	movs	r0, #100	; 0x64
	TXLED_CLR;
    67a0:	601a      	str	r2, [r3, #0]
	cc2400_strobe(SRFOFF);
    67a2:	f003 fa94 	bl	9cce <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    67a6:	f003 fa8b 	bl	9cc0 <cc2400_status>
    67aa:	0743      	lsls	r3, r0, #29
    67ac:	d4fb      	bmi.n	67a6 <tx_generic+0xb6>

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    67ae:	2280      	movs	r2, #128	; 0x80
    67b0:	4b0b      	ldr	r3, [pc, #44]	; (67e0 <tx_generic+0xf0>)
#endif

	// Restore state
	cc2400_set(SYNCH, synch);
    67b2:	4641      	mov	r1, r8
    67b4:	202d      	movs	r0, #45	; 0x2d
	PAEN_CLR;
    67b6:	601a      	str	r2, [r3, #0]
	cc2400_set(SYNCH, synch);
    67b8:	f003 f9e9 	bl	9b8e <cc2400_set>
	cc2400_set(SYNCL, syncl);
    67bc:	4639      	mov	r1, r7
    67be:	202c      	movs	r0, #44	; 0x2c
    67c0:	f003 f9e5 	bl	9b8e <cc2400_set>
	requested_mode = prev_mode;
    67c4:	74ae      	strb	r6, [r5, #18]
}
    67c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    67ca:	bf00      	nop
    67cc:	10000b3c 	.word	0x10000b3c
    67d0:	10001370 	.word	0x10001370
    67d4:	2009c038 	.word	0x2009c038
    67d8:	10001378 	.word	0x10001378
    67dc:	2009c03c 	.word	0x2009c03c
    67e0:	2009c05c 	.word	0x2009c05c

000067e4 <specan>:
#endif

/* spectrum analysis */
void specan()
{
    67e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    67e8:	b08e      	sub	sp, #56	; 0x38
	u16 f;
	u8 i = 0;
	u8 buf[DMA_SIZE];

	RXLED_SET;
    67ea:	2210      	movs	r2, #16
    67ec:	4b3c      	ldr	r3, [pc, #240]	; (68e0 <specan+0xfc>)
    67ee:	601a      	str	r2, [r3, #0]

	usb_queue_init();
    67f0:	f000 fc68 	bl	70c4 <usb_queue_init>
	clkn_start();
    67f4:	f000 fdf0 	bl	73d8 <clkn_start>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    67f8:	2280      	movs	r2, #128	; 0x80
    67fa:	4b3a      	ldr	r3, [pc, #232]	; (68e4 <specan+0x100>)
	//HGM_SET;
#endif
	cc2400_set(LMTST,   0x2b22);
    67fc:	f642 3122 	movw	r1, #11042	; 0x2b22
	PAEN_SET;
    6800:	601a      	str	r2, [r3, #0]
	cc2400_set(LMTST,   0x2b22);
    6802:	2012      	movs	r0, #18
    6804:	f003 f9c3 	bl	9b8e <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    6808:	f241 314b 	movw	r1, #4939	; 0x134b
    680c:	2014      	movs	r0, #20
    680e:	f003 f9be 	bl	9b8e <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    6812:	f240 1101 	movw	r1, #257	; 0x101
    6816:	2020      	movs	r0, #32
    6818:	f003 f9b9 	bl	9b8e <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    681c:	2129      	movs	r1, #41	; 0x29
    681e:	2003      	movs	r0, #3
    6820:	f003 f9b5 	bl	9b8e <cc2400_set>
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
    6824:	f003 fa4c 	bl	9cc0 <cc2400_status>
    6828:	0641      	lsls	r1, r0, #25
    682a:	d5fb      	bpl.n	6824 <specan+0x40>
	while ((cc2400_status() & FS_LOCK));
    682c:	f003 fa48 	bl	9cc0 <cc2400_status>
    6830:	f010 0404 	ands.w	r4, r0, #4
    6834:	d1fa      	bne.n	682c <specan+0x48>

	while (requested_mode == MODE_SPECAN) {
    6836:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 68ec <specan+0x108>
		for (f = low_freq; f < high_freq + 1; f++) {
    683a:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 68f0 <specan+0x10c>
	while (requested_mode == MODE_SPECAN) {
    683e:	f899 3012 	ldrb.w	r3, [r9, #18]
    6842:	2b04      	cmp	r3, #4
    6844:	d005      	beq.n	6852 <specan+0x6e>

			cc2400_strobe(SRFOFF);
			while ((cc2400_status() & FS_LOCK));
		}
	}
	RXLED_CLR;
    6846:	2210      	movs	r2, #16
    6848:	4b27      	ldr	r3, [pc, #156]	; (68e8 <specan+0x104>)
    684a:	601a      	str	r2, [r3, #0]
}
    684c:	b00e      	add	sp, #56	; 0x38
    684e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (f = low_freq; f < high_freq + 1; f++) {
    6852:	f8b8 7052 	ldrh.w	r7, [r8, #82]	; 0x52
				handle_usb(clkn);
    6856:	f8df a09c 	ldr.w	sl, [pc, #156]	; 68f4 <specan+0x110>
		for (f = low_freq; f < high_freq + 1; f++) {
    685a:	b2bf      	uxth	r7, r7
    685c:	f8b8 3054 	ldrh.w	r3, [r8, #84]	; 0x54
    6860:	b29b      	uxth	r3, r3
    6862:	42bb      	cmp	r3, r7
    6864:	d3eb      	bcc.n	683e <specan+0x5a>
			cc2400_set(FSDIV, f - 1);
    6866:	1e79      	subs	r1, r7, #1
    6868:	2002      	movs	r0, #2
    686a:	b289      	uxth	r1, r1
    686c:	f003 f98f 	bl	9b8e <cc2400_set>
			cc2400_strobe(SFSON);
    6870:	2061      	movs	r0, #97	; 0x61
    6872:	f003 fa2c 	bl	9cce <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    6876:	f003 fa23 	bl	9cc0 <cc2400_status>
    687a:	0742      	lsls	r2, r0, #29
    687c:	d5fb      	bpl.n	6876 <specan+0x92>
			cc2400_strobe(SRX);
    687e:	2062      	movs	r0, #98	; 0x62
    6880:	f003 fa25 	bl	9cce <cc2400_strobe>
			volatile u32 j = 500; while (--j); //FIXME crude delay
    6884:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    6888:	9300      	str	r3, [sp, #0]
    688a:	9d00      	ldr	r5, [sp, #0]
    688c:	3d01      	subs	r5, #1
    688e:	9500      	str	r5, [sp, #0]
    6890:	2d00      	cmp	r5, #0
    6892:	d1fa      	bne.n	688a <specan+0xa6>
			buf[3 * i] = (f >> 8) & 0xFF;
    6894:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    6898:	ab0e      	add	r3, sp, #56	; 0x38
    689a:	441e      	add	r6, r3
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
    689c:	2006      	movs	r0, #6
			buf[3 * i] = (f >> 8) & 0xFF;
    689e:	0a3b      	lsrs	r3, r7, #8
    68a0:	f806 3c34 	strb.w	r3, [r6, #-52]
			buf[(3 * i) + 1] = f  & 0xFF;
    68a4:	f806 7c33 	strb.w	r7, [r6, #-51]
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
    68a8:	f003 f968 	bl	9b7c <cc2400_get>
			i++;
    68ac:	3401      	adds	r4, #1
    68ae:	b2e4      	uxtb	r4, r4
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
    68b0:	0a00      	lsrs	r0, r0, #8
			if (i == 16) {
    68b2:	2c10      	cmp	r4, #16
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
    68b4:	f806 0c32 	strb.w	r0, [r6, #-50]
			if (i == 16) {
    68b8:	d108      	bne.n	68cc <specan+0xe8>
				enqueue(SPECAN, buf);
    68ba:	a901      	add	r1, sp, #4
    68bc:	2004      	movs	r0, #4
    68be:	f7fd fde5 	bl	448c <enqueue>
				handle_usb(clkn);
    68c2:	f8da 0000 	ldr.w	r0, [sl]
    68c6:	f000 fc61 	bl	718c <handle_usb>
				i = 0;
    68ca:	462c      	mov	r4, r5
			cc2400_strobe(SRFOFF);
    68cc:	2064      	movs	r0, #100	; 0x64
    68ce:	f003 f9fe 	bl	9cce <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK));
    68d2:	f003 f9f5 	bl	9cc0 <cc2400_status>
    68d6:	0743      	lsls	r3, r0, #29
    68d8:	d4fb      	bmi.n	68d2 <specan+0xee>
		for (f = low_freq; f < high_freq + 1; f++) {
    68da:	3701      	adds	r7, #1
    68dc:	b2bf      	uxth	r7, r7
    68de:	e7bd      	b.n	685c <specan+0x78>
    68e0:	2009c038 	.word	0x2009c038
    68e4:	2009c058 	.word	0x2009c058
    68e8:	2009c03c 	.word	0x2009c03c
    68ec:	10000b3c 	.word	0x10000b3c
    68f0:	10000450 	.word	0x10000450
    68f4:	1000136c 	.word	0x1000136c

000068f8 <led_specan>:

/* LED based spectrum analysis */
void led_specan()
{
    68f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    68fa:	b085      	sub	sp, #20
	int8_t lvl;
	u8 i = 0;
	u16 channels[3] = {2412, 2437, 2462};
    68fc:	4b42      	ldr	r3, [pc, #264]	; (6a08 <led_specan+0x110>)
	//void (*set[3]) = {TXLED_SET, RXLED_SET, USRLED_SET};
	//void (*clr[3]) = {TXLED_CLR, RXLED_CLR, USRLED_CLR};

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    68fe:	2280      	movs	r2, #128	; 0x80
	u16 channels[3] = {2412, 2437, 2462};
    6900:	9302      	str	r3, [sp, #8]
    6902:	f640 139e 	movw	r3, #2462	; 0x99e
    6906:	f8ad 300c 	strh.w	r3, [sp, #12]
	PAEN_SET;
    690a:	4b40      	ldr	r3, [pc, #256]	; (6a0c <led_specan+0x114>)
	//HGM_SET;
#endif
	cc2400_set(LMTST,   0x2b22);
    690c:	f642 3122 	movw	r1, #11042	; 0x2b22
	PAEN_SET;
    6910:	601a      	str	r2, [r3, #0]
	cc2400_set(LMTST,   0x2b22);
    6912:	2012      	movs	r0, #18
    6914:	f003 f93b 	bl	9b8e <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    6918:	f241 314b 	movw	r1, #4939	; 0x134b
    691c:	2014      	movs	r0, #20
    691e:	f003 f936 	bl	9b8e <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    6922:	f240 1101 	movw	r1, #257	; 0x101
    6926:	2020      	movs	r0, #32
    6928:	f003 f931 	bl	9b8e <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    692c:	2129      	movs	r1, #41	; 0x29
    692e:	2003      	movs	r0, #3
    6930:	f003 f92d 	bl	9b8e <cc2400_set>
	cc2400_set(RSSI,    0x00F1); // RSSI Sample over 2 symbols
    6934:	21f1      	movs	r1, #241	; 0xf1
    6936:	2006      	movs	r0, #6
    6938:	f003 f929 	bl	9b8e <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    693c:	f003 f9c0 	bl	9cc0 <cc2400_status>
    6940:	0641      	lsls	r1, r0, #25
    6942:	d5fb      	bpl.n	693c <led_specan+0x44>
	while ((cc2400_status() & FS_LOCK));
    6944:	f003 f9bc 	bl	9cc0 <cc2400_status>
    6948:	f010 0404 	ands.w	r4, r0, #4
    694c:	d1fa      	bne.n	6944 <led_specan+0x4c>

	while (requested_mode == MODE_LED_SPECAN) {
    694e:	4f30      	ldr	r7, [pc, #192]	; (6a10 <led_specan+0x118>)
			switch (i) {
				case 0:
					TXLED_CLR;
					break;
				case 1:
					RXLED_CLR;
    6950:	4d30      	ldr	r5, [pc, #192]	; (6a14 <led_specan+0x11c>)
					RXLED_SET;
    6952:	4e31      	ldr	r6, [pc, #196]	; (6a18 <led_specan+0x120>)
	while (requested_mode == MODE_LED_SPECAN) {
    6954:	7cbb      	ldrb	r3, [r7, #18]
    6956:	2b07      	cmp	r3, #7
    6958:	d001      	beq.n	695e <led_specan+0x66>
		handle_usb(clkn);

		cc2400_strobe(SRFOFF);
		while ((cc2400_status() & FS_LOCK));
	}
}
    695a:	b005      	add	sp, #20
    695c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		cc2400_set(FSDIV, channels[i] - 1);
    695e:	ab04      	add	r3, sp, #16
    6960:	eb03 0344 	add.w	r3, r3, r4, lsl #1
    6964:	f833 1c08 	ldrh.w	r1, [r3, #-8]
    6968:	2002      	movs	r0, #2
    696a:	3901      	subs	r1, #1
    696c:	b289      	uxth	r1, r1
    696e:	f003 f90e 	bl	9b8e <cc2400_set>
		cc2400_strobe(SFSON);
    6972:	2061      	movs	r0, #97	; 0x61
    6974:	f003 f9ab 	bl	9cce <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    6978:	f003 f9a2 	bl	9cc0 <cc2400_status>
    697c:	0742      	lsls	r2, r0, #29
    697e:	d5fb      	bpl.n	6978 <led_specan+0x80>
		cc2400_strobe(SRX);
    6980:	2062      	movs	r0, #98	; 0x62
    6982:	f003 f9a4 	bl	9cce <cc2400_strobe>
		volatile u32 j = 500; while (--j); //FIXME crude delay
    6986:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    698a:	9301      	str	r3, [sp, #4]
    698c:	9b01      	ldr	r3, [sp, #4]
    698e:	3b01      	subs	r3, #1
    6990:	9301      	str	r3, [sp, #4]
    6992:	2b00      	cmp	r3, #0
    6994:	d1fa      	bne.n	698c <led_specan+0x94>
		lvl = (int8_t)((cc2400_get(RSSI) >> 8) & 0xff);
    6996:	2006      	movs	r0, #6
    6998:	f003 f8f0 	bl	9b7c <cc2400_get>
		if (lvl > rssi_threshold) {
    699c:	4b1f      	ldr	r3, [pc, #124]	; (6a1c <led_specan+0x124>)
    699e:	f340 2007 	sbfx	r0, r0, #8, #8
    69a2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
    69a6:	b25b      	sxtb	r3, r3
    69a8:	4298      	cmp	r0, r3
    69aa:	dd1f      	ble.n	69ec <led_specan+0xf4>
			switch (i) {
    69ac:	2c01      	cmp	r4, #1
    69ae:	d019      	beq.n	69e4 <led_specan+0xec>
    69b0:	2c02      	cmp	r4, #2
    69b2:	d019      	beq.n	69e8 <led_specan+0xf0>
    69b4:	b914      	cbnz	r4, 69bc <led_specan+0xc4>
					TXLED_SET;
    69b6:	f44f 7380 	mov.w	r3, #256	; 0x100
					RXLED_SET;
    69ba:	6033      	str	r3, [r6, #0]
		i = (i+1) % 3;
    69bc:	2303      	movs	r3, #3
    69be:	3401      	adds	r4, #1
    69c0:	fbb4 f3f3 	udiv	r3, r4, r3
    69c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    69c8:	1ae4      	subs	r4, r4, r3
		handle_usb(clkn);
    69ca:	4b15      	ldr	r3, [pc, #84]	; (6a20 <led_specan+0x128>)
		i = (i+1) % 3;
    69cc:	b2e4      	uxtb	r4, r4
		handle_usb(clkn);
    69ce:	6818      	ldr	r0, [r3, #0]
    69d0:	f000 fbdc 	bl	718c <handle_usb>
		cc2400_strobe(SRFOFF);
    69d4:	2064      	movs	r0, #100	; 0x64
    69d6:	f003 f97a 	bl	9cce <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    69da:	f003 f971 	bl	9cc0 <cc2400_status>
    69de:	0743      	lsls	r3, r0, #29
    69e0:	d4fb      	bmi.n	69da <led_specan+0xe2>
    69e2:	e7b7      	b.n	6954 <led_specan+0x5c>
					RXLED_SET;
    69e4:	2310      	movs	r3, #16
    69e6:	e7e8      	b.n	69ba <led_specan+0xc2>
					USRLED_SET;
    69e8:	6034      	str	r4, [r6, #0]
					break;
    69ea:	e7e7      	b.n	69bc <led_specan+0xc4>
			switch (i) {
    69ec:	2c01      	cmp	r4, #1
    69ee:	d007      	beq.n	6a00 <led_specan+0x108>
    69f0:	2c02      	cmp	r4, #2
    69f2:	d007      	beq.n	6a04 <led_specan+0x10c>
    69f4:	2c00      	cmp	r4, #0
    69f6:	d1e1      	bne.n	69bc <led_specan+0xc4>
					TXLED_CLR;
    69f8:	f44f 7380 	mov.w	r3, #256	; 0x100
					RXLED_CLR;
    69fc:	602b      	str	r3, [r5, #0]
					break;
    69fe:	e7dd      	b.n	69bc <led_specan+0xc4>
					RXLED_CLR;
    6a00:	2310      	movs	r3, #16
    6a02:	e7fb      	b.n	69fc <led_specan+0x104>
					USRLED_CLR;
    6a04:	602c      	str	r4, [r5, #0]
					break;
    6a06:	e7d9      	b.n	69bc <led_specan+0xc4>
    6a08:	0985096c 	.word	0x0985096c
    6a0c:	2009c058 	.word	0x2009c058
    6a10:	10000b3c 	.word	0x10000b3c
    6a14:	2009c03c 	.word	0x2009c03c
    6a18:	2009c038 	.word	0x2009c038
    6a1c:	10000450 	.word	0x10000450
    6a20:	1000136c 	.word	0x1000136c

00006a24 <main>:

int main()
{
    6a24:	b508      	push	{r3, lr}
	// enable all fault handlers (see fault.c)
	SCB_SHCSR = (1 << 18) | (1 << 17) | (1 << 16);
    6a26:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
    6a2a:	4b3e      	ldr	r3, [pc, #248]	; (6b24 <main+0x100>)
	debug_uart_init(0);
	debug_printf("\n\n****UBERTOOTH BOOT****\n%s\n", compile_info);

	while (1) {
		handle_usb(clkn);
		if(requested_mode != mode) {
    6a2c:	4d3e      	ldr	r5, [pc, #248]	; (6b28 <main+0x104>)
	SCB_SHCSR = (1 << 18) | (1 << 17) | (1 << 16);
    6a2e:	601a      	str	r2, [r3, #0]
	ubertooth_init();
    6a30:	f003 fa0c 	bl	9e4c <ubertooth_init>
	clkn_init();
    6a34:	f000 fcd6 	bl	73e4 <clkn_init>
	ubertooth_usb_init(vendor_request_handler);
    6a38:	483c      	ldr	r0, [pc, #240]	; (6b2c <main+0x108>)
    6a3a:	f000 fb1d 	bl	7078 <ubertooth_usb_init>
	cc2400_idle();
    6a3e:	f7fd fd71 	bl	4524 <cc2400_idle>
	dma_poweron();
    6a42:	f000 fced 	bl	7420 <dma_poweron>
	debug_uart_init(0);
    6a46:	2000      	movs	r0, #0
    6a48:	f002 fa8e 	bl	8f68 <debug_uart_init>
	debug_printf("\n\n****UBERTOOTH BOOT****\n%s\n", compile_info);
    6a4c:	4938      	ldr	r1, [pc, #224]	; (6b30 <main+0x10c>)
    6a4e:	4839      	ldr	r0, [pc, #228]	; (6b34 <main+0x110>)
    6a50:	f002 fafa 	bl	9048 <debug_printf>
    6a54:	462c      	mov	r4, r5
		handle_usb(clkn);
    6a56:	4e38      	ldr	r6, [pc, #224]	; (6b38 <main+0x114>)
    6a58:	6830      	ldr	r0, [r6, #0]
    6a5a:	f000 fb97 	bl	718c <handle_usb>
		if(requested_mode != mode) {
    6a5e:	7caa      	ldrb	r2, [r5, #18]
    6a60:	7c6b      	ldrb	r3, [r5, #17]
    6a62:	429a      	cmp	r2, r3
    6a64:	d0f8      	beq.n	6a58 <main+0x34>
			switch (requested_mode) {
    6a66:	7cab      	ldrb	r3, [r5, #18]
    6a68:	2b11      	cmp	r3, #17
    6a6a:	d8f5      	bhi.n	6a58 <main+0x34>
    6a6c:	e8df f003 	tbb	[pc, r3]
    6a70:	28161456 	.word	0x28161456
    6a74:	40372f3d 	.word	0x40372f3d
    6a78:	09221d1b 	.word	0x09221d1b
    6a7c:	490f4325 	.word	0x490f4325
    6a80:	514e      	.short	0x514e
				case MODE_RESET:
					/* Allow time for the USB command to return correctly */
					wait(1);
    6a82:	2001      	movs	r0, #1
    6a84:	f002 ffa8 	bl	99d8 <wait>
					reset();
    6a88:	f003 f9ea 	bl	9e60 <reset>
					break;
    6a8c:	e7e4      	b.n	6a58 <main+0x34>
				case MODE_AFH:
					mode = MODE_AFH;
    6a8e:	230e      	movs	r3, #14
					bt_stream_rx();
					break;
				case MODE_RX_SYMBOLS:
					mode = MODE_RX_SYMBOLS;
    6a90:	7463      	strb	r3, [r4, #17]
					bt_stream_rx();
    6a92:	f7fe fddf 	bl	5654 <bt_stream_rx>
					break;
    6a96:	e7df      	b.n	6a58 <main+0x34>
					mode = MODE_RX_SYMBOLS;
    6a98:	2301      	movs	r3, #1
    6a9a:	e7f9      	b.n	6a90 <main+0x6c>
#ifdef TX_ENABLE
				case MODE_TX_SYMBOLS:
					mode = MODE_TX_SYMBOLS;
    6a9c:	2302      	movs	r3, #2
    6a9e:	7463      	strb	r3, [r4, #17]
					br_transmit();
    6aa0:	f7fe fe8e 	bl	57c0 <br_transmit>
					break;
    6aa4:	e7d8      	b.n	6a58 <main+0x34>
#endif
				case MODE_BT_FOLLOW:
					mode = MODE_BT_FOLLOW;
    6aa6:	2308      	movs	r3, #8
    6aa8:	e7f2      	b.n	6a90 <main+0x6c>
					bt_stream_rx();
					break;
				case MODE_BT_FOLLOW_LE:
					mode = MODE_BT_FOLLOW_LE;
    6aaa:	2309      	movs	r3, #9
    6aac:	7463      	strb	r3, [r4, #17]
	le_phy_main();
    6aae:	f001 fb39 	bl	8124 <le_phy_main>
}
    6ab2:	e7d1      	b.n	6a58 <main+0x34>
					bt_follow_le();
					break;
				case MODE_BT_PROMISC_LE:
					bt_promisc_le();
    6ab4:	f7ff fd10 	bl	64d8 <bt_promisc_le>
					break;
    6ab8:	e7ce      	b.n	6a58 <main+0x34>
#ifdef TX_ENABLE
				case MODE_BT_SLAVE_LE:
					bt_slave_le();
    6aba:	f7ff fd45 	bl	6548 <bt_slave_le>
					break;
    6abe:	e7cb      	b.n	6a58 <main+0x34>
				case MODE_TX_TEST:
					mode = MODE_TX_TEST;
    6ac0:	2303      	movs	r3, #3
					cc2400_txtest(&modulation, &channel);
    6ac2:	4628      	mov	r0, r5
    6ac4:	491d      	ldr	r1, [pc, #116]	; (6b3c <main+0x118>)
					mode = MODE_TX_TEST;
    6ac6:	7463      	strb	r3, [r4, #17]
					cc2400_txtest(&modulation, &channel);
    6ac8:	f001 ff68 	bl	899c <cc2400_txtest>
					break;
    6acc:	e7c4      	b.n	6a58 <main+0x34>
				case MODE_RANGE_TEST:
					mode = MODE_RANGE_TEST;
    6ace:	2305      	movs	r3, #5
					cc2400_rangetest(&channel);
    6ad0:	481a      	ldr	r0, [pc, #104]	; (6b3c <main+0x118>)
					mode = MODE_RANGE_TEST;
    6ad2:	7463      	strb	r3, [r4, #17]
					cc2400_rangetest(&channel);
    6ad4:	f001 fd5a 	bl	858c <cc2400_rangetest>
					requested_mode = MODE_IDLE;
    6ad8:	2300      	movs	r3, #0
    6ada:	74a3      	strb	r3, [r4, #18]
					break;
    6adc:	e7bc      	b.n	6a58 <main+0x34>
				case MODE_REPEATER:
					mode = MODE_REPEATER;
    6ade:	2306      	movs	r3, #6
					cc2400_repeater(&channel);
    6ae0:	4816      	ldr	r0, [pc, #88]	; (6b3c <main+0x118>)
					mode = MODE_REPEATER;
    6ae2:	7463      	strb	r3, [r4, #17]
					cc2400_repeater(&channel);
    6ae4:	f001 fe94 	bl	8810 <cc2400_repeater>
					break;
    6ae8:	e7b6      	b.n	6a58 <main+0x34>
#endif
				case MODE_SPECAN:
					specan();
    6aea:	f7ff fe7b 	bl	67e4 <specan>
					break;
    6aee:	e7b3      	b.n	6a58 <main+0x34>
				case MODE_LED_SPECAN:
					led_specan();
    6af0:	f7ff ff02 	bl	68f8 <led_specan>
					break;
    6af4:	e7b0      	b.n	6a58 <main+0x34>
				case MODE_EGO:
					mode = MODE_EGO;
    6af6:	230d      	movs	r3, #13
    6af8:	7463      	strb	r3, [r4, #17]
					ego_main(ego_mode);
    6afa:	7d20      	ldrb	r0, [r4, #20]
    6afc:	f002 f9d4 	bl	8ea8 <ego_main>
					break;
    6b00:	e7aa      	b.n	6a58 <main+0x34>
				case MODE_RX_GENERIC:
					mode = MODE_RX_GENERIC;
    6b02:	230f      	movs	r3, #15
    6b04:	7463      	strb	r3, [r4, #17]
					rx_generic();
    6b06:	f7ff fde3 	bl	66d0 <rx_generic>
					break;
    6b0a:	e7a5      	b.n	6a58 <main+0x34>
#ifdef TX_ENABLE
				case MODE_TX_GENERIC:
					tx_generic();
    6b0c:	f7ff fdf0 	bl	66f0 <tx_generic>
					break;
    6b10:	e7a2      	b.n	6a58 <main+0x34>
#endif
				case MODE_XMAS:
					mode = MODE_XMAS;
    6b12:	2311      	movs	r3, #17
    6b14:	7463      	strb	r3, [r4, #17]
					xmas_main();
    6b16:	f002 fe2d 	bl	9774 <xmas_main>
					break;
    6b1a:	e79d      	b.n	6a58 <main+0x34>
				case MODE_IDLE:
					cc2400_idle();
    6b1c:	f7fd fd02 	bl	4524 <cc2400_idle>
					break;
    6b20:	e79a      	b.n	6a58 <main+0x34>
    6b22:	bf00      	nop
    6b24:	e000ed24 	.word	0xe000ed24
    6b28:	10000b3c 	.word	0x10000b3c
    6b2c:	00004849 	.word	0x00004849
    6b30:	0000ac63 	.word	0x0000ac63
    6b34:	0000ab9f 	.word	0x0000ab9f
    6b38:	1000136c 	.word	0x1000136c
    6b3c:	1000049c 	.word	0x1000049c

00006b40 <precalc>:
	return i;
}

/* do all of the one time precalculation */
void precalc(void)
{
    6b40:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8 i, j, chan;
	u32 address;
	address = target.address & 0xffffffff;
	syncword = 0;
    6b42:	2000      	movs	r0, #0
    6b44:	2100      	movs	r1, #0
    6b46:	4a47      	ldr	r2, [pc, #284]	; (6c64 <precalc+0x124>)

	/* populate frequency register bank*/
	for (i = 0; i < NUM_BREDR_CHANNELS; i++)
		bank[i] = ((i * 2) % NUM_BREDR_CHANNELS);
    6b48:	254f      	movs	r5, #79	; 0x4f
	syncword = 0;
    6b4a:	e9c2 0100 	strd	r0, r1, [r2]
    6b4e:	4946      	ldr	r1, [pc, #280]	; (6c68 <precalc+0x128>)
    6b50:	2200      	movs	r2, #0
    6b52:	4608      	mov	r0, r1
	address = target.address & 0xffffffff;
    6b54:	4b45      	ldr	r3, [pc, #276]	; (6c6c <precalc+0x12c>)
    6b56:	681b      	ldr	r3, [r3, #0]
		bank[i] = ((i * 2) % NUM_BREDR_CHANNELS);
    6b58:	fbb2 f4f5 	udiv	r4, r2, r5
    6b5c:	fb05 2414 	mls	r4, r5, r4, r2
    6b60:	3202      	adds	r2, #2
	for (i = 0; i < NUM_BREDR_CHANNELS; i++)
    6b62:	2a9e      	cmp	r2, #158	; 0x9e
		bank[i] = ((i * 2) % NUM_BREDR_CHANNELS);
    6b64:	f801 4b01 	strb.w	r4, [r1], #1
	for (i = 0; i < NUM_BREDR_CHANNELS; i++)
    6b68:	d1f6      	bne.n	6b58 <precalc+0x18>
		/* actual frequency is 2402 + bank[i] MHz */


	/* precalculate some of next_hop()'s variables */
	a1 = (address >> 23) & 0x1f;
    6b6a:	4a41      	ldr	r2, [pc, #260]	; (6c70 <precalc+0x130>)
    6b6c:	f3c3 51c4 	ubfx	r1, r3, #23, #5
    6b70:	7011      	strb	r1, [r2, #0]
	b = (address >> 19) & 0x0f;
    6b72:	4a40      	ldr	r2, [pc, #256]	; (6c74 <precalc+0x134>)
    6b74:	f3c3 41c3 	ubfx	r1, r3, #19, #4
    6b78:	7011      	strb	r1, [r2, #0]
	c1 = ((address >> 4) & 0x10) +
    6b7a:	f3c3 1507 	ubfx	r5, r3, #4, #8
		((address >> 3) & 0x08) +
    6b7e:	f3c3 01c7 	ubfx	r1, r3, #3, #8
		((address >> 2) & 0x04) +
    6b82:	f3c3 0787 	ubfx	r7, r3, #2, #8
		((address >> 1) & 0x02) +
    6b86:	f3c3 0647 	ubfx	r6, r3, #1, #8
		((address >> 3) & 0x08) +
    6b8a:	f001 0208 	and.w	r2, r1, #8
	c1 = ((address >> 4) & 0x10) +
    6b8e:	f005 0410 	and.w	r4, r5, #16
    6b92:	4314      	orrs	r4, r2
		((address >> 1) & 0x02) +
    6b94:	f006 0c02 	and.w	ip, r6, #2
		((address >> 2) & 0x04) +
    6b98:	f007 0204 	and.w	r2, r7, #4
		((address >> 1) & 0x02) +
    6b9c:	ea42 020c 	orr.w	r2, r2, ip
    6ba0:	4414      	add	r4, r2
		(address & 0x01);
    6ba2:	f003 0201 	and.w	r2, r3, #1
		((address >> 1) & 0x02) +
    6ba6:	4414      	add	r4, r2
	c1 = ((address >> 4) & 0x10) +
    6ba8:	4a33      	ldr	r2, [pc, #204]	; (6c78 <precalc+0x138>)
	d1 = (address >> 10) & 0x1ff;
	e = ((address >> 7) & 0x40) +
		((address >> 6) & 0x20) +
		((address >> 5) & 0x10) +
		((address >> 4) & 0x08) +
		((address >> 3) & 0x04) +
    6baa:	f001 0104 	and.w	r1, r1, #4
	c1 = ((address >> 4) & 0x10) +
    6bae:	7014      	strb	r4, [r2, #0]
	d1 = (address >> 10) & 0x1ff;
    6bb0:	4a32      	ldr	r2, [pc, #200]	; (6c7c <precalc+0x13c>)
    6bb2:	f3c3 2488 	ubfx	r4, r3, #10, #9
    6bb6:	8014      	strh	r4, [r2, #0]
		((address >> 2) & 0x02) +
    6bb8:	f007 0702 	and.w	r7, r7, #2
	e = ((address >> 7) & 0x40) +
    6bbc:	09da      	lsrs	r2, r3, #7
		((address >> 6) & 0x20) +
    6bbe:	099c      	lsrs	r4, r3, #6
	e = ((address >> 7) & 0x40) +
    6bc0:	f002 0240 	and.w	r2, r2, #64	; 0x40
		((address >> 6) & 0x20) +
    6bc4:	f004 0420 	and.w	r4, r4, #32
		((address >> 2) & 0x02) +
    6bc8:	4339      	orrs	r1, r7
		((address >> 1) & 0x01);
    6bca:	f006 0601 	and.w	r6, r6, #1
		((address >> 5) & 0x10) +
    6bce:	095b      	lsrs	r3, r3, #5
	e = ((address >> 7) & 0x40) +
    6bd0:	4322      	orrs	r2, r4
		((address >> 2) & 0x02) +
    6bd2:	4431      	add	r1, r6
		((address >> 5) & 0x10) +
    6bd4:	f003 0310 	and.w	r3, r3, #16
		((address >> 4) & 0x08) +
    6bd8:	f005 0508 	and.w	r5, r5, #8
		((address >> 2) & 0x02) +
    6bdc:	440a      	add	r2, r1
    6bde:	432b      	orrs	r3, r5
    6be0:	4413      	add	r3, r2
	e = ((address >> 7) & 0x40) +
    6be2:	4a27      	ldr	r2, [pc, #156]	; (6c80 <precalc+0x140>)
    6be4:	7013      	strb	r3, [r2, #0]

	if(afh_enabled) {
    6be6:	4b27      	ldr	r3, [pc, #156]	; (6c84 <precalc+0x144>)
    6be8:	781b      	ldrb	r3, [r3, #0]
    6bea:	b37b      	cbz	r3, 6c4c <precalc+0x10c>
		used_channels = 0;
		for(i = 0; i < 10; i++)
    6bec:	4f26      	ldr	r7, [pc, #152]	; (6c88 <precalc+0x148>)
	if(afh_enabled) {
    6bee:	210a      	movs	r1, #10
    6bf0:	2400      	movs	r4, #0
    6bf2:	463e      	mov	r6, r7
			used_channels += count_bits((uint64_t) afh_map[i]);
    6bf4:	2300      	movs	r3, #0
	for (i = 0; n != 0; i++)
    6bf6:	f04f 0c00 	mov.w	ip, #0
			used_channels += count_bits((uint64_t) afh_map[i]);
    6bfa:	f817 2b01 	ldrb.w	r2, [r7], #1
	for (i = 0; n != 0; i++)
    6bfe:	ea52 0e03 	orrs.w	lr, r2, r3
    6c02:	fa5f f58c 	uxtb.w	r5, ip
    6c06:	f10c 0c01 	add.w	ip, ip, #1
    6c0a:	d120      	bne.n	6c4e <precalc+0x10e>
	return i;
    6c0c:	3901      	subs	r1, #1
			used_channels += count_bits((uint64_t) afh_map[i]);
    6c0e:	442c      	add	r4, r5
		for(i = 0; i < 10; i++)
    6c10:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
			used_channels += count_bits((uint64_t) afh_map[i]);
    6c14:	b2e4      	uxtb	r4, r4
		for(i = 0; i < 10; i++)
    6c16:	d1ed      	bne.n	6bf4 <precalc+0xb4>
    6c18:	460a      	mov	r2, r1
		j = 0;
		for (i = 0; i < NUM_BREDR_CHANNELS; i++) {
			chan = (i * 2) % NUM_BREDR_CHANNELS;
    6c1a:	254f      	movs	r5, #79	; 0x4f
    6c1c:	4b1b      	ldr	r3, [pc, #108]	; (6c8c <precalc+0x14c>)
    6c1e:	701c      	strb	r4, [r3, #0]
    6c20:	fbb2 f3f5 	udiv	r3, r2, r5
    6c24:	fb05 2313 	mls	r3, r5, r3, r2
			if(afh_map[chan/8] & (0x1 << (chan % 8)))
    6c28:	f3c3 04c4 	ubfx	r4, r3, #3, #5
    6c2c:	5d34      	ldrb	r4, [r6, r4]
			chan = (i * 2) % NUM_BREDR_CHANNELS;
    6c2e:	b2df      	uxtb	r7, r3
			if(afh_map[chan/8] & (0x1 << (chan % 8)))
    6c30:	f003 0307 	and.w	r3, r3, #7
    6c34:	fa44 f303 	asr.w	r3, r4, r3
    6c38:	07db      	lsls	r3, r3, #31
				bank[j++] = chan;
    6c3a:	bf48      	it	mi
    6c3c:	1c4b      	addmi	r3, r1, #1
    6c3e:	f102 0202 	add.w	r2, r2, #2
    6c42:	bf44      	itt	mi
    6c44:	5447      	strbmi	r7, [r0, r1]
    6c46:	b2d9      	uxtbmi	r1, r3
		for (i = 0; i < NUM_BREDR_CHANNELS; i++) {
    6c48:	2a9e      	cmp	r2, #158	; 0x9e
    6c4a:	d1e9      	bne.n	6c20 <precalc+0xe0>
		}
	}
}
    6c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		n &= n - 1;
    6c4e:	f112 3eff 	adds.w	lr, r2, #4294967295	; 0xffffffff
    6c52:	f143 35ff 	adc.w	r5, r3, #4294967295	; 0xffffffff
    6c56:	ea02 0e0e 	and.w	lr, r2, lr
    6c5a:	401d      	ands	r5, r3
    6c5c:	4672      	mov	r2, lr
    6c5e:	462b      	mov	r3, r5
	for (i = 0; n != 0; i++)
    6c60:	e7cd      	b.n	6bfe <precalc+0xbe>
    6c62:	bf00      	nop
    6c64:	100014c0 	.word	0x100014c0
    6c68:	100018cd 	.word	0x100018cd
    6c6c:	10001868 	.word	0x10001868
    6c70:	100018cb 	.word	0x100018cb
    6c74:	10001878 	.word	0x10001878
    6c78:	100018cc 	.word	0x100018cc
    6c7c:	1000187a 	.word	0x1000187a
    6c80:	1000191c 	.word	0x1000191c
    6c84:	100017ef 	.word	0x100017ef
    6c88:	10001353 	.word	0x10001353
    6c8c:	10001351 	.word	0x10001351

00006c90 <next_hop>:

	return output;
}

u16 next_hop(u32 clock)
{
    6c90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6c94:	b087      	sub	sp, #28
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
	a = (a1 ^ (clock >> 21)) & 0x1f;
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
	d = (d1 ^ (clock >> 7)) & 0x1ff;
    6c96:	4b49      	ldr	r3, [pc, #292]	; (6dbc <next_hop+0x12c>)
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
    6c98:	4c49      	ldr	r4, [pc, #292]	; (6dc0 <next_hop+0x130>)
	d = (d1 ^ (clock >> 7)) & 0x1ff;
    6c9a:	881e      	ldrh	r6, [r3, #0]
	f = base_f % 79;
    6c9c:	234f      	movs	r3, #79	; 0x4f
	base_f = (clock >> 3) & 0x1fffff0;
    6c9e:	ea04 04d0 	and.w	r4, r4, r0, lsr #3
	f = base_f % 79;
    6ca2:	fbb4 f2f3 	udiv	r2, r4, r3
    6ca6:	fb03 4112 	mls	r1, r3, r2, r4
	c = (c1 ^ (clock >> 16)) & 0x1f;
    6caa:	4b46      	ldr	r3, [pc, #280]	; (6dc4 <next_hop+0x134>)
	y1 = (clock >> 1) & 0x01;
    6cac:	f3c0 0c40 	ubfx	ip, r0, #1, #1
	c = (c1 ^ (clock >> 16)) & 0x1f;
    6cb0:	781a      	ldrb	r2, [r3, #0]
	y2 = y1 << 5;
    6cb2:	ea4f 174c 	mov.w	r7, ip, lsl #5
	c = (c1 ^ (clock >> 16)) & 0x1f;
    6cb6:	ea82 4210 	eor.w	r2, r2, r0, lsr #16

	perm = perm5(
		((x + a) % 32) ^ b,
		(y1 * 0x1f) ^ c,
    6cba:	eba7 030c 	sub.w	r3, r7, ip
	c = (c1 ^ (clock >> 16)) & 0x1f;
    6cbe:	f002 021f 	and.w	r2, r2, #31
		(y1 * 0x1f) ^ c,
    6cc2:	405a      	eors	r2, r3
	a = (a1 ^ (clock >> 21)) & 0x1f;
    6cc4:	4b40      	ldr	r3, [pc, #256]	; (6dc8 <next_hop+0x138>)
	d = (d1 ^ (clock >> 7)) & 0x1ff;
    6cc6:	ea86 16d0 	eor.w	r6, r6, r0, lsr #7
	a = (a1 ^ (clock >> 21)) & 0x1f;
    6cca:	781b      	ldrb	r3, [r3, #0]
    6ccc:	f10d 0c08 	add.w	ip, sp, #8
    6cd0:	ea83 5350 	eor.w	r3, r3, r0, lsr #21
		((x + a) % 32) ^ b,
    6cd4:	eb03 0090 	add.w	r0, r3, r0, lsr #2
    6cd8:	4b3c      	ldr	r3, [pc, #240]	; (6dcc <next_hop+0x13c>)
	y2 = y1 << 5;
    6cda:	463d      	mov	r5, r7
		((x + a) % 32) ^ b,
    6cdc:	781b      	ldrb	r3, [r3, #0]
    6cde:	4667      	mov	r7, ip
    6ce0:	4058      	eors	r0, r3
	for (i = 0; i < 9; i++)
    6ce2:	2300      	movs	r3, #0
	d = (d1 ^ (clock >> 7)) & 0x1ff;
    6ce4:	f3c6 0608 	ubfx	r6, r6, #0, #9
	z &= 0x1f;
    6ce8:	f000 001f 	and.w	r0, r0, #31
		p[i] = (p_low >> i) & 0x01;
    6cec:	fa46 fe03 	asr.w	lr, r6, r3
	for (i = 0; i < 9; i++)
    6cf0:	3301      	adds	r3, #1
		p[i] = (p_low >> i) & 0x01;
    6cf2:	f00e 0e01 	and.w	lr, lr, #1
	for (i = 0; i < 9; i++)
    6cf6:	2b09      	cmp	r3, #9
		p[i] = (p_low >> i) & 0x01;
    6cf8:	f80c eb01 	strb.w	lr, [ip], #1
	for (i = 0; i < 9; i++)
    6cfc:	d1f6      	bne.n	6cec <next_hop+0x5c>
	for (i = 0; i < 5; i++)
    6cfe:	2300      	movs	r3, #0
    6d00:	f10d 0c11 	add.w	ip, sp, #17
		p[i+9] = (p_high >> i) & 0x01;
    6d04:	fa42 f603 	asr.w	r6, r2, r3
	for (i = 0; i < 5; i++)
    6d08:	3301      	adds	r3, #1
		p[i+9] = (p_high >> i) & 0x01;
    6d0a:	f006 0601 	and.w	r6, r6, #1
	for (i = 0; i < 5; i++)
    6d0e:	2b05      	cmp	r3, #5
		p[i+9] = (p_high >> i) & 0x01;
    6d10:	f80c 6b01 	strb.w	r6, [ip], #1
	for (i = 0; i < 5; i++)
    6d14:	d1f6      	bne.n	6d04 <next_hop+0x74>
    6d16:	466e      	mov	r6, sp
	for (i = 0; i < 5; i++)
    6d18:	2300      	movs	r3, #0
	for (i = 0; i < 5; i++)
    6d1a:	46b4      	mov	ip, r6
		z_bit[i] = (z >> i) & 0x01;
    6d1c:	fa40 f203 	asr.w	r2, r0, r3
	for (i = 0; i < 5; i++)
    6d20:	3301      	adds	r3, #1
		z_bit[i] = (z >> i) & 0x01;
    6d22:	f002 0201 	and.w	r2, r2, #1
	for (i = 0; i < 5; i++)
    6d26:	2b05      	cmp	r3, #5
		z_bit[i] = (z >> i) & 0x01;
    6d28:	f80c 2b01 	strb.w	r2, [ip], #1
	for (i = 0; i < 5; i++)
    6d2c:	d1f6      	bne.n	6d1c <next_hop+0x8c>
	for (i = 13; i >= 0; i--) {
    6d2e:	220d      	movs	r2, #13
			tmp = z_bit[index1[i]];
    6d30:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 6de4 <next_hop+0x154>
			z_bit[index1[i]] = z_bit[index2[i]];
    6d34:	f10c 0e0e 	add.w	lr, ip, #14
		if (p[i]) {
    6d38:	5cbb      	ldrb	r3, [r7, r2]
    6d3a:	b183      	cbz	r3, 6d5e <next_hop+0xce>
			tmp = z_bit[index1[i]];
    6d3c:	f812 000c 	ldrb.w	r0, [r2, ip]
    6d40:	ab06      	add	r3, sp, #24
    6d42:	4418      	add	r0, r3
			z_bit[index1[i]] = z_bit[index2[i]];
    6d44:	f812 300e 	ldrb.w	r3, [r2, lr]
    6d48:	f10d 0918 	add.w	r9, sp, #24
    6d4c:	444b      	add	r3, r9
			tmp = z_bit[index1[i]];
    6d4e:	f810 8c18 	ldrb.w	r8, [r0, #-24]
			z_bit[index1[i]] = z_bit[index2[i]];
    6d52:	f813 9c18 	ldrb.w	r9, [r3, #-24]
    6d56:	f800 9c18 	strb.w	r9, [r0, #-24]
			z_bit[index2[i]] = tmp;
    6d5a:	f803 8c18 	strb.w	r8, [r3, #-24]
	for (i = 13; i >= 0; i--) {
    6d5e:	3a01      	subs	r2, #1
    6d60:	d2ea      	bcs.n	6d38 <next_hop+0xa8>
	output = 0;
    6d62:	2200      	movs	r2, #0
	for (i = 0; i < 5; i++)
    6d64:	4610      	mov	r0, r2
		output += z_bit[i] << i;
    6d66:	f816 3b01 	ldrb.w	r3, [r6], #1
    6d6a:	4083      	lsls	r3, r0
	for (i = 0; i < 5; i++)
    6d6c:	3001      	adds	r0, #1
		output += z_bit[i] << i;
    6d6e:	441a      	add	r2, r3
	for (i = 0; i < 5; i++)
    6d70:	2805      	cmp	r0, #5
		output += z_bit[i] << i;
    6d72:	b2d2      	uxtb	r2, r2
	for (i = 0; i < 5; i++)
    6d74:	d1f7      	bne.n	6d66 <next_hop+0xd6>
		d);
	/* hop selection */
	next_channel = bank[(perm + e + f + y2) % NUM_BREDR_CHANNELS];
    6d76:	4b16      	ldr	r3, [pc, #88]	; (6dd0 <next_hop+0x140>)
    6d78:	781b      	ldrb	r3, [r3, #0]
    6d7a:	189e      	adds	r6, r3, r2
    6d7c:	186a      	adds	r2, r5, r1
    6d7e:	214f      	movs	r1, #79	; 0x4f
    6d80:	4432      	add	r2, r6
    6d82:	fbb2 f3f1 	udiv	r3, r2, r1
    6d86:	fb01 2213 	mls	r2, r1, r3, r2
    6d8a:	4b12      	ldr	r3, [pc, #72]	; (6dd4 <next_hop+0x144>)
    6d8c:	5c98      	ldrb	r0, [r3, r2]
	if(afh_enabled) {
    6d8e:	4b12      	ldr	r3, [pc, #72]	; (6dd8 <next_hop+0x148>)
    6d90:	781b      	ldrb	r3, [r3, #0]
    6d92:	b16b      	cbz	r3, 6db0 <next_hop+0x120>
		f_dash = base_f % used_channels;
    6d94:	4b11      	ldr	r3, [pc, #68]	; (6ddc <next_hop+0x14c>)
    6d96:	7819      	ldrb	r1, [r3, #0]
    6d98:	fbb4 f3f1 	udiv	r3, r4, r1
    6d9c:	fb01 4313 	mls	r3, r1, r3, r4
		next_channel = afh_bank[(perm + e + f_dash + y2) % used_channels];
    6da0:	442b      	add	r3, r5
    6da2:	4433      	add	r3, r6
    6da4:	fbb3 f2f1 	udiv	r2, r3, r1
    6da8:	fb01 3312 	mls	r3, r1, r2, r3
    6dac:	4a0c      	ldr	r2, [pc, #48]	; (6de0 <next_hop+0x150>)
    6dae:	5cd0      	ldrb	r0, [r2, r3]
	}
	return (2402 + next_channel);

}
    6db0:	f600 1062 	addw	r0, r0, #2402	; 0x962
    6db4:	b007      	add	sp, #28
    6db6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6dba:	bf00      	nop
    6dbc:	1000187a 	.word	0x1000187a
    6dc0:	01fffff0 	.word	0x01fffff0
    6dc4:	100018cc 	.word	0x100018cc
    6dc8:	100018cb 	.word	0x100018cb
    6dcc:	10001878 	.word	0x10001878
    6dd0:	1000191c 	.word	0x1000191c
    6dd4:	100018cd 	.word	0x100018cd
    6dd8:	100017ef 	.word	0x100017ef
    6ddc:	10001351 	.word	0x10001351
    6de0:	1000187c 	.word	0x1000187c
    6de4:	0000b4a4 	.word	0x0000b4a4

00006de8 <btle_channel_index>:

// calculate channel index from physical channel
// channel is in range [2402, 2480]
uint8_t btle_channel_index(uint16_t channel) {
	uint8_t idx;
	channel = (channel - 2402) / 2;
    6de8:	f6a0 1362 	subw	r3, r0, #2402	; 0x962
    6dec:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    6df0:	1058      	asrs	r0, r3, #1
    6df2:	f3c3 034f 	ubfx	r3, r3, #1, #16
	if (channel == 0)
    6df6:	b153      	cbz	r3, 6e0e <btle_channel_index+0x26>
		idx = 37;
	else if (channel < 12)
    6df8:	2b0b      	cmp	r3, #11
    6dfa:	d802      	bhi.n	6e02 <btle_channel_index+0x1a>
		idx = channel - 1;
    6dfc:	3801      	subs	r0, #1
	else if (channel == 12)
		idx = 38;
	else if (channel < 39)
		idx = channel - 2;
    6dfe:	b2c0      	uxtb	r0, r0
    6e00:	4770      	bx	lr
	else if (channel == 12)
    6e02:	2b0c      	cmp	r3, #12
    6e04:	d005      	beq.n	6e12 <btle_channel_index+0x2a>
	else if (channel < 39)
    6e06:	2b26      	cmp	r3, #38	; 0x26
    6e08:	d805      	bhi.n	6e16 <btle_channel_index+0x2e>
		idx = channel - 2;
    6e0a:	3802      	subs	r0, #2
    6e0c:	e7f7      	b.n	6dfe <btle_channel_index+0x16>
		idx = 37;
    6e0e:	2025      	movs	r0, #37	; 0x25
    6e10:	4770      	bx	lr
		idx = 38;
    6e12:	2026      	movs	r0, #38	; 0x26
    6e14:	4770      	bx	lr
	else
		idx = 39;
    6e16:	2027      	movs	r0, #39	; 0x27
	return idx;
}
    6e18:	4770      	bx	lr

00006e1a <btle_channel_index_to_phys>:

u16 btle_channel_index_to_phys(u8 idx) {
	u16 phys;
	if (idx < 11)
    6e1a:	280a      	cmp	r0, #10
    6e1c:	d803      	bhi.n	6e26 <btle_channel_index_to_phys+0xc>
		phys = 2404 + 2 * idx;
    6e1e:	f200 40b2 	addw	r0, r0, #1202	; 0x4b2
	else if (idx < 37)
		phys = 2428 + 2 * (idx - 11);
    6e22:	0040      	lsls	r0, r0, #1
    6e24:	4770      	bx	lr
	else if (idx < 37)
    6e26:	2824      	cmp	r0, #36	; 0x24
    6e28:	d802      	bhi.n	6e30 <btle_channel_index_to_phys+0x16>
		phys = 2428 + 2 * (idx - 11);
    6e2a:	f200 40b3 	addw	r0, r0, #1203	; 0x4b3
    6e2e:	e7f8      	b.n	6e22 <btle_channel_index_to_phys+0x8>
	else if (idx == 37)
    6e30:	2825      	cmp	r0, #37	; 0x25
    6e32:	d006      	beq.n	6e42 <btle_channel_index_to_phys+0x28>
		phys = 2402;
	else if (idx == 38)
    6e34:	2826      	cmp	r0, #38	; 0x26
		phys = 2426;
	else
		phys = 2480;
    6e36:	f640 107a 	movw	r0, #2426	; 0x97a
    6e3a:	bf18      	it	ne
    6e3c:	f44f 601b 	movne.w	r0, #2480	; 0x9b0
    6e40:	4770      	bx	lr
		phys = 2402;
    6e42:	f640 1062 	movw	r0, #2402	; 0x962
	return phys;
}
    6e46:	4770      	bx	lr

00006e48 <btle_next_hop>:
{
    6e48:	b510      	push	{r4, lr}
	u16 phys = btle_channel_index_to_phys(le->channel_idx);
    6e4a:	7d41      	ldrb	r1, [r0, #21]
{
    6e4c:	4603      	mov	r3, r0
	u16 phys = btle_channel_index_to_phys(le->channel_idx);
    6e4e:	4608      	mov	r0, r1
    6e50:	f7ff ffe3 	bl	6e1a <btle_channel_index_to_phys>
	le->channel_idx = (le->channel_idx + le->channel_increment) % 37;
    6e54:	2425      	movs	r4, #37	; 0x25
    6e56:	7d9a      	ldrb	r2, [r3, #22]
    6e58:	440a      	add	r2, r1
    6e5a:	fbb2 f1f4 	udiv	r1, r2, r4
    6e5e:	fb04 2211 	mls	r2, r4, r1, r2
    6e62:	755a      	strb	r2, [r3, #21]
}
    6e64:	bd10      	pop	{r4, pc}
    6e66:	0000      	movs	r0, r0

00006e68 <btle_calc_crc>:
//			0x6ff46e
//
//		bytes in packet will be:
//		  { 0x6e, 0xf4, 0x6f }
//
u32 btle_calc_crc(u32 crc_init, u8 *data, int len) {
    6e68:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32 state = crc_init & 0xffffff;
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
	int i, j;

	for (i = 0; i < len; ++i) {
    6e6a:	2300      	movs	r3, #0
			int next_bit = (state ^ cur) & 1;
			cur >>= 1;
			state >>= 1;
			if (next_bit) {
				state |= 1 << 23;
				state ^= lfsr_mask;
    6e6c:	4f0a      	ldr	r7, [pc, #40]	; (6e98 <btle_calc_crc+0x30>)
	u32 state = crc_init & 0xffffff;
    6e6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	for (i = 0; i < len; ++i) {
    6e72:	4293      	cmp	r3, r2
    6e74:	db00      	blt.n	6e78 <btle_calc_crc+0x10>
			}
		}
	}

	return state;
}
    6e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
		u8 cur = data[i];
    6e78:	2408      	movs	r4, #8
    6e7a:	5ccd      	ldrb	r5, [r1, r3]
			int next_bit = (state ^ cur) & 1;
    6e7c:	ea85 0600 	eor.w	r6, r5, r0
			if (next_bit) {
    6e80:	f016 0f01 	tst.w	r6, #1
    6e84:	ea4f 0050 	mov.w	r0, r0, lsr #1
				state ^= lfsr_mask;
    6e88:	bf18      	it	ne
    6e8a:	4078      	eorne	r0, r7
		for (j = 0; j < 8; ++j) {
    6e8c:	3c01      	subs	r4, #1
			if (next_bit) {
    6e8e:	ea4f 0555 	mov.w	r5, r5, lsr #1
		for (j = 0; j < 8; ++j) {
    6e92:	d1f3      	bne.n	6e7c <btle_calc_crc+0x14>
	for (i = 0; i < len; ++i) {
    6e94:	3301      	adds	r3, #1
    6e96:	e7ec      	b.n	6e72 <btle_calc_crc+0xa>
    6e98:	00da6000 	.word	0x00da6000

00006e9c <btle_reverse_crc>:
// runs the CRC in reverse to generate a CRCInit
//
//	crc should be big endian
//	the return will be big endian
//
u32 btle_reverse_crc(u32 crc, u8 *data, int len) {
    6e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e9e:	4603      	mov	r3, r0
		for (j = 0; j < 8; ++j) {
			int top_bit = state >> 23;
			state = (state << 1) & 0xffffff;
			state |= top_bit ^ ((cur >> (7 - j)) & 1);
			if (top_bit)
				state ^= lfsr_mask;
    6ea0:	4e14      	ldr	r6, [pc, #80]	; (6ef4 <btle_reverse_crc+0x58>)
	for (i = len - 1; i >= 0; --i) {
    6ea2:	3a01      	subs	r2, #1
    6ea4:	2a00      	cmp	r2, #0
    6ea6:	da0e      	bge.n	6ec6 <btle_reverse_crc+0x2a>
		}
	}

	ret = 0;
	for (i = 0; i < 24; ++i)
    6ea8:	2200      	movs	r2, #0
	ret = 0;
    6eaa:	4610      	mov	r0, r2
		ret |= ((state >> i) & 1) << (23 - i);
    6eac:	fa23 f102 	lsr.w	r1, r3, r2
    6eb0:	f1c2 0417 	rsb	r4, r2, #23
    6eb4:	f001 0101 	and.w	r1, r1, #1
	for (i = 0; i < 24; ++i)
    6eb8:	3201      	adds	r2, #1
		ret |= ((state >> i) & 1) << (23 - i);
    6eba:	40a1      	lsls	r1, r4
	for (i = 0; i < 24; ++i)
    6ebc:	2a18      	cmp	r2, #24
		ret |= ((state >> i) & 1) << (23 - i);
    6ebe:	ea40 0001 	orr.w	r0, r0, r1
	for (i = 0; i < 24; ++i)
    6ec2:	d1f3      	bne.n	6eac <btle_reverse_crc+0x10>

	return ret;
}
    6ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		u8 cur = data[i];
    6ec6:	2407      	movs	r4, #7
    6ec8:	5c8f      	ldrb	r7, [r1, r2]
			state |= top_bit ^ ((cur >> (7 - j)) & 1);
    6eca:	fa47 f004 	asr.w	r0, r7, r4
			state = (state << 1) & 0xffffff;
    6ece:	005d      	lsls	r5, r3, #1
			state |= top_bit ^ ((cur >> (7 - j)) & 1);
    6ed0:	f000 0001 	and.w	r0, r0, #1
			int top_bit = state >> 23;
    6ed4:	ea4f 5cd3 	mov.w	ip, r3, lsr #23
			state = (state << 1) & 0xffffff;
    6ed8:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
			state |= top_bit ^ ((cur >> (7 - j)) & 1);
    6edc:	ea80 53d3 	eor.w	r3, r0, r3, lsr #23
    6ee0:	432b      	orrs	r3, r5
			if (top_bit)
    6ee2:	f1bc 0f00 	cmp.w	ip, #0
    6ee6:	d000      	beq.n	6eea <btle_reverse_crc+0x4e>
				state ^= lfsr_mask;
    6ee8:	4073      	eors	r3, r6
		for (j = 0; j < 8; ++j) {
    6eea:	3c01      	subs	r4, #1
    6eec:	d2ed      	bcs.n	6eca <btle_reverse_crc+0x2e>
	for (i = len - 1; i >= 0; --i) {
    6eee:	3a01      	subs	r2, #1
    6ef0:	e7d8      	b.n	6ea4 <btle_reverse_crc+0x8>
    6ef2:	bf00      	nop
    6ef4:	00b4c000 	.word	0x00b4c000

00006ef8 <btle_crcgen_lut>:
 * Michael Ossmann for writing and optimizing this.
 *
 * Arguments: CRCInit, pointer to start of packet, length of packet in
 * bytes
 * */
u32 btle_crcgen_lut(u32 crc_init, u8 *data, int len) {
    6ef8:	b530      	push	{r4, r5, lr}
	u32 state;
	int i;
	u8 key;

	state = crc_init & 0xffffff;
	for (i = 0; i < len; ++i) {
    6efa:	2400      	movs	r4, #0
		key = data[i] ^ (state & 0xff);
		state = (state >> 8) ^ btle_crc_lut[key];
    6efc:	4d07      	ldr	r5, [pc, #28]	; (6f1c <btle_crcgen_lut+0x24>)
	state = crc_init & 0xffffff;
    6efe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	for (i = 0; i < len; ++i) {
    6f02:	4294      	cmp	r4, r2
    6f04:	db00      	blt.n	6f08 <btle_crcgen_lut+0x10>
	}
	return state;
}
    6f06:	bd30      	pop	{r4, r5, pc}
		key = data[i] ^ (state & 0xff);
    6f08:	5d0b      	ldrb	r3, [r1, r4]
	for (i = 0; i < len; ++i) {
    6f0a:	3401      	adds	r4, #1
		key = data[i] ^ (state & 0xff);
    6f0c:	4043      	eors	r3, r0
		state = (state >> 8) ^ btle_crc_lut[key];
    6f0e:	b2db      	uxtb	r3, r3
    6f10:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    6f14:	ea83 2010 	eor.w	r0, r3, r0, lsr #8
	for (i = 0; i < len; ++i) {
    6f18:	e7f3      	b.n	6f02 <btle_crcgen_lut+0xa>
    6f1a:	bf00      	nop
    6f1c:	100005ac 	.word	0x100005ac

00006f20 <le_dewhiten>:
/*
 * Dewhiten and reverse the bit order of a buffer in place.
 * Channel is a physical channel in the range [2402, 2480]
 * TODO convert this to use whitening word
 */
void le_dewhiten(uint8_t *data, unsigned size, unsigned channel) {
    6f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6f22:	4604      	mov	r4, r0
	unsigned i, j, bit;
	unsigned idx = whitening_index[btle_channel_index(channel)];
    6f24:	b290      	uxth	r0, r2
    6f26:	f7ff ff5f 	bl	6de8 <btle_channel_index>
    6f2a:	4e14      	ldr	r6, [pc, #80]	; (6f7c <le_dewhiten+0x5c>)
	for (i = 0; i < size; ++i) {
		uint8_t out = 0;
		for (j = 0; j < 8; ++j) {
			bit = (data[i] >> (7-j)) & 1;
			bit ^= whitening[idx];
			idx = (idx + 1) % sizeof(whitening);
    6f2c:	277f      	movs	r7, #127	; 0x7f
	unsigned idx = whitening_index[btle_channel_index(channel)];
    6f2e:	5c32      	ldrb	r2, [r6, r0]
	for (i = 0; i < size; ++i) {
    6f30:	4620      	mov	r0, r4
    6f32:	4421      	add	r1, r4
    6f34:	4281      	cmp	r1, r0
    6f36:	d100      	bne.n	6f3a <le_dewhiten+0x1a>
			out |= bit << j;
		}
		data[i] = out;
	}
}
    6f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint8_t out = 0;
    6f3a:	f04f 0e00 	mov.w	lr, #0
		for (j = 0; j < 8; ++j) {
    6f3e:	4674      	mov	r4, lr
			bit = (data[i] >> (7-j)) & 1;
    6f40:	f890 c000 	ldrb.w	ip, [r0]
    6f44:	f1c4 0507 	rsb	r5, r4, #7
    6f48:	fa4c f305 	asr.w	r3, ip, r5
    6f4c:	f003 0501 	and.w	r5, r3, #1
			bit ^= whitening[idx];
    6f50:	18b3      	adds	r3, r6, r2
    6f52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			idx = (idx + 1) % sizeof(whitening);
    6f56:	3201      	adds	r2, #1
			bit ^= whitening[idx];
    6f58:	406b      	eors	r3, r5
			idx = (idx + 1) % sizeof(whitening);
    6f5a:	fbb2 f5f7 	udiv	r5, r2, r7
			out |= bit << j;
    6f5e:	40a3      	lsls	r3, r4
		for (j = 0; j < 8; ++j) {
    6f60:	3401      	adds	r4, #1
			idx = (idx + 1) % sizeof(whitening);
    6f62:	ebc5 15c5 	rsb	r5, r5, r5, lsl #7
			out |= bit << j;
    6f66:	ea4e 0303 	orr.w	r3, lr, r3
		for (j = 0; j < 8; ++j) {
    6f6a:	2c08      	cmp	r4, #8
			idx = (idx + 1) % sizeof(whitening);
    6f6c:	eba2 0205 	sub.w	r2, r2, r5
			out |= bit << j;
    6f70:	fa5f fe83 	uxtb.w	lr, r3
		for (j = 0; j < 8; ++j) {
    6f74:	d1e6      	bne.n	6f44 <le_dewhiten+0x24>
		data[i] = out;
    6f76:	f800 eb01 	strb.w	lr, [r0], #1
	for (i = 0; i < size; ++i) {
    6f7a:	e7db      	b.n	6f34 <le_dewhiten+0x14>
    6f7c:	0000b4c0 	.word	0x0000b4c0

00006f80 <le_parse_channel_map>:

/*
 * Parse a channel map and populate the le_channel_remapping_t struct.
 */
void le_parse_channel_map(uint8_t *channel_map, le_channel_remapping_t *remapping) {
    6f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6f82:	460c      	mov	r4, r1
    6f84:	4605      	mov	r5, r0
	unsigned i, j, byte;
	unsigned idx = 0;

	memset(remapping, 0, sizeof(*remapping));
    6f86:	22c0      	movs	r2, #192	; 0xc0
    6f88:	2100      	movs	r1, #0
    6f8a:	4620      	mov	r0, r4
    6f8c:	f7fd f926 	bl	41dc <memset>

	for (i = 0; i < 5; ++i) {
		byte = channel_map[i];
		for (j = 0; j < 8; ++j) {
			if (byte & 1) {
				remapping->channel_in_use[idx] = 1;
    6f90:	2601      	movs	r6, #1
	unsigned idx = 0;
    6f92:	2300      	movs	r3, #0
    6f94:	1e68      	subs	r0, r5, #1
    6f96:	3504      	adds	r5, #4
		byte = channel_map[i];
    6f98:	f810 2f01 	ldrb.w	r2, [r0, #1]!
		for (j = 0; j < 8; ++j) {
    6f9c:	f103 0708 	add.w	r7, r3, #8
			if (byte & 1) {
    6fa0:	f012 0101 	ands.w	r1, r2, #1
				remapping->channel_in_use[idx] = 1;
    6fa4:	bf1b      	ittet	ne
    6fa6:	f844 6023 	strne.w	r6, [r4, r3, lsl #2]
				remapping->remapping_index[remapping->total_channels] = idx;
    6faa:	f8d4 10bc 	ldrne.w	r1, [r4, #188]	; 0xbc
				++remapping->total_channels;
			} else {
				remapping->channel_in_use[idx] = 0;
    6fae:	f844 1023 	streq.w	r1, [r4, r3, lsl #2]
				remapping->remapping_index[remapping->total_channels] = idx;
    6fb2:	eb04 0c01 	addne.w	ip, r4, r1
    6fb6:	bf1c      	itt	ne
    6fb8:	f88c 3094 	strbne.w	r3, [ip, #148]	; 0x94
				++remapping->total_channels;
    6fbc:	3101      	addne	r1, #1
			}

			byte >>= 1;

			++idx;
    6fbe:	f103 0301 	add.w	r3, r3, #1
				++remapping->total_channels;
    6fc2:	bf18      	it	ne
    6fc4:	f8c4 10bc 	strne.w	r1, [r4, #188]	; 0xbc
			if (idx == 37)
    6fc8:	2b25      	cmp	r3, #37	; 0x25
			byte >>= 1;
    6fca:	ea4f 0252 	mov.w	r2, r2, lsr #1
			if (idx == 37)
    6fce:	d001      	beq.n	6fd4 <le_parse_channel_map+0x54>
		for (j = 0; j < 8; ++j) {
    6fd0:	429f      	cmp	r7, r3
    6fd2:	d1e5      	bne.n	6fa0 <le_parse_channel_map+0x20>
	for (i = 0; i < 5; ++i) {
    6fd4:	42a8      	cmp	r0, r5
    6fd6:	d1df      	bne.n	6f98 <le_parse_channel_map+0x18>
				break;
		}
	}
}
    6fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006fda <le_map_channel>:

/*
 * Map a channel index to a used index given a remapping struct.
 */
uint8_t le_map_channel(uint8_t channel_idx, le_channel_remapping_t *remapping) {
	if (remapping->channel_in_use[channel_idx])
    6fda:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
    6fde:	b943      	cbnz	r3, 6ff2 <le_map_channel+0x18>
		return channel_idx;
	else
		return remapping->remapping_index[channel_idx % remapping->total_channels];
    6fe0:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    6fe4:	fbb0 f3f2 	udiv	r3, r0, r2
    6fe8:	fb02 0013 	mls	r0, r2, r3, r0
    6fec:	4401      	add	r1, r0
    6fee:	f891 0094 	ldrb.w	r0, [r1, #148]	; 0x94
}
    6ff2:	4770      	bx	lr

00006ff4 <usb_vendor_request_handler>:
*/

VendorRequestHandler *v_req_handler;

BOOL usb_vendor_request_handler(TSetupPacket *pSetup, int *piLen, u8 **ppbData)
{
    6ff4:	b513      	push	{r0, r1, r4, lr}
    6ff6:	460b      	mov	r3, r1
	int rv;
	u16 params[3] = {pSetup->wValue, pSetup->wIndex, pSetup->wLength};
    6ff8:	8841      	ldrh	r1, [r0, #2]
	rv = v_req_handler(pSetup->bRequest, params, *ppbData, piLen);
    6ffa:	6812      	ldr	r2, [r2, #0]
	u16 params[3] = {pSetup->wValue, pSetup->wIndex, pSetup->wLength};
    6ffc:	f8ad 1000 	strh.w	r1, [sp]
    7000:	8881      	ldrh	r1, [r0, #4]
    7002:	f8ad 1002 	strh.w	r1, [sp, #2]
    7006:	88c1      	ldrh	r1, [r0, #6]
	rv = v_req_handler(pSetup->bRequest, params, *ppbData, piLen);
    7008:	7840      	ldrb	r0, [r0, #1]
	u16 params[3] = {pSetup->wValue, pSetup->wIndex, pSetup->wLength};
    700a:	f8ad 1004 	strh.w	r1, [sp, #4]
	rv = v_req_handler(pSetup->bRequest, params, *ppbData, piLen);
    700e:	4904      	ldr	r1, [pc, #16]	; (7020 <usb_vendor_request_handler+0x2c>)
    7010:	680c      	ldr	r4, [r1, #0]
    7012:	4669      	mov	r1, sp
    7014:	47a0      	blx	r4
	return (BOOL) (rv==1);
}
    7016:	1e43      	subs	r3, r0, #1
    7018:	4258      	negs	r0, r3
    701a:	4158      	adcs	r0, r3
    701c:	b002      	add	sp, #8
    701e:	bd10      	pop	{r4, pc}
    7020:	10003a24 	.word	0x10003a24

00007024 <set_serial_descriptor>:


void set_serial_descriptor(u8 *descriptors) {
    7024:	b570      	push	{r4, r5, r6, lr}
    7026:	b086      	sub	sp, #24
	u8 buf[17], *desc, nibble;
	int len, i;
	get_device_serial(buf, &len);
    7028:	4669      	mov	r1, sp
void set_serial_descriptor(u8 *descriptors) {
    702a:	4604      	mov	r4, r0
	get_device_serial(buf, &len);
    702c:	a801      	add	r0, sp, #4
    702e:	f002 ff4d 	bl	9ecc <get_device_serial>
	if(buf[0] == 0) { /* IAP success */
    7032:	f89d 1004 	ldrb.w	r1, [sp, #4]
    7036:	b9e9      	cbnz	r1, 7074 <set_serial_descriptor+0x50>
		desc = descriptors + USB_SERIAL_OFFSET;
		for(i=0; i<16; i++) {
    7038:	4620      	mov	r0, r4
    703a:	460e      	mov	r6, r1
    703c:	aa01      	add	r2, sp, #4
    703e:	f104 0540 	add.w	r5, r4, #64	; 0x40
			nibble  = (buf[i+1]>>4) & 0xF;
    7042:	7853      	ldrb	r3, [r2, #1]
			desc[i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
			desc[1+ i * 4] = 0;
    7044:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
			nibble  = (buf[i+1]>>4) & 0xF;
    7048:	091c      	lsrs	r4, r3, #4
			desc[i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
    704a:	2b9f      	cmp	r3, #159	; 0x9f
			nibble = buf[i+1]&0xF;
    704c:	f003 030f 	and.w	r3, r3, #15
			desc[i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
    7050:	bf8c      	ite	hi
    7052:	3457      	addhi	r4, #87	; 0x57
    7054:	3430      	addls	r4, #48	; 0x30
			desc[2 + i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
    7056:	2b09      	cmp	r3, #9
    7058:	bf8c      	ite	hi
    705a:	3357      	addhi	r3, #87	; 0x57
    705c:	3330      	addls	r3, #48	; 0x30
			desc[i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
    705e:	f880 407c 	strb.w	r4, [r0, #124]	; 0x7c
			desc[2 + i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
    7062:	f880 307e 	strb.w	r3, [r0, #126]	; 0x7e
			desc[3 + i * 4] = 0;
    7066:	f880 607f 	strb.w	r6, [r0, #127]	; 0x7f
		for(i=0; i<16; i++) {
    706a:	3004      	adds	r0, #4
    706c:	42a8      	cmp	r0, r5
    706e:	f102 0201 	add.w	r2, r2, #1
    7072:	d1e6      	bne.n	7042 <set_serial_descriptor+0x1e>
		}
	}
}
    7074:	b006      	add	sp, #24
    7076:	bd70      	pop	{r4, r5, r6, pc}

00007078 <ubertooth_usb_init>:

int ubertooth_usb_init(VendorRequestHandler *vendor_req_handler)
{
    7078:	b538      	push	{r3, r4, r5, lr}
    707a:	4604      	mov	r4, r0
	// initialise stack
	USBInit();

	set_serial_descriptor(abDescriptors);
    707c:	4d0c      	ldr	r5, [pc, #48]	; (70b0 <ubertooth_usb_init+0x38>)
	USBInit();
    707e:	f002 fff9 	bl	a074 <USBInit>
	set_serial_descriptor(abDescriptors);
    7082:	4628      	mov	r0, r5
    7084:	f7ff ffce 	bl	7024 <set_serial_descriptor>
	
	// register device descriptors
	USBRegisterDescriptors(abDescriptors);
    7088:	4628      	mov	r0, r5
    708a:	f003 fa2b 	bl	a4e4 <USBRegisterDescriptors>

	// Request handler
	v_req_handler = vendor_req_handler;
    708e:	4b09      	ldr	r3, [pc, #36]	; (70b4 <ubertooth_usb_init+0x3c>)

	// override standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_VENDOR, usb_vendor_request_handler, abVendorReqData);
    7090:	4a09      	ldr	r2, [pc, #36]	; (70b8 <ubertooth_usb_init+0x40>)
    7092:	2002      	movs	r0, #2
    7094:	4909      	ldr	r1, [pc, #36]	; (70bc <ubertooth_usb_init+0x44>)
	v_req_handler = vendor_req_handler;
    7096:	601c      	str	r4, [r3, #0]
	USBRegisterRequestHandler(REQTYPE_TYPE_VENDOR, usb_vendor_request_handler, abVendorReqData);
    7098:	f002 ffe2 	bl	a060 <USBRegisterRequestHandler>

	// enable USB interrupts
	//ISER0 = ISER0_ISE_USB;

	// Enable WCID / driverless setup on Windows - Consumes Vendor Request 0xFF
	USBRegisterWinusbInterface(0xFF, "{8ac47a88-cc26-4aa9-887b-42ca8cf07a63}");
    709c:	4908      	ldr	r1, [pc, #32]	; (70c0 <ubertooth_usb_init+0x48>)
    709e:	20ff      	movs	r0, #255	; 0xff
    70a0:	f003 fa0a 	bl	a4b8 <USBRegisterWinusbInterface>

	// connect to bus
	USBHwConnect(TRUE);
    70a4:	2001      	movs	r0, #1
    70a6:	f003 f87c 	bl	a1a2 <USBHwConnect>

	return 0;
}
    70aa:	2000      	movs	r0, #0
    70ac:	bd38      	pop	{r3, r4, r5, pc}
    70ae:	bf00      	nop
    70b0:	100009ac 	.word	0x100009ac
    70b4:	10003a24 	.word	0x10003a24
    70b8:	10003920 	.word	0x10003920
    70bc:	00006ff5 	.word	0x00006ff5
    70c0:	0000b567 	.word	0x0000b567

000070c4 <usb_queue_init>:
volatile u32 head = 0;
volatile u32 tail = 0;

void usb_queue_init(void)
{
	head = 0;
    70c4:	2100      	movs	r1, #0
    70c6:	4b04      	ldr	r3, [pc, #16]	; (70d8 <usb_queue_init+0x14>)
	tail = 0;
	memset(fifo, 0, sizeof(fifo));
    70c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    70cc:	4803      	ldr	r0, [pc, #12]	; (70dc <usb_queue_init+0x18>)
	head = 0;
    70ce:	6019      	str	r1, [r3, #0]
	tail = 0;
    70d0:	6059      	str	r1, [r3, #4]
	memset(fifo, 0, sizeof(fifo));
    70d2:	f7fd b883 	b.w	41dc <memset>
    70d6:	bf00      	nop
    70d8:	10000b78 	.word	0x10000b78
    70dc:	10001920 	.word	0x10001920

000070e0 <usb_enqueue>:
}

usb_pkt_rx *usb_enqueue(void)
{
    70e0:	b510      	push	{r4, lr}
	u8 h = head & 0x7F;
    70e2:	4a0a      	ldr	r2, [pc, #40]	; (710c <usb_enqueue+0x2c>)
    70e4:	6814      	ldr	r4, [r2, #0]
	u8 t = tail & 0x7F;
    70e6:	6853      	ldr	r3, [r2, #4]
	u8 n = (t + 1) & 0x7F;

	/* fail if queue is full */
	if (h == n) {
    70e8:	f004 007f 	and.w	r0, r4, #127	; 0x7f
	u8 t = tail & 0x7F;
    70ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	u8 n = (t + 1) & 0x7F;
    70f0:	1c59      	adds	r1, r3, #1
	if (h == n) {
    70f2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    70f6:	4288      	cmp	r0, r1
		return NULL;
	}

	++tail;
    70f8:	bf1d      	ittte	ne
    70fa:	6851      	ldrne	r1, [r2, #4]
	return &fifo[t];
    70fc:	4804      	ldrne	r0, [pc, #16]	; (7110 <usb_enqueue+0x30>)
	++tail;
    70fe:	3101      	addne	r1, #1
		return NULL;
    7100:	2000      	moveq	r0, #0
	++tail;
    7102:	bf1c      	itt	ne
    7104:	6051      	strne	r1, [r2, #4]
	return &fifo[t];
    7106:	eb00 1083 	addne.w	r0, r0, r3, lsl #6

}
    710a:	bd10      	pop	{r4, pc}
    710c:	10000b78 	.word	0x10000b78
    7110:	10001920 	.word	0x10001920

00007114 <dequeue>:

usb_pkt_rx *dequeue(void)
{
	u8 h = head & 0x7F;
    7114:	4a08      	ldr	r2, [pc, #32]	; (7138 <dequeue+0x24>)
    7116:	6813      	ldr	r3, [r2, #0]
	u8 t = tail & 0x7F;
    7118:	6851      	ldr	r1, [r2, #4]
	u8 h = head & 0x7F;
    711a:	f003 037f 	and.w	r3, r3, #127	; 0x7f

	/* fail if queue is empty */
	if (h == t) {
    711e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    7122:	428b      	cmp	r3, r1
		return NULL;
	}

	++head;
    7124:	bf1f      	itttt	ne
    7126:	6811      	ldrne	r1, [r2, #0]
	return &fifo[h];
    7128:	4804      	ldrne	r0, [pc, #16]	; (713c <dequeue+0x28>)
	++head;
    712a:	3101      	addne	r1, #1
	return &fifo[h];
    712c:	eb00 1083 	addne.w	r0, r0, r3, lsl #6
	++head;
    7130:	bf14      	ite	ne
    7132:	6011      	strne	r1, [r2, #0]
		return NULL;
    7134:	2000      	moveq	r0, #0
}
    7136:	4770      	bx	lr
    7138:	10000b78 	.word	0x10000b78
    713c:	10001920 	.word	0x10001920

00007140 <dequeue_send>:

#define USB_KEEP_ALIVE 400000
u32 last_usb_pkt = 0;  // for keep alive packets

int dequeue_send(u32 clkn)
{
    7140:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7142:	4605      	mov	r5, r0
	usb_pkt_rx *pkt = dequeue();
    7144:	f7ff ffe6 	bl	7114 <dequeue>
	if (pkt != NULL) {
    7148:	4b0e      	ldr	r3, [pc, #56]	; (7184 <dequeue_send+0x44>)
    714a:	4604      	mov	r4, r0
    714c:	b140      	cbz	r0, 7160 <dequeue_send+0x20>
		last_usb_pkt = clkn;
		USBHwEPWrite(BULK_IN_EP, (u8 *)pkt, sizeof(usb_pkt_rx));
    714e:	4601      	mov	r1, r0
    7150:	2240      	movs	r2, #64	; 0x40
    7152:	2082      	movs	r0, #130	; 0x82
		last_usb_pkt = clkn;
    7154:	609d      	str	r5, [r3, #8]
		USBHwEPWrite(BULK_IN_EP, (u8 *)pkt, sizeof(usb_pkt_rx));
    7156:	f003 f855 	bl	a204 <USBHwEPWrite>
		return 1;
    715a:	2001      	movs	r0, #1
			last_usb_pkt = clkn;
			USBHwEPWrite(BULK_IN_EP, &pkt_type, 1);
		}
		return 0;
	}
}
    715c:	b003      	add	sp, #12
    715e:	bd30      	pop	{r4, r5, pc}
		if (clkn - last_usb_pkt > USB_KEEP_ALIVE) {
    7160:	689a      	ldr	r2, [r3, #8]
    7162:	4909      	ldr	r1, [pc, #36]	; (7188 <dequeue_send+0x48>)
    7164:	1aaa      	subs	r2, r5, r2
    7166:	428a      	cmp	r2, r1
    7168:	d909      	bls.n	717e <dequeue_send+0x3e>
			u8 pkt_type = KEEP_ALIVE;
    716a:	2203      	movs	r2, #3
			USBHwEPWrite(BULK_IN_EP, &pkt_type, 1);
    716c:	2082      	movs	r0, #130	; 0x82
			u8 pkt_type = KEEP_ALIVE;
    716e:	f88d 2007 	strb.w	r2, [sp, #7]
			USBHwEPWrite(BULK_IN_EP, &pkt_type, 1);
    7172:	f10d 0107 	add.w	r1, sp, #7
    7176:	2201      	movs	r2, #1
			last_usb_pkt = clkn;
    7178:	609d      	str	r5, [r3, #8]
			USBHwEPWrite(BULK_IN_EP, &pkt_type, 1);
    717a:	f003 f843 	bl	a204 <USBHwEPWrite>
    717e:	4620      	mov	r0, r4
    7180:	e7ec      	b.n	715c <dequeue_send+0x1c>
    7182:	bf00      	nop
    7184:	10000b78 	.word	0x10000b78
    7188:	00061a80 	.word	0x00061a80

0000718c <handle_usb>:

void handle_usb(u32 clkn)
{
    718c:	b538      	push	{r3, r4, r5, lr}
    718e:	4604      	mov	r4, r0
	u8 epstat;

	/* write queued packets to USB if possible */
	epstat = USBHwEPGetStatus(BULK_IN_EP);
    7190:	2082      	movs	r0, #130	; 0x82
    7192:	f003 f811 	bl	a1b8 <USBHwEPGetStatus>
	if (!(epstat & EPSTAT_B1FULL)) {
    7196:	0682      	lsls	r2, r0, #26
	epstat = USBHwEPGetStatus(BULK_IN_EP);
    7198:	4605      	mov	r5, r0
	if (!(epstat & EPSTAT_B1FULL)) {
    719a:	d402      	bmi.n	71a2 <handle_usb+0x16>
		dequeue_send(clkn);
    719c:	4620      	mov	r0, r4
    719e:	f7ff ffcf 	bl	7140 <dequeue_send>
	}
	if (!(epstat & EPSTAT_B2FULL)) {
    71a2:	066b      	lsls	r3, r5, #25
    71a4:	d402      	bmi.n	71ac <handle_usb+0x20>
		dequeue_send(clkn);
    71a6:	4620      	mov	r0, r4
    71a8:	f7ff ffca 	bl	7140 <dequeue_send>
	}

	/* polled "interrupt" */
	USBHwISR();
}
    71ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	USBHwISR();
    71b0:	f003 b88e 	b.w	a2d0 <USBHwISR>

000071b4 <rssi_reset>:

int32_t rssi_sum;
int16_t rssi_iir[79] = {0};

void rssi_reset(void)
{
    71b4:	b508      	push	{r3, lr}
	memset(rssi_iir, 0, sizeof(rssi_iir));
    71b6:	229e      	movs	r2, #158	; 0x9e
    71b8:	2100      	movs	r1, #0
    71ba:	4807      	ldr	r0, [pc, #28]	; (71d8 <rssi_reset+0x24>)
    71bc:	f7fd f80e 	bl	41dc <memset>

	rssi_count = 0;
    71c0:	2300      	movs	r3, #0
    71c2:	4a06      	ldr	r2, [pc, #24]	; (71dc <rssi_reset+0x28>)
    71c4:	7013      	strb	r3, [r2, #0]
	rssi_sum = 0;
    71c6:	4a06      	ldr	r2, [pc, #24]	; (71e0 <rssi_reset+0x2c>)
    71c8:	6013      	str	r3, [r2, #0]
	rssi_max = INT8_MIN;
    71ca:	2280      	movs	r2, #128	; 0x80
    71cc:	4b05      	ldr	r3, [pc, #20]	; (71e4 <rssi_reset+0x30>)
    71ce:	701a      	strb	r2, [r3, #0]
	rssi_min = INT8_MAX;
    71d0:	227f      	movs	r2, #127	; 0x7f
    71d2:	4b05      	ldr	r3, [pc, #20]	; (71e8 <rssi_reset+0x34>)
    71d4:	701a      	strb	r2, [r3, #0]
}
    71d6:	bd08      	pop	{r3, pc}
    71d8:	10000b84 	.word	0x10000b84
    71dc:	100017ee 	.word	0x100017ee
    71e0:	10003a28 	.word	0x10003a28
    71e4:	10001350 	.word	0x10001350
    71e8:	10001352 	.word	0x10001352

000071ec <rssi_add>:

void rssi_add(int8_t v)
{
	rssi_max = (v > rssi_max) ? v : rssi_max;
    71ec:	4a0b      	ldr	r2, [pc, #44]	; (721c <rssi_add+0x30>)
    71ee:	f992 3000 	ldrsb.w	r3, [r2]
    71f2:	4283      	cmp	r3, r0
    71f4:	bfb8      	it	lt
    71f6:	4603      	movlt	r3, r0
    71f8:	7013      	strb	r3, [r2, #0]
	rssi_min = (v < rssi_min) ? v : rssi_min;
    71fa:	4a09      	ldr	r2, [pc, #36]	; (7220 <rssi_add+0x34>)
    71fc:	f992 3000 	ldrsb.w	r3, [r2]
    7200:	4283      	cmp	r3, r0
    7202:	bfa8      	it	ge
    7204:	4603      	movge	r3, r0
    7206:	7013      	strb	r3, [r2, #0]
	rssi_sum += ((int32_t)v * 256);  // scaled int math (x256)
    7208:	4a06      	ldr	r2, [pc, #24]	; (7224 <rssi_add+0x38>)
    720a:	6813      	ldr	r3, [r2, #0]
    720c:	eb03 2000 	add.w	r0, r3, r0, lsl #8
    7210:	6010      	str	r0, [r2, #0]
	rssi_count += 1;
    7212:	4a05      	ldr	r2, [pc, #20]	; (7228 <rssi_add+0x3c>)
    7214:	7813      	ldrb	r3, [r2, #0]
    7216:	3301      	adds	r3, #1
    7218:	7013      	strb	r3, [r2, #0]
}
    721a:	4770      	bx	lr
    721c:	10001350 	.word	0x10001350
    7220:	10001352 	.word	0x10001352
    7224:	10003a28 	.word	0x10003a28
    7228:	100017ee 	.word	0x100017ee

0000722c <rssi_iir_update>:

/* For sweep mode, update IIR per channel. Otherwise, use single value. */
void rssi_iir_update(uint16_t channel)
{
    722c:	b510      	push	{r4, lr}
	int32_t rssi_iir_acc;

	/* Use array to track 79 Bluetooth channels, or just first slot
	 * of array if the frequency is not a valid Bluetooth channel. */
	if ( channel < 2402 || channel < 2480 )
		channel = 2402;
    722e:	f640 1362 	movw	r3, #2402	; 0x962
    7232:	f5b0 6f1b 	cmp.w	r0, #2480	; 0x9b0
    7236:	bf38      	it	cc
    7238:	4618      	movcc	r0, r3

	int i = channel - 2402;

	// IIR using scaled int math (x256)
	if (rssi_count != 0)
    723a:	4b0d      	ldr	r3, [pc, #52]	; (7270 <rssi_iir_update+0x44>)
	int i = channel - 2402;
    723c:	f6a0 1062 	subw	r0, r0, #2402	; 0x962
	if (rssi_count != 0)
    7240:	781b      	ldrb	r3, [r3, #0]
    7242:	b123      	cbz	r3, 724e <rssi_iir_update+0x22>
		avg = (rssi_sum  + 128) / rssi_count;
    7244:	4a0b      	ldr	r2, [pc, #44]	; (7274 <rssi_iir_update+0x48>)
    7246:	6812      	ldr	r2, [r2, #0]
    7248:	3280      	adds	r2, #128	; 0x80
    724a:	fb92 f3f3 	sdiv	r3, r2, r3
	else
		avg = 0; // really an error
	rssi_iir_acc = rssi_iir[i] * (256-RSSI_IIR_ALPHA);
	rssi_iir_acc += avg * RSSI_IIR_ALPHA;
    724e:	24fd      	movs	r4, #253	; 0xfd
	rssi_iir_acc = rssi_iir[i] * (256-RSSI_IIR_ALPHA);
    7250:	4909      	ldr	r1, [pc, #36]	; (7278 <rssi_iir_update+0x4c>)
	rssi_iir_acc += avg * RSSI_IIR_ALPHA;
    7252:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	rssi_iir_acc = rssi_iir[i] * (256-RSSI_IIR_ALPHA);
    7256:	f931 2010 	ldrsh.w	r2, [r1, r0, lsl #1]
	rssi_iir_acc += avg * RSSI_IIR_ALPHA;
    725a:	fb04 3302 	mla	r3, r4, r2, r3
	rssi_iir[i] = (int16_t)((rssi_iir_acc + 128) / 256);
    725e:	f113 0280 	adds.w	r2, r3, #128	; 0x80
    7262:	bf48      	it	mi
    7264:	f203 127f 	addwmi	r2, r3, #383	; 0x17f
    7268:	1212      	asrs	r2, r2, #8
    726a:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
}
    726e:	bd10      	pop	{r4, pc}
    7270:	100017ee 	.word	0x100017ee
    7274:	10003a28 	.word	0x10003a28
    7278:	10000b84 	.word	0x10000b84

0000727c <rssi_get_avg>:
int8_t rssi_get_avg(uint16_t channel)
{
	/* Use array to track 79 Bluetooth channels, or just first slot
	 * of array if the frequency is not a valid Bluetooth channel. */
	if ( channel < 2402 || channel < 2480 )
		channel = 2402;
    727c:	f640 1362 	movw	r3, #2402	; 0x962
    7280:	f5b0 6f1b 	cmp.w	r0, #2480	; 0x9b0
    7284:	bf38      	it	cc
    7286:	4618      	movcc	r0, r3

	return (rssi_iir[channel-2402] + 128) / 256;
    7288:	4b06      	ldr	r3, [pc, #24]	; (72a4 <rssi_get_avg+0x28>)
    728a:	f6a0 1062 	subw	r0, r0, #2402	; 0x962
    728e:	f933 3010 	ldrsh.w	r3, [r3, r0, lsl #1]
    7292:	f113 0080 	adds.w	r0, r3, #128	; 0x80
    7296:	bf48      	it	mi
    7298:	f203 107f 	addwmi	r0, r3, #383	; 0x17f
}
    729c:	f340 2007 	sbfx	r0, r0, #8, #8
    72a0:	4770      	bx	lr
    72a2:	bf00      	nop
    72a4:	10000b84 	.word	0x10000b84

000072a8 <cs_threshold_calc_and_set>:
	cs_threshold_cur = level;
	cs_no_squelch = (level <= -120);
}

void cs_threshold_calc_and_set(uint16_t channel)
{
    72a8:	b538      	push	{r3, r4, r5, lr}

	/* If threshold is max/avg based (>0), reset here while rx is
	 * off.  TODO - max-to-iir only works in SWEEP mode, where the
	 * channel is known to be in the BT band, i.e., rssi_iir has a
	 * value for it. */
	if (cs_threshold_req > 0) {
    72aa:	4d13      	ldr	r5, [pc, #76]	; (72f8 <cs_threshold_calc_and_set+0x50>)
    72ac:	f995 4000 	ldrsb.w	r4, [r5]
    72b0:	2c00      	cmp	r4, #0
    72b2:	dd05      	ble.n	72c0 <cs_threshold_calc_and_set+0x18>
		int8_t rssi = rssi_get_avg(channel);
    72b4:	f7ff ffe2 	bl	727c <rssi_get_avg>
		level = rssi - 54 + cs_threshold_req;
    72b8:	782c      	ldrb	r4, [r5, #0]
    72ba:	3c36      	subs	r4, #54	; 0x36
    72bc:	4404      	add	r4, r0
    72be:	b264      	sxtb	r4, r4
	level = level > -20 ? -20 : level;
    72c0:	f06f 0577 	mvn.w	r5, #119	; 0x77
    72c4:	42a5      	cmp	r5, r4
    72c6:	bfb8      	it	lt
    72c8:	4625      	movlt	r5, r4
    72ca:	f06f 0313 	mvn.w	r3, #19
    72ce:	429d      	cmp	r5, r3
    72d0:	bfa8      	it	ge
    72d2:	461d      	movge	r5, r3
	cc2400_set(RSSI, (uint8_t)((level + 56) & (0x3f << 2)) | ((uint8_t)samples&3));
    72d4:	f105 0138 	add.w	r1, r5, #56	; 0x38
    72d8:	f041 0103 	orr.w	r1, r1, #3
    72dc:	2006      	movs	r0, #6
    72de:	b2c9      	uxtb	r1, r1
    72e0:	f002 fc55 	bl	9b8e <cc2400_set>
	cs_no_squelch = (level <= -120);
    72e4:	f114 0f77 	cmn.w	r4, #119	; 0x77
    72e8:	bfac      	ite	ge
    72ea:	2400      	movge	r4, #0
    72ec:	2401      	movlt	r4, #1
	cs_threshold_cur = level;
    72ee:	4b03      	ldr	r3, [pc, #12]	; (72fc <cs_threshold_calc_and_set+0x54>)
    72f0:	701d      	strb	r5, [r3, #0]
	cs_no_squelch = (level <= -120);
    72f2:	4b03      	ldr	r3, [pc, #12]	; (7300 <cs_threshold_calc_and_set+0x58>)
    72f4:	701c      	strb	r4, [r3, #0]
	} else {
		level = cs_threshold_req;
	}
	cs_threshold_set(level, CS_SAMPLES_4);
}
    72f6:	bd38      	pop	{r3, r4, r5, pc}
    72f8:	100017f0 	.word	0x100017f0
    72fc:	10001864 	.word	0x10001864
    7300:	100014b8 	.word	0x100014b8

00007304 <cs_trigger_enable>:
 * triggers EINT3, which could be used for other things (but is not
 * currently). TODO - EINT3 should be managed globally, not turned on
 * and off here. */
void cs_trigger_enable(void)
{
	cs_trigger = 0;
    7304:	2200      	movs	r2, #0
    7306:	4b07      	ldr	r3, [pc, #28]	; (7324 <cs_trigger_enable+0x20>)
    7308:	701a      	strb	r2, [r3, #0]
	ISER0 = ISER0_ISE_EINT3;
    730a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    730e:	4b06      	ldr	r3, [pc, #24]	; (7328 <cs_trigger_enable+0x24>)
    7310:	601a      	str	r2, [r3, #0]
	IO2IntClr = PIN_GIO6;      // Clear pending
    7312:	2204      	movs	r2, #4
    7314:	4b05      	ldr	r3, [pc, #20]	; (732c <cs_trigger_enable+0x28>)
    7316:	601a      	str	r2, [r3, #0]
	IO2IntEnF |= PIN_GIO6;     // Enable port 2.2 falling (CS active low)
    7318:	4a05      	ldr	r2, [pc, #20]	; (7330 <cs_trigger_enable+0x2c>)
    731a:	6813      	ldr	r3, [r2, #0]
    731c:	f043 0304 	orr.w	r3, r3, #4
    7320:	6013      	str	r3, [r2, #0]
}
    7322:	4770      	bx	lr
    7324:	10001865 	.word	0x10001865
    7328:	e000e100 	.word	0xe000e100
    732c:	400280ac 	.word	0x400280ac
    7330:	400280b4 	.word	0x400280b4

00007334 <cs_trigger_disable>:

void cs_trigger_disable(void)
{
	IO2IntEnF &= ~PIN_GIO6;    // Disable port 2.2 falling (CS active low)
    7334:	4a07      	ldr	r2, [pc, #28]	; (7354 <cs_trigger_disable+0x20>)
    7336:	6813      	ldr	r3, [r2, #0]
    7338:	f023 0304 	bic.w	r3, r3, #4
    733c:	6013      	str	r3, [r2, #0]
	IO2IntClr = PIN_GIO6;      // Clear pending
    733e:	2204      	movs	r2, #4
    7340:	4b05      	ldr	r3, [pc, #20]	; (7358 <cs_trigger_disable+0x24>)
    7342:	601a      	str	r2, [r3, #0]
	ICER0 = ICER0_ICE_EINT3;
    7344:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    7348:	4b04      	ldr	r3, [pc, #16]	; (735c <cs_trigger_disable+0x28>)
    734a:	601a      	str	r2, [r3, #0]
	cs_trigger = 0;
    734c:	2200      	movs	r2, #0
    734e:	4b04      	ldr	r3, [pc, #16]	; (7360 <cs_trigger_disable+0x2c>)
    7350:	701a      	strb	r2, [r3, #0]
}
    7352:	4770      	bx	lr
    7354:	400280b4 	.word	0x400280b4
    7358:	400280ac 	.word	0x400280ac
    735c:	e000e180 	.word	0xe000e180
    7360:	10001865 	.word	0x10001865

00007364 <cs_reset>:

void cs_reset(void)
{
    7364:	b508      	push	{r3, lr}
	cs_trigger_disable();
    7366:	f7ff ffe5 	bl	7334 <cs_trigger_disable>

	cs_no_squelch = 0;
    736a:	2200      	movs	r2, #0
    736c:	4b03      	ldr	r3, [pc, #12]	; (737c <cs_reset+0x18>)
    736e:	701a      	strb	r2, [r3, #0]
	cs_threshold_req=CS_THRESHOLD_DEFAULT;
    7370:	2388      	movs	r3, #136	; 0x88
    7372:	4a03      	ldr	r2, [pc, #12]	; (7380 <cs_reset+0x1c>)
    7374:	7013      	strb	r3, [r2, #0]
	cs_threshold_cur=CS_THRESHOLD_DEFAULT;
    7376:	4a03      	ldr	r2, [pc, #12]	; (7384 <cs_reset+0x20>)
    7378:	7013      	strb	r3, [r2, #0]
}
    737a:	bd08      	pop	{r3, pc}
    737c:	100014b8 	.word	0x100014b8
    7380:	100017f0 	.word	0x100017f0
    7384:	10001864 	.word	0x10001864

00007388 <clkn_stop>:
#include "ubertooth.h"

void clkn_stop()
{
	/* stop and reset the timer to zero */
	T0TCR = TCR_Counter_Reset;
    7388:	2202      	movs	r2, #2
    738a:	4b0a      	ldr	r3, [pc, #40]	; (73b4 <clkn_stop+0x2c>)
    738c:	601a      	str	r2, [r3, #0]

	clkn = 0;
    738e:	2300      	movs	r3, #0
    7390:	4a09      	ldr	r2, [pc, #36]	; (73b8 <clkn_stop+0x30>)
    7392:	6013      	str	r3, [r2, #0]
	last_hop = 0;
    7394:	4a09      	ldr	r2, [pc, #36]	; (73bc <clkn_stop+0x34>)
    7396:	6013      	str	r3, [r2, #0]

	clkn_offset = 0;
    7398:	4a09      	ldr	r2, [pc, #36]	; (73c0 <clkn_stop+0x38>)
    739a:	6013      	str	r3, [r2, #0]
	clk100ns_offset = 0;
    739c:	4a09      	ldr	r2, [pc, #36]	; (73c4 <clkn_stop+0x3c>)
    739e:	8013      	strh	r3, [r2, #0]

	clk_drift_ppm = 0;
    73a0:	4a09      	ldr	r2, [pc, #36]	; (73c8 <clkn_stop+0x40>)
    73a2:	8013      	strh	r3, [r2, #0]
	clk_drift_correction = 0;
    73a4:	4a09      	ldr	r2, [pc, #36]	; (73cc <clkn_stop+0x44>)
    73a6:	8013      	strh	r3, [r2, #0]

	clkn_last_drift_fix = 0;
    73a8:	4a09      	ldr	r2, [pc, #36]	; (73d0 <clkn_stop+0x48>)
    73aa:	6013      	str	r3, [r2, #0]
	clkn_next_drift_fix = 0;
    73ac:	4a09      	ldr	r2, [pc, #36]	; (73d4 <clkn_stop+0x4c>)
    73ae:	6013      	str	r3, [r2, #0]
}
    73b0:	4770      	bx	lr
    73b2:	bf00      	nop
    73b4:	40004004 	.word	0x40004004
    73b8:	1000136c 	.word	0x1000136c
    73bc:	10001348 	.word	0x10001348
    73c0:	10001360 	.word	0x10001360
    73c4:	100014ba 	.word	0x100014ba
    73c8:	100017ec 	.word	0x100017ec
    73cc:	10001368 	.word	0x10001368
    73d0:	10001364 	.word	0x10001364
    73d4:	10001824 	.word	0x10001824

000073d8 <clkn_start>:

void clkn_start()
{
	/* start timer */
	T0TCR = TCR_Counter_Enable;
    73d8:	2201      	movs	r2, #1
    73da:	4b01      	ldr	r3, [pc, #4]	; (73e0 <clkn_start+0x8>)
    73dc:	601a      	str	r2, [r3, #0]
}
    73de:	4770      	bx	lr
    73e0:	40004004 	.word	0x40004004

000073e4 <clkn_init>:

void clkn_init()
{
    73e4:	b508      	push	{r3, lr}
	 * Because these are reset defaults, we're assuming TIMER0 is powered on
	 * and in timer mode.  The TIMER0 peripheral clock should have been set by
	 * clock_start().
	 */

	clkn_stop();
    73e6:	f7ff ffcf 	bl	7388 <clkn_stop>
#else
	/*
	 * The peripheral clock has a period of 20ns.  5 pclk periods
	 * makes one CLK100NS period (100 ns).
	 */
	T0PR = 4;
    73ea:	2204      	movs	r2, #4
    73ec:	4b05      	ldr	r3, [pc, #20]	; (7404 <clkn_init+0x20>)
    73ee:	601a      	str	r2, [r3, #0]
#endif
	/* 3125 * 100 ns = 312.5 us, the Bluetooth clock (CLKN). */
	T0MR0 = 3124;
    73f0:	f640 4234 	movw	r2, #3124	; 0xc34
    73f4:	60da      	str	r2, [r3, #12]
	T0MCR = TMCR_MR0R | TMCR_MR0I;
    73f6:	2203      	movs	r2, #3
    73f8:	609a      	str	r2, [r3, #8]
	ISER0 = ISER0_ISE_TIMER0;
    73fa:	2202      	movs	r2, #2
    73fc:	4b02      	ldr	r3, [pc, #8]	; (7408 <clkn_init+0x24>)
    73fe:	601a      	str	r2, [r3, #0]
}
    7400:	bd08      	pop	{r3, pc}
    7402:	bf00      	nop
    7404:	4000400c 	.word	0x4000400c
    7408:	e000e100 	.word	0xe000e100

0000740c <clkn_disable>:

// totally disable clkn and timer0
void clkn_disable(void) {
    740c:	b508      	push	{r3, lr}
	clkn_stop();
    740e:	f7ff ffbb 	bl	7388 <clkn_stop>
	ICER0 = ICER0_ICE_TIMER0;
    7412:	2202      	movs	r2, #2
    7414:	4b01      	ldr	r3, [pc, #4]	; (741c <clkn_disable+0x10>)
    7416:	601a      	str	r2, [r3, #0]
}
    7418:	bd08      	pop	{r3, pc}
    741a:	bf00      	nop
    741c:	e000e180 	.word	0xe000e180

00007420 <dma_poweron>:
dma_lli le_dma_lli[11]; // 11 x 4 bytes


void dma_poweron(void) {
	// refer to UM10360 LPC17xx User Manual Ch 31 Sec 31.6.1, PDF page 616
	PCONP |= PCONP_PCGPDMA;
    7420:	4a13      	ldr	r2, [pc, #76]	; (7470 <dma_poweron+0x50>)
    7422:	6813      	ldr	r3, [r2, #0]
    7424:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    7428:	6013      	str	r3, [r2, #0]

	// enable DMA interrupts at lowest priority
	IPR6 |= IPR6_IP_DMA; // hack, sets it to 31 (lowest)
    742a:	4a12      	ldr	r2, [pc, #72]	; (7474 <dma_poweron+0x54>)
    742c:	6813      	ldr	r3, [r2, #0]
    742e:	f443 0378 	orr.w	r3, r3, #16252928	; 0xf80000
    7432:	6013      	str	r3, [r2, #0]
	ISER0 = ISER0_ISE_DMA;
    7434:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    7438:	4b0f      	ldr	r3, [pc, #60]	; (7478 <dma_poweron+0x58>)
    743a:	601a      	str	r2, [r3, #0]

	// disable active channels
	DMACC0Config = 0;
    743c:	2300      	movs	r3, #0
    743e:	4a0f      	ldr	r2, [pc, #60]	; (747c <dma_poweron+0x5c>)
    7440:	6013      	str	r3, [r2, #0]
	DMACC1Config = 0;
    7442:	6213      	str	r3, [r2, #32]
	DMACC2Config = 0;
    7444:	6413      	str	r3, [r2, #64]	; 0x40
	DMACC3Config = 0;
    7446:	6613      	str	r3, [r2, #96]	; 0x60
	DMACC4Config = 0;
    7448:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	DMACC5Config = 0;
    744c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	DMACC6Config = 0;
    7450:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	DMACC7Config = 0;
    7454:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	DMACIntTCClear = 0xFF;
    7458:	23ff      	movs	r3, #255	; 0xff
    745a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
    745e:	6013      	str	r3, [r2, #0]
	DMACIntErrClr = 0xFF;
    7460:	6093      	str	r3, [r2, #8]

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
    7462:	2201      	movs	r2, #1
    7464:	4b06      	ldr	r3, [pc, #24]	; (7480 <dma_poweron+0x60>)
    7466:	601a      	str	r2, [r3, #0]
	while (!(DMACConfig & DMACConfig_E));
    7468:	681a      	ldr	r2, [r3, #0]
    746a:	07d2      	lsls	r2, r2, #31
    746c:	d5fc      	bpl.n	7468 <dma_poweron+0x48>
}
    746e:	4770      	bx	lr
    7470:	400fc0c4 	.word	0x400fc0c4
    7474:	e000e418 	.word	0xe000e418
    7478:	e000e100 	.word	0xe000e100
    747c:	50004110 	.word	0x50004110
    7480:	50004030 	.word	0x50004030

00007484 <dma_init_rx_symbols>:
void dma_clear_interrupts(unsigned channel) {
	DMACIntTCClear = 1 << channel;
	DMACIntErrClr  = 1 << channel;
}

void dma_init_rx_symbols(void) {
    7484:	b530      	push	{r4, r5, lr}
	DMACIntTCClear = 1 << channel;
    7486:	2301      	movs	r3, #1
    7488:	4a13      	ldr	r2, [pc, #76]	; (74d8 <dma_init_rx_symbols+0x54>)

	/* DMA linked lists */
	rx_dma_lli1.src = (uint32_t)&(DIO_SSP_DR);
	rx_dma_lli1.dest = (uint32_t)&rxbuf1[0];
	rx_dma_lli1.next_lli = (uint32_t)&rx_dma_lli2;
	rx_dma_lli1.control = (DMA_SIZE) |
    748a:	4814      	ldr	r0, [pc, #80]	; (74dc <dma_init_rx_symbols+0x58>)
	DMACIntTCClear = 1 << channel;
    748c:	6013      	str	r3, [r2, #0]
	rx_dma_lli1.src = (uint32_t)&(DIO_SSP_DR);
    748e:	4c14      	ldr	r4, [pc, #80]	; (74e0 <dma_init_rx_symbols+0x5c>)
	DMACIntErrClr  = 1 << channel;
    7490:	6093      	str	r3, [r2, #8]
	rx_dma_lli1.dest = (uint32_t)&rxbuf1[0];
    7492:	4914      	ldr	r1, [pc, #80]	; (74e4 <dma_init_rx_symbols+0x60>)
	rx_dma_lli1.src = (uint32_t)&(DIO_SSP_DR);
    7494:	4a14      	ldr	r2, [pc, #80]	; (74e8 <dma_init_rx_symbols+0x64>)
	rx_dma_lli1.next_lli = (uint32_t)&rx_dma_lli2;
    7496:	4b15      	ldr	r3, [pc, #84]	; (74ec <dma_init_rx_symbols+0x68>)
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	rx_dma_lli2.src = (uint32_t)&(DIO_SSP_DR);
	rx_dma_lli2.dest = (uint32_t)&rxbuf2[0];
    7498:	4d15      	ldr	r5, [pc, #84]	; (74f0 <dma_init_rx_symbols+0x6c>)
	rx_dma_lli1.src = (uint32_t)&(DIO_SSP_DR);
    749a:	6014      	str	r4, [r2, #0]
	rx_dma_lli2.next_lli = (uint32_t)&rx_dma_lli1;
    749c:	e9c3 5201 	strd	r5, r2, [r3, #4]
	rx_dma_lli1.next_lli = (uint32_t)&rx_dma_lli2;
    74a0:	6093      	str	r3, [r2, #8]
	rx_dma_lli1.dest = (uint32_t)&rxbuf1[0];
    74a2:	6051      	str	r1, [r2, #4]
	rx_dma_lli1.control = (DMA_SIZE) |
    74a4:	60d0      	str	r0, [r2, #12]
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	/* configure DMA channel 0 */
	DMACC0SrcAddr = rx_dma_lli1.src;
    74a6:	4a13      	ldr	r2, [pc, #76]	; (74f4 <dma_init_rx_symbols+0x70>)
	rx_dma_lli2.src = (uint32_t)&(DIO_SSP_DR);
    74a8:	601c      	str	r4, [r3, #0]
	rx_dma_lli2.control = (DMA_SIZE) |
    74aa:	60d8      	str	r0, [r3, #12]
	DMACC0SrcAddr = rx_dma_lli1.src;
    74ac:	6014      	str	r4, [r2, #0]
	DMACC0DestAddr = rx_dma_lli1.dest;
    74ae:	6051      	str	r1, [r2, #4]
	DMACC0LLI = rx_dma_lli1.next_lli;
    74b0:	6093      	str	r3, [r2, #8]
	DMACC0Control = rx_dma_lli1.control;
	DMACC0Config = DIO_SSP_SRC
    74b2:	f24d 0206 	movw	r2, #53254	; 0xd006
	DMACC0Control = rx_dma_lli1.control;
    74b6:	4b10      	ldr	r3, [pc, #64]	; (74f8 <dma_init_rx_symbols+0x74>)
    74b8:	6018      	str	r0, [r3, #0]
	DMACC0Config = DIO_SSP_SRC
    74ba:	605a      	str	r2, [r3, #4]
	               | (0x2 << 11)       /* peripheral to memory */
	               | DMACCxConfig_IE   /* allow error interrupts */
	               | DMACCxConfig_ITC; /* allow terminal count interrupts */

	rx_tc = 0;
    74bc:	2200      	movs	r2, #0
    74be:	480f      	ldr	r0, [pc, #60]	; (74fc <dma_init_rx_symbols+0x78>)
    74c0:	6002      	str	r2, [r0, #0]
	rx_err = 0;
    74c2:	480f      	ldr	r0, [pc, #60]	; (7500 <dma_init_rx_symbols+0x7c>)
    74c4:	6002      	str	r2, [r0, #0]

	active_rxbuf = &rxbuf1[0];
    74c6:	4a0f      	ldr	r2, [pc, #60]	; (7504 <dma_init_rx_symbols+0x80>)
    74c8:	6011      	str	r1, [r2, #0]
	idle_rxbuf = &rxbuf2[0];
    74ca:	4a0f      	ldr	r2, [pc, #60]	; (7508 <dma_init_rx_symbols+0x84>)
    74cc:	6015      	str	r5, [r2, #0]

	// enable channel
	DMACC0Config |= 1;
    74ce:	685a      	ldr	r2, [r3, #4]
    74d0:	f042 0201 	orr.w	r2, r2, #1
    74d4:	605a      	str	r2, [r3, #4]
}
    74d6:	bd30      	pop	{r4, r5, pc}
    74d8:	50004008 	.word	0x50004008
    74dc:	88009032 	.word	0x88009032
    74e0:	40030008 	.word	0x40030008
    74e4:	1000182d 	.word	0x1000182d
    74e8:	10003aec 	.word	0x10003aec
    74ec:	10003adc 	.word	0x10003adc
    74f0:	100017f1 	.word	0x100017f1
    74f4:	50004100 	.word	0x50004100
    74f8:	5000410c 	.word	0x5000410c
    74fc:	1000134c 	.word	0x1000134c
    7500:	10001860 	.word	0x10001860
    7504:	100013ac 	.word	0x100013ac
    7508:	100014c8 	.word	0x100014c8

0000750c <dma_init_le>:

void dma_init_le(void) {
    750c:	b530      	push	{r4, r5, lr}
	DMACIntTCClear = 1 << channel;
    750e:	2301      	movs	r3, #1
    7510:	4a12      	ldr	r2, [pc, #72]	; (755c <dma_init_le+0x50>)
    7512:	4913      	ldr	r1, [pc, #76]	; (7560 <dma_init_le+0x54>)
    7514:	6013      	str	r3, [r2, #0]
	DMACIntErrClr  = 1 << channel;
    7516:	6093      	str	r3, [r2, #8]
    7518:	2200      	movs	r2, #0
    751a:	4b12      	ldr	r3, [pc, #72]	; (7564 <dma_init_le+0x58>)
	int i;

	dma_clear_interrupts(0);

	for (i = 0; i < 11; ++i) {
		le_dma_lli[i].src = (uint32_t)&(DIO_SSP_DR);
    751c:	4d12      	ldr	r5, [pc, #72]	; (7568 <dma_init_le+0x5c>)
		le_dma_lli[i].dest = (uint32_t)&rxbuf1[4 * i];
		le_dma_lli[i].next_lli = i < 10 ? (uint32_t)&le_dma_lli[i+1] : 0;
		le_dma_lli[i].control = 4 |
    751e:	4813      	ldr	r0, [pc, #76]	; (756c <dma_init_le+0x60>)
		le_dma_lli[i].next_lli = i < 10 ? (uint32_t)&le_dma_lli[i+1] : 0;
    7520:	2a0a      	cmp	r2, #10
    7522:	bf14      	ite	ne
    7524:	461c      	movne	r4, r3
    7526:	2400      	moveq	r4, #0
    7528:	3201      	adds	r2, #1
	for (i = 0; i < 11; ++i) {
    752a:	2a0b      	cmp	r2, #11
		le_dma_lli[i].dest = (uint32_t)&rxbuf1[4 * i];
    752c:	e943 5104 	strd	r5, r1, [r3, #-16]
		le_dma_lli[i].control = 4 |
    7530:	e943 4002 	strd	r4, r0, [r3, #-8]
	for (i = 0; i < 11; ++i) {
    7534:	f101 0104 	add.w	r1, r1, #4
    7538:	f103 0310 	add.w	r3, r3, #16
    753c:	d1f0      	bne.n	7520 <dma_init_le+0x14>
				DMACCxControl_DI | /* destination increment */
				DMACCxControl_I;   /* terminal count interrupt enable */
	}

	/* configure DMA channel 0 */
	DMACC0SrcAddr = le_dma_lli[0].src;
    753e:	4b0c      	ldr	r3, [pc, #48]	; (7570 <dma_init_le+0x64>)
    7540:	4a0c      	ldr	r2, [pc, #48]	; (7574 <dma_init_le+0x68>)
    7542:	6819      	ldr	r1, [r3, #0]
    7544:	6011      	str	r1, [r2, #0]
	DMACC0DestAddr = le_dma_lli[0].dest;
    7546:	6859      	ldr	r1, [r3, #4]
    7548:	6051      	str	r1, [r2, #4]
	DMACC0LLI = le_dma_lli[0].next_lli;
    754a:	6899      	ldr	r1, [r3, #8]
    754c:	6091      	str	r1, [r2, #8]
	DMACC0Control = le_dma_lli[0].control;
    754e:	68da      	ldr	r2, [r3, #12]
    7550:	4b09      	ldr	r3, [pc, #36]	; (7578 <dma_init_le+0x6c>)
    7552:	601a      	str	r2, [r3, #0]
	DMACC0Config =
    7554:	f24d 0206 	movw	r2, #53254	; 0xd006
    7558:	605a      	str	r2, [r3, #4]
			DIO_SSP_SRC |
			(0x2 << 11) |     /* peripheral to memory */
			DMACCxConfig_IE | /* allow error interrupts */
			DMACCxConfig_ITC; /* allow terminal count interrupts */
}
    755a:	bd30      	pop	{r4, r5, pc}
    755c:	50004008 	.word	0x50004008
    7560:	1000182d 	.word	0x1000182d
    7564:	10003a3c 	.word	0x10003a3c
    7568:	40030008 	.word	0x40030008
    756c:	88001004 	.word	0x88001004
    7570:	10003a2c 	.word	0x10003a2c
    7574:	50004100 	.word	0x50004100
    7578:	5000410c 	.word	0x5000410c

0000757c <dio_ssp_start>:

void dio_ssp_start()
{
	/* make sure the (active low) slave select signal is not active */
	DIO_SSEL_SET;
    757c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    7580:	4b0a      	ldr	r3, [pc, #40]	; (75ac <dio_ssp_start+0x30>)

	/* enable rx DMA on DIO_SSP */
	DIO_SSP_DMACR |= SSPDMACR_RXDMAE;
    7582:	490b      	ldr	r1, [pc, #44]	; (75b0 <dio_ssp_start+0x34>)
	DIO_SSEL_SET;
    7584:	601a      	str	r2, [r3, #0]
	DIO_SSP_DMACR |= SSPDMACR_RXDMAE;
    7586:	680b      	ldr	r3, [r1, #0]
    7588:	f043 0301 	orr.w	r3, r3, #1
    758c:	600b      	str	r3, [r1, #0]
	DIO_SSP_CR1 |= SSPCR1_SSE;
    758e:	f851 3c20 	ldr.w	r3, [r1, #-32]
    7592:	f043 0302 	orr.w	r3, r3, #2
    7596:	f841 3c20 	str.w	r3, [r1, #-32]

	// enable channel
	DMACC0Config |= 1;
    759a:	4906      	ldr	r1, [pc, #24]	; (75b4 <dio_ssp_start+0x38>)
    759c:	680b      	ldr	r3, [r1, #0]
    759e:	f043 0301 	orr.w	r3, r3, #1
    75a2:	600b      	str	r3, [r1, #0]

	/* activate slave select pin */
	DIO_SSEL_CLR;
    75a4:	4b04      	ldr	r3, [pc, #16]	; (75b8 <dio_ssp_start+0x3c>)
    75a6:	601a      	str	r2, [r3, #0]
}
    75a8:	4770      	bx	lr
    75aa:	bf00      	nop
    75ac:	2009c098 	.word	0x2009c098
    75b0:	40030024 	.word	0x40030024
    75b4:	50004110 	.word	0x50004110
    75b8:	2009c09c 	.word	0x2009c09c

000075bc <dio_ssp_stop>:

void dio_ssp_stop()
{
	// disable CC2400's output (active low)
	DIO_SSEL_SET;
    75bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    75c0:	4b0a      	ldr	r3, [pc, #40]	; (75ec <dio_ssp_stop+0x30>)
    75c2:	601a      	str	r2, [r3, #0]

	// disable DMA on SSP; disable SSP ; disable DMA channel
	DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    75c4:	4a0a      	ldr	r2, [pc, #40]	; (75f0 <dio_ssp_stop+0x34>)
    75c6:	6813      	ldr	r3, [r2, #0]
    75c8:	f023 0301 	bic.w	r3, r3, #1
    75cc:	6013      	str	r3, [r2, #0]
	DIO_SSP_CR1 &= ~SSPCR1_SSE;
    75ce:	f852 3c20 	ldr.w	r3, [r2, #-32]
    75d2:	f023 0302 	bic.w	r3, r3, #2
    75d6:	f842 3c20 	str.w	r3, [r2, #-32]
	DMACC0Config = 0;
    75da:	2200      	movs	r2, #0
    75dc:	4b05      	ldr	r3, [pc, #20]	; (75f4 <dio_ssp_stop+0x38>)
    75de:	601a      	str	r2, [r3, #0]
	DMACIntTCClear = 1 << channel;
    75e0:	2301      	movs	r3, #1
    75e2:	4a05      	ldr	r2, [pc, #20]	; (75f8 <dio_ssp_stop+0x3c>)
    75e4:	6013      	str	r3, [r2, #0]
	DMACIntErrClr  = 1 << channel;
    75e6:	6093      	str	r3, [r2, #8]
	/*
	while (SSP1SR & SSPSR_RNE) {
		u8 tmp = (u8)DIO_SSP_DR;
	}
	*/
}
    75e8:	4770      	bx	lr
    75ea:	bf00      	nop
    75ec:	2009c098 	.word	0x2009c098
    75f0:	40030024 	.word	0x40030024
    75f4:	50004110 	.word	0x50004110
    75f8:	50004008 	.word	0x50004008

000075fc <le_dma_init>:
			DMACIntErrClr = (1 << 0);
		}
	}
}

static void le_dma_init(void) {
    75fc:	b530      	push	{r4, r5, lr}
		uint32_t control;
	} dma_lli;
	static dma_lli le_dma_lli[2];

	for (i = 0; i < 2; ++i) {
		le_dma_lli[i].src = (uint32_t)&(DIO_SSP_DR);
    75fe:	4b0c      	ldr	r3, [pc, #48]	; (7630 <le_dma_init+0x34>)
		le_dma_lli[i].dest = (uint32_t)&le_dma_dest[i];
    7600:	490c      	ldr	r1, [pc, #48]	; (7634 <le_dma_init+0x38>)
		le_dma_lli[i].next_lli = (uint32_t)&le_dma_lli[1-i]; // two elements pointing back at each other
		le_dma_lli[i].control = 1 |
    7602:	4a0d      	ldr	r2, [pc, #52]	; (7638 <le_dma_init+0x3c>)
		le_dma_lli[i].src = (uint32_t)&(DIO_SSP_DR);
    7604:	480d      	ldr	r0, [pc, #52]	; (763c <le_dma_init+0x40>)
		le_dma_lli[i].next_lli = (uint32_t)&le_dma_lli[1-i]; // two elements pointing back at each other
    7606:	f103 0410 	add.w	r4, r3, #16
		le_dma_lli[i].dest = (uint32_t)&le_dma_dest[i];
    760a:	1c4d      	adds	r5, r1, #1
		le_dma_lli[i].src = (uint32_t)&(DIO_SSP_DR);
    760c:	e9c3 2003 	strd	r2, r0, [r3, #12]
    7610:	6018      	str	r0, [r3, #0]
		le_dma_lli[i].dest = (uint32_t)&le_dma_dest[i];
    7612:	6059      	str	r1, [r3, #4]
		le_dma_lli[i].next_lli = (uint32_t)&le_dma_lli[1-i]; // two elements pointing back at each other
    7614:	609c      	str	r4, [r3, #8]
		le_dma_lli[i].control = 1 |
    7616:	61da      	str	r2, [r3, #28]
		le_dma_lli[i].next_lli = (uint32_t)&le_dma_lli[1-i]; // two elements pointing back at each other
    7618:	e9c3 5305 	strd	r5, r3, [r3, #20]
				(0 << 21) |        // destination width 8 bits
				DMACCxControl_I;   // terminal count interrupt enable
	}

	// configure DMA channel 0
	DMACC0SrcAddr = le_dma_lli[0].src;
    761c:	4b08      	ldr	r3, [pc, #32]	; (7640 <le_dma_init+0x44>)
    761e:	6018      	str	r0, [r3, #0]
	DMACC0DestAddr = le_dma_lli[0].dest;
    7620:	6059      	str	r1, [r3, #4]
	DMACC0LLI = le_dma_lli[0].next_lli;
    7622:	609c      	str	r4, [r3, #8]
	DMACC0Control = le_dma_lli[0].control;
    7624:	60da      	str	r2, [r3, #12]
	DMACC0Config =
    7626:	f24d 0206 	movw	r2, #53254	; 0xd006
    762a:	611a      	str	r2, [r3, #16]
			DIO_SSP_SRC |
			(0x2 << 11) |     // peripheral to memory
			DMACCxConfig_IE | // allow error interrupts
			DMACCxConfig_ITC; // allow terminal count interrupts
}
    762c:	bd30      	pop	{r4, r5, pc}
    762e:	bf00      	nop
    7630:	10000c24 	.word	0x10000c24
    7634:	10003b40 	.word	0x10003b40
    7638:	80000001 	.word	0x80000001
    763c:	40030008 	.word	0x40030008
    7640:	50004100 	.word	0x50004100

00007644 <timer1_set_match>:
	// clear interrupt handler
	ICER0 = ICER0_ICE_TIMER1;
}

static void timer1_set_match(uint32_t match) {
	T1MR0 = match;
    7644:	4b03      	ldr	r3, [pc, #12]	; (7654 <timer1_set_match+0x10>)
	T1MCR |= TMCR_MR0I;
    7646:	4a04      	ldr	r2, [pc, #16]	; (7658 <timer1_set_match+0x14>)
	T1MR0 = match;
    7648:	6018      	str	r0, [r3, #0]
	T1MCR |= TMCR_MR0I;
    764a:	6813      	ldr	r3, [r2, #0]
    764c:	f043 0301 	orr.w	r3, r3, #1
    7650:	6013      	str	r3, [r2, #0]
}
    7652:	4770      	bx	lr
    7654:	40008018 	.word	0x40008018
    7658:	40008014 	.word	0x40008014

0000765c <timer1_wait_fs_lock>:
static void timer1_clear_match(void) {
	T1MCR &= ~TMCR_MR0I;
}

static void timer1_wait_fs_lock(void) {
	T1MR2 = NOW + USEC(3);
    765c:	4b05      	ldr	r3, [pc, #20]	; (7674 <timer1_wait_fs_lock+0x18>)
    765e:	4a06      	ldr	r2, [pc, #24]	; (7678 <timer1_wait_fs_lock+0x1c>)
    7660:	681b      	ldr	r3, [r3, #0]
    7662:	331e      	adds	r3, #30
    7664:	6013      	str	r3, [r2, #0]
	T1MCR |= TMCR_MR2I;
    7666:	f852 3c0c 	ldr.w	r3, [r2, #-12]
    766a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    766e:	f842 3c0c 	str.w	r3, [r2, #-12]
}
    7672:	4770      	bx	lr
    7674:	40008008 	.word	0x40008008
    7678:	40008020 	.word	0x40008020

0000767c <timer1_wait_buffer>:
static void timer1_cancel_fs_lock(void) {
	T1MCR &= ~TMCR_MR2I;
}

static void timer1_wait_buffer(void) {
	T1MR3 = NOW + USEC(100);
    767c:	4b06      	ldr	r3, [pc, #24]	; (7698 <timer1_wait_buffer+0x1c>)
    767e:	4a07      	ldr	r2, [pc, #28]	; (769c <timer1_wait_buffer+0x20>)
    7680:	681b      	ldr	r3, [r3, #0]
    7682:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
    7686:	6013      	str	r3, [r2, #0]
	T1MCR |= TMCR_MR3I;
    7688:	f852 3c10 	ldr.w	r3, [r2, #-16]
    768c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    7690:	f842 3c10 	str.w	r3, [r2, #-16]
}
    7694:	4770      	bx	lr
    7696:	bf00      	nop
    7698:	40008008 	.word	0x40008008
    769c:	40008024 	.word	0x40008024

000076a0 <extract_field>:
	f->status = 0;

	return 1;
}

static unsigned extract_field(le_rx_t *buf, size_t offset, unsigned size) {
    76a0:	b530      	push	{r4, r5, lr}
	unsigned i, ret = 0;

	// this could just be replaced by memcpy... right?
	for (i = 0; i < size; ++i)
    76a2:	4401      	add	r1, r0
	unsigned i, ret = 0;
    76a4:	2000      	movs	r0, #0
	for (i = 0; i < size; ++i)
    76a6:	4603      	mov	r3, r0
		ret |= buf->data[offset + i] << (i*8);
    76a8:	f811 4b01 	ldrb.w	r4, [r1], #1
    76ac:	00dd      	lsls	r5, r3, #3
	for (i = 0; i < size; ++i)
    76ae:	3301      	adds	r3, #1
		ret |= buf->data[offset + i] << (i*8);
    76b0:	40ac      	lsls	r4, r5
	for (i = 0; i < size; ++i)
    76b2:	429a      	cmp	r2, r3
		ret |= buf->data[offset + i] << (i*8);
    76b4:	ea40 0004 	orr.w	r0, r0, r4
	for (i = 0; i < size; ++i)
    76b8:	d1f6      	bne.n	76a8 <extract_field+0x8>

	return ret;
}
    76ba:	bd30      	pop	{r4, r5, pc}

000076bc <bd_addr_cmp>:
		}
	}
}

// compare a BD addr against target with mask
static int bd_addr_cmp(uint8_t *bd_addr) {
    76bc:	b570      	push	{r4, r5, r6, lr}
	unsigned i;
	for (i = 0; i < 6; ++i)
    76be:	490a      	ldr	r1, [pc, #40]	; (76e8 <bd_addr_cmp+0x2c>)
    76c0:	1e42      	subs	r2, r0, #1
    76c2:	3005      	adds	r0, #5
		if ((bd_addr[i] & le.target_mask[i]) != le.target[i])
    76c4:	460b      	mov	r3, r1
    76c6:	798e      	ldrb	r6, [r1, #6]
    76c8:	f812 4f01 	ldrb.w	r4, [r2, #1]!
    76cc:	781d      	ldrb	r5, [r3, #0]
    76ce:	ea04 0306 	and.w	r3, r4, r6
    76d2:	429d      	cmp	r5, r3
    76d4:	f101 0101 	add.w	r1, r1, #1
    76d8:	d103      	bne.n	76e2 <bd_addr_cmp+0x26>
	for (i = 0; i < 6; ++i)
    76da:	4282      	cmp	r2, r0
    76dc:	d1f2      	bne.n	76c4 <bd_addr_cmp+0x8>
			return 0;
	return 1;
    76de:	2001      	movs	r0, #1
}
    76e0:	bd70      	pop	{r4, r5, r6, pc}
			return 0;
    76e2:	2000      	movs	r0, #0
    76e4:	e7fc      	b.n	76e0 <bd_addr_cmp+0x24>
    76e6:	bf00      	nop
    76e8:	10000488 	.word	0x10000488

000076ec <reset_conn>:
static void reset_conn(void) {
    76ec:	b510      	push	{r4, lr}
	memset(&conn, 0, sizeof(conn));
    76ee:	4c05      	ldr	r4, [pc, #20]	; (7704 <reset_conn+0x18>)
    76f0:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
    76f4:	2100      	movs	r1, #0
    76f6:	f104 0020 	add.w	r0, r4, #32
    76fa:	f7fc fd6f 	bl	41dc <memset>
	conn.access_address = ADVERTISING_AA;
    76fe:	4b02      	ldr	r3, [pc, #8]	; (7708 <reset_conn+0x1c>)
    7700:	6223      	str	r3, [r4, #32]
}
    7702:	bd10      	pop	{r4, pc}
    7704:	10000c24 	.word	0x10000c24
    7708:	8e89bed6 	.word	0x8e89bed6

0000770c <buffer_get>:
static le_rx_t *buffer_get(void) {
    770c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (i = 0; i < LE_BUFFER_POOL_SIZE; ++i) {
    770e:	4a12      	ldr	r2, [pc, #72]	; (7758 <buffer_get+0x4c>)
    7710:	2300      	movs	r3, #0
    7712:	4611      	mov	r1, r2
		if (le_buffer_pool[i].available) {
    7714:	f8d2 4118 	ldr.w	r4, [r2, #280]	; 0x118
    7718:	b1c4      	cbz	r4, 774c <buffer_get+0x40>
			le_buffer_pool[i].available = 0;
    771a:	f44f 7492 	mov.w	r4, #292	; 0x124
    771e:	2600      	movs	r6, #0
    7720:	435c      	muls	r4, r3
    7722:	4d0e      	ldr	r5, [pc, #56]	; (775c <buffer_get+0x50>)
	memset(buf->data, 0, sizeof(buf->data));
    7724:	f44f 7282 	mov.w	r2, #260	; 0x104
			le_buffer_pool[i].available = 0;
    7728:	4425      	add	r5, r4
			buffer_clear(&le_buffer_pool[i]);
    772a:	440c      	add	r4, r1
	memset(buf->data, 0, sizeof(buf->data));
    772c:	4620      	mov	r0, r4
    772e:	4631      	mov	r1, r6
	buf->size = 0;
    7730:	e9c5 66bb 	strd	r6, r6, [r5, #748]	; 0x2ec
			le_buffer_pool[i].available = 0;
    7734:	f8c5 6300 	str.w	r6, [r5, #768]	; 0x300
	memset(buf->data, 0, sizeof(buf->data));
    7738:	f7fc fd50 	bl	41dc <memset>
	buf->rssi_min = INT8_MAX;
    773c:	f248 037f 	movw	r3, #32895	; 0x807f
	buf->rssi_sum = 0;
    7740:	f8c5 6308 	str.w	r6, [r5, #776]	; 0x308
	buf->rssi_min = INT8_MAX;
    7744:	f8a5 3304 	strh.w	r3, [r5, #772]	; 0x304
}
    7748:	4620      	mov	r0, r4
    774a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (i = 0; i < LE_BUFFER_POOL_SIZE; ++i) {
    774c:	3301      	adds	r3, #1
    774e:	2b04      	cmp	r3, #4
    7750:	f502 7292 	add.w	r2, r2, #292	; 0x124
    7754:	d1de      	bne.n	7714 <buffer_get+0x8>
    7756:	e7f7      	b.n	7748 <buffer_get+0x3c>
    7758:	10000e0c 	.word	0x10000e0c
    775c:	10000c24 	.word	0x10000c24

00007760 <le_cc2400_init_rf>:
static void le_cc2400_init_rf(void) {
    7760:	b510      	push	{r4, lr}
	uint32_t sync = rbit(conn.access_address);
    7762:	4b1b      	ldr	r3, [pc, #108]	; (77d0 <le_cc2400_init_rf+0x70>)
    7764:	6a18      	ldr	r0, [r3, #32]
    7766:	f002 f91d 	bl	99a4 <rbit>
    776a:	4604      	mov	r4, r0
	cc2400_set(MANAND,  0x7ffe);
    776c:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    7770:	200d      	movs	r0, #13
    7772:	f002 fa0c 	bl	9b8e <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    7776:	f642 3122 	movw	r1, #11042	; 0x2b22
    777a:	2012      	movs	r0, #18
    777c:	f002 fa07 	bl	9b8e <cc2400_set>
	cc2400_set(MDMTST0, 0x124b);
    7780:	f241 214b 	movw	r1, #4683	; 0x124b
    7784:	2014      	movs	r0, #20
    7786:	f002 fa02 	bl	9b8e <cc2400_set>
	cc2400_set(GRMDM,   grmdm);
    778a:	f244 41e1 	movw	r1, #17633	; 0x44e1
    778e:	2020      	movs	r0, #32
    7790:	f002 f9fd 	bl	9b8e <cc2400_set>
	cc2400_set(SYNCL,   sync & 0xffff);
    7794:	202c      	movs	r0, #44	; 0x2c
    7796:	b2a1      	uxth	r1, r4
    7798:	f002 f9f9 	bl	9b8e <cc2400_set>
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);
    779c:	202d      	movs	r0, #45	; 0x2d
    779e:	0c21      	lsrs	r1, r4, #16
    77a0:	f002 f9f5 	bl	9b8e <cc2400_set>
	cc2400_set(FSDIV,   rf_channel - 1); // 1 MHz IF
    77a4:	4b0b      	ldr	r3, [pc, #44]	; (77d4 <le_cc2400_init_rf+0x74>)
    77a6:	2002      	movs	r0, #2
    77a8:	8819      	ldrh	r1, [r3, #0]
    77aa:	3901      	subs	r1, #1
    77ac:	b289      	uxth	r1, r1
    77ae:	f002 f9ee 	bl	9b8e <cc2400_set>
	cc2400_set(MDMCTRL, mdmctrl);
    77b2:	2140      	movs	r1, #64	; 0x40
    77b4:	2003      	movs	r0, #3
    77b6:	f002 f9ea 	bl	9b8e <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    77ba:	f002 fa81 	bl	9cc0 <cc2400_status>
    77be:	0643      	lsls	r3, r0, #25
    77c0:	d5fb      	bpl.n	77ba <le_cc2400_init_rf+0x5a>
	cc2400_strobe(SFSON);
    77c2:	2061      	movs	r0, #97	; 0x61
    77c4:	f002 fa83 	bl	9cce <cc2400_strobe>
}
    77c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	timer1_wait_fs_lock();
    77cc:	f7ff bf46 	b.w	765c <timer1_wait_fs_lock>
    77d0:	10000c24 	.word	0x10000c24
    77d4:	10003b2c 	.word	0x10003b2c

000077d8 <change_channel>:
static void change_channel(void) {
    77d8:	b570      	push	{r4, r5, r6, lr}
	cc2400_strobe(SRFOFF);
    77da:	2064      	movs	r0, #100	; 0x64
    77dc:	f002 fa77 	bl	9cce <cc2400_strobe>
	DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    77e0:	4a26      	ldr	r2, [pc, #152]	; (787c <change_channel+0xa4>)
    77e2:	6813      	ldr	r3, [r2, #0]
		uint8_t tmp = (uint8_t)DIO_SSP_DR;
    77e4:	3a1c      	subs	r2, #28
	DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    77e6:	f023 0301 	bic.w	r3, r3, #1
    77ea:	61d3      	str	r3, [r2, #28]
	while (SSP1SR & SSPSR_RNE) {
    77ec:	4b24      	ldr	r3, [pc, #144]	; (7880 <change_channel+0xa8>)
    77ee:	681c      	ldr	r4, [r3, #0]
    77f0:	f014 0404 	ands.w	r4, r4, #4
    77f4:	d12c      	bne.n	7850 <change_channel+0x78>
	buffer_clear(current_rxbuf);
    77f6:	4d23      	ldr	r5, [pc, #140]	; (7884 <change_channel+0xac>)
	memset(buf->data, 0, sizeof(buf->data));
    77f8:	f44f 7282 	mov.w	r2, #260	; 0x104
	buffer_clear(current_rxbuf);
    77fc:	f8d5 6678 	ldr.w	r6, [r5, #1656]	; 0x678
	memset(buf->data, 0, sizeof(buf->data));
    7800:	4621      	mov	r1, r4
    7802:	4630      	mov	r0, r6
	buf->size = 0;
    7804:	e9c6 4441 	strd	r4, r4, [r6, #260]	; 0x104
	memset(buf->data, 0, sizeof(buf->data));
    7808:	f7fc fce8 	bl	41dc <memset>
	buf->rssi_min = INT8_MAX;
    780c:	f248 037f 	movw	r3, #32895	; 0x807f
	buf->rssi_sum = 0;
    7810:	f8c6 4120 	str.w	r4, [r6, #288]	; 0x120
	buf->rssi_min = INT8_MAX;
    7814:	f8a6 311c 	strh.w	r3, [r6, #284]	; 0x11c
	le_dma_init();
    7818:	f7ff fef0 	bl	75fc <le_dma_init>
	dio_ssp_start();
    781c:	f7ff feae 	bl	757c <dio_ssp_start>
	if (conn.access_address == ADVERTISING_AA) {
    7820:	6a2a      	ldr	r2, [r5, #32]
    7822:	4b19      	ldr	r3, [pc, #100]	; (7888 <change_channel+0xb0>)
    7824:	429a      	cmp	r2, r3
    7826:	d115      	bne.n	7854 <change_channel+0x7c>
		switch (le_adv_channel) {
    7828:	f640 127a 	movw	r2, #2426	; 0x97a
    782c:	4b17      	ldr	r3, [pc, #92]	; (788c <change_channel+0xb4>)
    782e:	881b      	ldrh	r3, [r3, #0]
    7830:	b29b      	uxth	r3, r3
    7832:	4293      	cmp	r3, r2
    7834:	d020      	beq.n	7878 <change_channel+0xa0>
			case 2480: channel_idx = 39; break;
    7836:	f5b3 6f1b 	cmp.w	r3, #2480	; 0x9b0
    783a:	bf14      	ite	ne
    783c:	2025      	movne	r0, #37	; 0x25
    783e:	2027      	moveq	r0, #39	; 0x27
	rf_channel = btle_channel_index_to_phys(channel_idx);
    7840:	f7ff faeb 	bl	6e1a <btle_channel_index_to_phys>
}
    7844:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	rf_channel = btle_channel_index_to_phys(channel_idx);
    7848:	4b11      	ldr	r3, [pc, #68]	; (7890 <change_channel+0xb8>)
    784a:	8018      	strh	r0, [r3, #0]
	le_cc2400_init_rf();
    784c:	f7ff bf88 	b.w	7760 <le_cc2400_init_rf>
		uint8_t tmp = (uint8_t)DIO_SSP_DR;
    7850:	6811      	ldr	r1, [r2, #0]
    7852:	e7cc      	b.n	77ee <change_channel+0x16>
		conn.channel_idx = (conn.channel_idx + conn.hop_increment) % 37;
    7854:	2225      	movs	r2, #37	; 0x25
    7856:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    785a:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
		channel_idx = le_map_channel(conn.channel_idx, &conn.remapping);
    785e:	f105 0140 	add.w	r1, r5, #64	; 0x40
		conn.channel_idx = (conn.channel_idx + conn.hop_increment) % 37;
    7862:	4403      	add	r3, r0
    7864:	fbb3 f0f2 	udiv	r0, r3, r2
    7868:	fb02 3010 	mls	r0, r2, r0, r3
    786c:	b2c0      	uxtb	r0, r0
    786e:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
		channel_idx = le_map_channel(conn.channel_idx, &conn.remapping);
    7872:	f7ff fbb2 	bl	6fda <le_map_channel>
    7876:	e7e3      	b.n	7840 <change_channel+0x68>
		switch (le_adv_channel) {
    7878:	2026      	movs	r0, #38	; 0x26
    787a:	e7e1      	b.n	7840 <change_channel+0x68>
    787c:	40030024 	.word	0x40030024
    7880:	4003000c 	.word	0x4003000c
    7884:	10000c24 	.word	0x10000c24
    7888:	8e89bed6 	.word	0x8e89bed6
    788c:	100004a0 	.word	0x100004a0
    7890:	10003b2c 	.word	0x10003b2c

00007894 <finish_conn_event>:
static void finish_conn_event(void) {
    7894:	b570      	push	{r4, r5, r6, lr}
	if (conn_event.num_packets == 2) {
    7896:	4a29      	ldr	r2, [pc, #164]	; (793c <finish_conn_event+0xa8>)
    7898:	4b29      	ldr	r3, [pc, #164]	; (7940 <finish_conn_event+0xac>)
    789a:	6854      	ldr	r4, [r2, #4]
    789c:	4829      	ldr	r0, [pc, #164]	; (7944 <finish_conn_event+0xb0>)
    789e:	2c02      	cmp	r4, #2
    78a0:	d11e      	bne.n	78e0 <finish_conn_event+0x4c>
		last_anchor = conn_event.anchor;
    78a2:	6815      	ldr	r5, [r2, #0]
		conn.anchor_set = 1;
    78a4:	2101      	movs	r1, #1
		conn.last_anchor = last_anchor;
    78a6:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
		conn.anchor_set = 1;
    78aa:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	if (conn_event.num_packets > 0) {
    78ae:	b114      	cbz	r4, 78b6 <finish_conn_event+0x22>
		conn.last_packet_ts = NOW;
    78b0:	6801      	ldr	r1, [r0, #0]
    78b2:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	conn_event.num_packets = 0;
    78b6:	2100      	movs	r1, #0
	conn_event.opened = 0;
    78b8:	e9c2 1101 	strd	r1, r1, [r2, #4]
	++conn.conn_event_counter;
    78bc:	f8b3 210c 	ldrh.w	r2, [r3, #268]	; 0x10c
    78c0:	3201      	adds	r2, #1
    78c2:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
	if (NOW - conn.last_packet_ts > conn.supervision_timeout) {
    78c6:	6802      	ldr	r2, [r0, #0]
    78c8:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    78cc:	1a12      	subs	r2, r2, r0
    78ce:	6b58      	ldr	r0, [r3, #52]	; 0x34
    78d0:	4282      	cmp	r2, r0
    78d2:	d923      	bls.n	791c <finish_conn_event+0x88>
		reset_conn();
    78d4:	f7ff ff0a 	bl	76ec <reset_conn>
}
    78d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		change_channel();
    78dc:	f7ff bf7c 	b.w	77d8 <change_channel>
	else if (conn_event.num_packets == 1 && conn.anchor_set) {
    78e0:	2c01      	cmp	r4, #1
    78e2:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    78e6:	d110      	bne.n	790a <finish_conn_event+0x76>
    78e8:	b189      	cbz	r1, 790e <finish_conn_event+0x7a>
		uint32_t estimated_anchor = conn.last_anchor + conn.conn_interval;
    78ea:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    78ee:	6b1e      	ldr	r6, [r3, #48]	; 0x30
    78f0:	6815      	ldr	r5, [r2, #0]
    78f2:	4431      	add	r1, r6
		delta += ANCHOR_EPSILON;
    78f4:	311e      	adds	r1, #30
    78f6:	1b49      	subs	r1, r1, r5
		if (delta < 2 * ANCHOR_EPSILON) {
    78f8:	293b      	cmp	r1, #59	; 0x3b
    78fa:	d9d3      	bls.n	78a4 <finish_conn_event+0x10>
		conn.last_anchor += conn.conn_interval;
    78fc:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    7900:	6b1d      	ldr	r5, [r3, #48]	; 0x30
    7902:	4429      	add	r1, r5
    7904:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    7908:	e7d1      	b.n	78ae <finish_conn_event+0x1a>
	else if (conn.anchor_set) {
    790a:	2900      	cmp	r1, #0
    790c:	d1f6      	bne.n	78fc <finish_conn_event+0x68>
		conn.last_anchor = conn_event.anchor;
    790e:	6811      	ldr	r1, [r2, #0]
    7910:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
		conn.last_packet_ts = NOW; // FIXME gross hack
    7914:	6801      	ldr	r1, [r0, #0]
    7916:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
    791a:	e7c8      	b.n	78ae <finish_conn_event+0x1a>
	else if (cancel_follow) {
    791c:	4a0a      	ldr	r2, [pc, #40]	; (7948 <finish_conn_event+0xb4>)
    791e:	6810      	ldr	r0, [r2, #0]
    7920:	b108      	cbz	r0, 7926 <finish_conn_event+0x92>
		cancel_follow = 0;
    7922:	6011      	str	r1, [r2, #0]
    7924:	e7d6      	b.n	78d4 <finish_conn_event+0x40>
		timer1_set_match(conn.last_anchor + conn.conn_interval - RX_WARMUP_TIME);
    7926:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
    792a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
    792c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		timer1_set_match(conn.last_anchor + conn.conn_interval - RX_WARMUP_TIME);
    7930:	4418      	add	r0, r3
    7932:	f6a0 30b8 	subw	r0, r0, #3000	; 0xbb8
    7936:	f7ff be85 	b.w	7644 <timer1_set_match>
    793a:	bf00      	nop
    793c:	10003b30 	.word	0x10003b30
    7940:	10000c24 	.word	0x10000c24
    7944:	40008008 	.word	0x40008008
    7948:	10000b64 	.word	0x10000b64

0000794c <get_next_bit>:
 *  requires \valid(TAPE+(0..(TAPE_LEN-1)));
 *  requires \valid(p.fsm_table+(0..(p.table_length-1)));
 *  requires cur_byte_pos < TAPE_LEN;
 *  assigns cur_byte_pos, cur_bit_pos;
 */
bool get_next_bit() {
    794c:	b508      	push	{r3, lr}
    bool cur_symbol;
    if (cur_byte_pos >= TAPE_LEN) {
    794e:	4a11      	ldr	r2, [pc, #68]	; (7994 <get_next_bit+0x48>)
    7950:	4b11      	ldr	r3, [pc, #68]	; (7998 <get_next_bit+0x4c>)
    7952:	f8d2 167c 	ldr.w	r1, [r2, #1660]	; 0x67c
    7956:	681b      	ldr	r3, [r3, #0]
    7958:	4299      	cmp	r1, r3
    795a:	db04      	blt.n	7966 <get_next_bit+0x1a>
        debug_printf("cur_bit_pos: byte >= TAPE_LEN: %d\n", cur_byte_pos);
    795c:	480f      	ldr	r0, [pc, #60]	; (799c <get_next_bit+0x50>)
    795e:	f001 fb73 	bl	9048 <debug_printf>
        return 0;
    7962:	2000      	movs	r0, #0
    if (cur_bit_pos >= 8) {
        cur_bit_pos = cur_bit_pos % 8;
        cur_byte_pos++;
    }
    return cur_symbol;
}
    7964:	bd08      	pop	{r3, pc}
    char cur_char = TAPE[cur_byte_pos];
    7966:	480e      	ldr	r0, [pc, #56]	; (79a0 <get_next_bit+0x54>)
    cur_symbol = 1 & (cur_char >> cur_bit_pos);
    7968:	f8d2 3680 	ldr.w	r3, [r2, #1664]	; 0x680
    char cur_char = TAPE[cur_byte_pos];
    796c:	6800      	ldr	r0, [r0, #0]
    cur_symbol = 1 & (cur_char >> cur_bit_pos);
    796e:	5c40      	ldrb	r0, [r0, r1]
    7970:	4118      	asrs	r0, r3
    cur_bit_pos++;
    7972:	3301      	adds	r3, #1
    if (cur_bit_pos >= 8) {
    7974:	2b07      	cmp	r3, #7
        cur_bit_pos = cur_bit_pos % 8;
    7976:	bfc4      	itt	gt
    7978:	f003 0307 	andgt.w	r3, r3, #7
        cur_byte_pos++;
    797c:	3101      	addgt	r1, #1
    cur_symbol = 1 & (cur_char >> cur_bit_pos);
    797e:	f000 0001 	and.w	r0, r0, #1
    cur_bit_pos++;
    7982:	bfd2      	itee	le
    7984:	f8c2 3680 	strle.w	r3, [r2, #1664]	; 0x680
        cur_bit_pos = cur_bit_pos % 8;
    7988:	f8c2 3680 	strgt.w	r3, [r2, #1664]	; 0x680
        cur_byte_pos++;
    798c:	f8c2 167c 	strgt.w	r1, [r2, #1660]	; 0x67c
    7990:	e7e8      	b.n	7964 <get_next_bit+0x18>
    7992:	bf00      	nop
    7994:	10000c24 	.word	0x10000c24
    7998:	10003b3c 	.word	0x10003b3c
    799c:	0000b58e 	.word	0x0000b58e
    79a0:	10003b44 	.word	0x10003b44

000079a4 <is_tape_available>:

bool is_tape_available() {
    if ((cur_byte_pos + 1) < TAPE_LEN) {
    79a4:	4a09      	ldr	r2, [pc, #36]	; (79cc <is_tape_available+0x28>)
    79a6:	490a      	ldr	r1, [pc, #40]	; (79d0 <is_tape_available+0x2c>)
    79a8:	f8d2 367c 	ldr.w	r3, [r2, #1660]	; 0x67c
    79ac:	6809      	ldr	r1, [r1, #0]
    79ae:	3301      	adds	r3, #1
    79b0:	428b      	cmp	r3, r1
    79b2:	db07      	blt.n	79c4 <is_tape_available+0x20>
        // some bytes remaining
        return 1;
    } else {
        if ((cur_byte_pos + 1) == TAPE_LEN) {
    79b4:	d108      	bne.n	79c8 <is_tape_available+0x24>
            // some bits left
            if (cur_bit_pos < 7) {
    79b6:	f8d2 0680 	ldr.w	r0, [r2, #1664]	; 0x680
    79ba:	2806      	cmp	r0, #6
    79bc:	bfcc      	ite	gt
    79be:	2000      	movgt	r0, #0
    79c0:	2001      	movle	r0, #1
    79c2:	4770      	bx	lr
        return 1;
    79c4:	2001      	movs	r0, #1
    79c6:	4770      	bx	lr
                return 1;
            }
        }
    }
    return 0;
    79c8:	2000      	movs	r0, #0
}
    79ca:	4770      	bx	lr
    79cc:	10000c24 	.word	0x10000c24
    79d0:	10003b3c 	.word	0x10003b3c

000079d4 <set_pos_end>:

void set_pos_end(parsed_result* r)
{
    r->end_bit  = cur_bit_pos;
    79d4:	4b03      	ldr	r3, [pc, #12]	; (79e4 <set_pos_end+0x10>)
    79d6:	f8d3 2680 	ldr.w	r2, [r3, #1664]	; 0x680
    r->end_byte = cur_byte_pos;
    79da:	f8d3 367c 	ldr.w	r3, [r3, #1660]	; 0x67c
    r->end_bit  = cur_bit_pos;
    79de:	60c2      	str	r2, [r0, #12]
    r->end_byte = cur_byte_pos;
    79e0:	6083      	str	r3, [r0, #8]
    return;
}
    79e2:	4770      	bx	lr
    79e4:	10000c24 	.word	0x10000c24

000079e8 <set_pos_start>:

void set_pos_start(parsed_result* r)
{
    r->start_bit  = cur_bit_pos;
    79e8:	4b03      	ldr	r3, [pc, #12]	; (79f8 <set_pos_start+0x10>)
    79ea:	f8d3 2680 	ldr.w	r2, [r3, #1664]	; 0x680
    r->start_byte = cur_byte_pos;
    79ee:	f8d3 367c 	ldr.w	r3, [r3, #1660]	; 0x67c
    r->start_bit  = cur_bit_pos;
    79f2:	6042      	str	r2, [r0, #4]
    r->start_byte = cur_byte_pos;
    79f4:	6003      	str	r3, [r0, #0]
    return;
}
    79f6:	4770      	bx	lr
    79f8:	10000c24 	.word	0x10000c24

000079fc <get_next_byte>:

/*@ requires TAPE_LEN >= 0
*/
unsigned char get_next_byte() {
    79fc:	b508      	push	{r3, lr}
    if (cur_byte_pos >= TAPE_LEN) {
    79fe:	4b09      	ldr	r3, [pc, #36]	; (7a24 <get_next_byte+0x28>)
    7a00:	4a09      	ldr	r2, [pc, #36]	; (7a28 <get_next_byte+0x2c>)
    7a02:	f8d3 167c 	ldr.w	r1, [r3, #1660]	; 0x67c
    7a06:	6812      	ldr	r2, [r2, #0]
    7a08:	4291      	cmp	r1, r2
    7a0a:	db04      	blt.n	7a16 <get_next_byte+0x1a>
        debug_printf("cur_byte_pos: >= TAPE_LEN: %d \n", cur_byte_pos);
    7a0c:	4807      	ldr	r0, [pc, #28]	; (7a2c <get_next_byte+0x30>)
    7a0e:	f001 fb1b 	bl	9048 <debug_printf>
        return 0;
    7a12:	2000      	movs	r0, #0
    bool cur_symbol;
    char cur_char = TAPE[cur_byte_pos];
    // printf("Read %d from tape at loc %d\n", cur_char, cur_byte_pos);
    cur_byte_pos++;
    return cur_char;
}
    7a14:	bd08      	pop	{r3, pc}
    char cur_char = TAPE[cur_byte_pos];
    7a16:	4a06      	ldr	r2, [pc, #24]	; (7a30 <get_next_byte+0x34>)
    7a18:	6812      	ldr	r2, [r2, #0]
    7a1a:	5c50      	ldrb	r0, [r2, r1]
    cur_byte_pos++;
    7a1c:	3101      	adds	r1, #1
    7a1e:	f8c3 167c 	str.w	r1, [r3, #1660]	; 0x67c
    return cur_char;
    7a22:	e7f7      	b.n	7a14 <get_next_byte+0x18>
    7a24:	10000c24 	.word	0x10000c24
    7a28:	10003b3c 	.word	0x10003b3c
    7a2c:	0000b5b1 	.word	0x0000b5b1
    7a30:	10003b44 	.word	0x10003b44

00007a34 <tag_cons>:

// set the value of the register to T
int tag_cons(dataunit unit, int size) {
    7a34:	b570      	push	{r4, r5, r6, lr}
    7a36:	460e      	mov	r6, r1
    unsigned int tag_val = 0;

    if (unit == BIT) {
    7a38:	4605      	mov	r5, r0
    7a3a:	b1d0      	cbz	r0, 7a72 <tag_cons+0x3e>
        for (int i = 0; i < size; ++i) {
            tag_val = tag_val | get_next_bit();
            tag_val = tag_val << 1;
        }
    } else {
        if (!(size <= 4)) { debug_write("size error in tag_cons\n");}
    7a3c:	2904      	cmp	r1, #4
    7a3e:	dd02      	ble.n	7a46 <tag_cons+0x12>
    7a40:	480d      	ldr	r0, [pc, #52]	; (7a78 <tag_cons+0x44>)
    7a42:	f001 faef 	bl	9024 <debug_write>
    unsigned int tag_val = 0;
    7a46:	2500      	movs	r5, #0
    7a48:	462c      	mov	r4, r5
        for (int i = 0; i < size; ++i) {
    7a4a:	42b5      	cmp	r5, r6
    7a4c:	da0b      	bge.n	7a66 <tag_cons+0x32>
            tag_val = get_next_byte();
    7a4e:	f7ff ffd5 	bl	79fc <get_next_byte>
        for (int i = 0; i < size; ++i) {
    7a52:	3501      	adds	r5, #1
            tag_val = tag_val << 8;
    7a54:	0204      	lsls	r4, r0, #8
        for (int i = 0; i < size; ++i) {
    7a56:	e7f8      	b.n	7a4a <tag_cons+0x16>
            tag_val = tag_val | get_next_bit();
    7a58:	f7ff ff78 	bl	794c <get_next_bit>
    7a5c:	4304      	orrs	r4, r0
            tag_val = tag_val << 1;
    7a5e:	0064      	lsls	r4, r4, #1
        for (int i = 0; i < size; ++i) {
    7a60:	3501      	adds	r5, #1
    7a62:	42b5      	cmp	r5, r6
    7a64:	dbf8      	blt.n	7a58 <tag_cons+0x24>
        }
    }
    debug_printf("| tagval: %d \n", tag_val);
    7a66:	4621      	mov	r1, r4
    7a68:	4804      	ldr	r0, [pc, #16]	; (7a7c <tag_cons+0x48>)
    7a6a:	f001 faed 	bl	9048 <debug_printf>
    return tag_val;
};
    7a6e:	4620      	mov	r0, r4
    7a70:	bd70      	pop	{r4, r5, r6, pc}
    unsigned int tag_val = 0;
    7a72:	4604      	mov	r4, r0
    7a74:	e7f5      	b.n	7a62 <tag_cons+0x2e>
    7a76:	bf00      	nop
    7a78:	0000b5d1 	.word	0x0000b5d1
    7a7c:	0000b5e9 	.word	0x0000b5e9

00007a80 <len_cons>:

// set the value of the counter register to L.
int len_cons(dataunit unit, endianness e, int size) {
    7a80:	b570      	push	{r4, r5, r6, lr}
    7a82:	4616      	mov	r6, r2
    int len_val = 0;
    if (unit == BIT) {
    7a84:	4605      	mov	r5, r0
    7a86:	b1b0      	cbz	r0, 7ab6 <len_cons+0x36>
            len_val = len_val | get_next_bit();
            len_val = len_val << 1;
        }
    } else {
        int i = 0;
        if (!(size <= 4)) { debug_write("size error in tag_cons\n");}
    7a88:	2a04      	cmp	r2, #4
    7a8a:	dd02      	ble.n	7a92 <len_cons+0x12>
    7a8c:	480b      	ldr	r0, [pc, #44]	; (7abc <len_cons+0x3c>)
    7a8e:	f001 fac9 	bl	9024 <debug_write>
    int len_val = 0;
    7a92:	2500      	movs	r5, #0
    7a94:	462c      	mov	r4, r5
        for (i = 0; i < size; ++i) {
    7a96:	42ae      	cmp	r6, r5
    7a98:	dd0b      	ble.n	7ab2 <len_cons+0x32>
            len_val = get_next_byte();
    7a9a:	f7ff ffaf 	bl	79fc <get_next_byte>
        for (i = 0; i < size; ++i) {
    7a9e:	3501      	adds	r5, #1
            len_val = len_val << 8;
    7aa0:	0204      	lsls	r4, r0, #8
        for (i = 0; i < size; ++i) {
    7aa2:	e7f8      	b.n	7a96 <len_cons+0x16>
            len_val = len_val | get_next_bit();
    7aa4:	f7ff ff52 	bl	794c <get_next_bit>
    7aa8:	4304      	orrs	r4, r0
            len_val = len_val << 1;
    7aaa:	0064      	lsls	r4, r4, #1
        for (i = 0; i < size; ++i) {
    7aac:	3501      	adds	r5, #1
    7aae:	42b5      	cmp	r5, r6
    7ab0:	dbf8      	blt.n	7aa4 <len_cons+0x24>
    }
    // TODO: verify by lookahead

    // return read value
    return len_val;
};
    7ab2:	4620      	mov	r0, r4
    7ab4:	bd70      	pop	{r4, r5, r6, pc}
    int len_val = 0;
    7ab6:	4604      	mov	r4, r0
    7ab8:	e7f9      	b.n	7aae <len_cons+0x2e>
    7aba:	bf00      	nop
    7abc:	0000b5d1 	.word	0x0000b5d1

00007ac0 <repeat_cons>:

// make lookup table and call that function.
// case function: generate this with code

// repeats construct r, n times
parsed_result repeat_cons(dataunit u, int n, int min, int max) {
    7ac0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7ac4:	b085      	sub	sp, #20
    debug_write("repeat_cons: start\n");
    parsed_result r;
    set_pos_start(&r);
    7ac6:	466f      	mov	r7, sp
parsed_result repeat_cons(dataunit u, int n, int min, int max) {
    7ac8:	4691      	mov	r9, r2
    7aca:	4606      	mov	r6, r0
    debug_write("repeat_cons: start\n");
    7acc:	4828      	ldr	r0, [pc, #160]	; (7b70 <repeat_cons+0xb0>)
parsed_result repeat_cons(dataunit u, int n, int min, int max) {
    7ace:	460d      	mov	r5, r1
    7ad0:	461c      	mov	r4, r3
    7ad2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
    debug_write("repeat_cons: start\n");
    7ad6:	f001 faa5 	bl	9024 <debug_write>
    set_pos_start(&r);
    7ada:	4638      	mov	r0, r7
    7adc:	f7ff ff84 	bl	79e8 <set_pos_start>
    if (n == INF) {
    7ae0:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
    7ae4:	d12e      	bne.n	7b44 <repeat_cons+0x84>
        // at least min items and at most max items
        if (u == BIT) {
    7ae6:	b185      	cbz	r5, 7b0a <repeat_cons+0x4a>

            set_pos_end(&r);
            return r;
        } else {
            int i = 0;
            for (i = 0; i < min; ++i) {
    7ae8:	2500      	movs	r5, #0
    7aea:	42a5      	cmp	r5, r4
    7aec:	db26      	blt.n	7b3c <repeat_cons+0x7c>
    7aee:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
                get_next_byte();
            }

            while (i <= max) {
    7af2:	4544      	cmp	r4, r8
    7af4:	dc0f      	bgt.n	7b16 <repeat_cons+0x56>
                if (is_tape_available()) {
    7af6:	f7ff ff55 	bl	79a4 <is_tape_available>
    7afa:	b960      	cbnz	r0, 7b16 <repeat_cons+0x56>
                    break;
                }
                get_next_byte();
    7afc:	f7ff ff7e 	bl	79fc <get_next_byte>
                i++;
    7b00:	3401      	adds	r4, #1
    7b02:	e7f6      	b.n	7af2 <repeat_cons+0x32>
                get_next_bit();
    7b04:	f7ff ff22 	bl	794c <get_next_bit>
            for (i = 0; i < min; ++i) {
    7b08:	3501      	adds	r5, #1
    7b0a:	42a5      	cmp	r5, r4
    7b0c:	dbfa      	blt.n	7b04 <repeat_cons+0x44>
    7b0e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
            while (i <= max) {
    7b12:	4544      	cmp	r4, r8
    7b14:	dd0a      	ble.n	7b2c <repeat_cons+0x6c>
            set_pos_end(&r);
    7b16:	4638      	mov	r0, r7
    7b18:	f7ff ff5c 	bl	79d4 <set_pos_end>
            return r;
    7b1c:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
    7b20:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
            }
            set_pos_end(&r);
            return r;
        }
    }
};
    7b24:	4630      	mov	r0, r6
    7b26:	b005      	add	sp, #20
    7b28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                if (is_tape_available()) {
    7b2c:	f7ff ff3a 	bl	79a4 <is_tape_available>
    7b30:	2800      	cmp	r0, #0
    7b32:	d1f0      	bne.n	7b16 <repeat_cons+0x56>
                get_next_bit();
    7b34:	f7ff ff0a 	bl	794c <get_next_bit>
                i++;
    7b38:	3401      	adds	r4, #1
    7b3a:	e7ea      	b.n	7b12 <repeat_cons+0x52>
                get_next_byte();
    7b3c:	f7ff ff5e 	bl	79fc <get_next_byte>
            for (i = 0; i < min; ++i) {
    7b40:	3501      	adds	r5, #1
    7b42:	e7d2      	b.n	7aea <repeat_cons+0x2a>
        if (u == BIT) {
    7b44:	b995      	cbnz	r5, 7b6c <repeat_cons+0xac>
            if (!(n <= 8)) {
    7b46:	f1b9 0f08 	cmp.w	r9, #8
    7b4a:	dd02      	ble.n	7b52 <repeat_cons+0x92>
                debug_write("error in  repeat_cons");
    7b4c:	4809      	ldr	r0, [pc, #36]	; (7b74 <repeat_cons+0xb4>)
    7b4e:	f001 fa69 	bl	9024 <debug_write>
            for (i = 0; i < min; ++i) {
    7b52:	2400      	movs	r4, #0
            for (int i = 0; i < n; ++i) {
    7b54:	454c      	cmp	r4, r9
    7b56:	dade      	bge.n	7b16 <repeat_cons+0x56>
                get_next_bit();
    7b58:	f7ff fef8 	bl	794c <get_next_bit>
            for (int i = 0; i < n; ++i) {
    7b5c:	3401      	adds	r4, #1
    7b5e:	e7f9      	b.n	7b54 <repeat_cons+0x94>
                get_next_byte();
    7b60:	f7ff ff4c 	bl	79fc <get_next_byte>
            for (int i = 0; i < n; ++i) {
    7b64:	3401      	adds	r4, #1
    7b66:	454c      	cmp	r4, r9
    7b68:	dbfa      	blt.n	7b60 <repeat_cons+0xa0>
    7b6a:	e7d4      	b.n	7b16 <repeat_cons+0x56>
    7b6c:	2400      	movs	r4, #0
    7b6e:	e7fa      	b.n	7b66 <repeat_cons+0xa6>
    7b70:	0000b5f8 	.word	0x0000b5f8
    7b74:	0000b60c 	.word	0x0000b60c

00007b78 <run_parser>:


// We define a gloabl list of registers which store results.
unsigned int run_parser(unsigned char* input_buffer, int buffer_len) {
    7b78:	b530      	push	{r4, r5, lr}
    7b7a:	b0b3      	sub	sp, #204	; 0xcc
    cur_bit_pos = 0;
    7b7c:	2400      	movs	r4, #0
    7b7e:	4b76      	ldr	r3, [pc, #472]	; (7d58 <run_parser+0x1e0>)
    7b80:	f8c3 4680 	str.w	r4, [r3, #1664]	; 0x680
    cur_byte_pos = 0;
    7b84:	f8c3 467c 	str.w	r4, [r3, #1660]	; 0x67c
    TAPE = input_buffer;
    7b88:	4b74      	ldr	r3, [pc, #464]	; (7d5c <run_parser+0x1e4>)
    7b8a:	6018      	str	r0, [r3, #0]
    TAPE_LEN = buffer_len;
    7b8c:	4b74      	ldr	r3, [pc, #464]	; (7d60 <run_parser+0x1e8>)

    // PDU
    int reg4144 = tag_cons(BIT, 4);
    7b8e:	4620      	mov	r0, r4
    TAPE_LEN = buffer_len;
    7b90:	6019      	str	r1, [r3, #0]
    int reg4144 = tag_cons(BIT, 4);
    7b92:	2104      	movs	r1, #4
    7b94:	f7ff ff4e 	bl	7a34 <tag_cons>
    // // RFU
    int reg4145 = tag_cons(BIT, 1);
    7b98:	2101      	movs	r1, #1
    int reg4144 = tag_cons(BIT, 4);
    7b9a:	4605      	mov	r5, r0
    int reg4145 = tag_cons(BIT, 1);
    7b9c:	4620      	mov	r0, r4
    7b9e:	f7ff ff49 	bl	7a34 <tag_cons>
    // ChSel
    int reg4146 = tag_cons(BIT, 1);
    7ba2:	2101      	movs	r1, #1
    7ba4:	4620      	mov	r0, r4
    7ba6:	f7ff ff45 	bl	7a34 <tag_cons>
    // TxAdd
    int reg4147 = tag_cons(BIT, 1);
    7baa:	2101      	movs	r1, #1
    7bac:	4620      	mov	r0, r4
    7bae:	f7ff ff41 	bl	7a34 <tag_cons>
    // RxAdd
    int reg4148 = tag_cons(BIT, 1);
    7bb2:	2101      	movs	r1, #1
    7bb4:	4620      	mov	r0, r4
    7bb6:	f7ff ff3d 	bl	7a34 <tag_cons>
            len_val = get_next_byte();
    7bba:	f7ff ff1f 	bl	79fc <get_next_byte>
    7bbe:	f7ff ff1d 	bl	79fc <get_next_byte>
    int reg4149 = len_cons(BYTE, LSB, 2);

    debug_printf("| len cons: %d, tag: %04x \n", reg4149, reg4144);
    7bc2:	462a      	mov	r2, r5
    7bc4:	0201      	lsls	r1, r0, #8
    7bc6:	4867      	ldr	r0, [pc, #412]	; (7d64 <run_parser+0x1ec>)
    7bc8:	f001 fa3e 	bl	9048 <debug_printf>

    switch (reg4144) {
    7bcc:	2d08      	cmp	r5, #8
    7bce:	f200 80bf 	bhi.w	7d50 <run_parser+0x1d8>
    7bd2:	e8df f005 	tbb	[pc, r5]
    7bd6:	0522      	.short	0x0522
    7bd8:	31b92093 	.word	0x31b92093
    7bdc:	95bb      	.short	0x95bb
    7bde:	b7          	.byte	0xb7
    7bdf:	00          	.byte	0x00
        case 0b0001: {
                        debug_write("tag 0b0001 and adv_direct_ind\n");
    7be0:	4861      	ldr	r0, [pc, #388]	; (7d68 <run_parser+0x1f0>)
                     }
        case 0b0011: {
                        debug_write("tag 0b0011 and scan_req\n");
                         // :SCAN_REQ
                         // ScanA
                         parsed_result  reg4152 = repeat_cons(BYTE, 6, NINF, INF);
    7be2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
                        debug_write("tag 0b0011 and scan_req\n");
    7be6:	f001 fa1d 	bl	9024 <debug_write>
                         parsed_result  reg4152 = repeat_cons(BYTE, 6, NINF, INF);
    7bea:	f06f 0301 	mvn.w	r3, #1
    7bee:	2206      	movs	r2, #6
    7bf0:	2101      	movs	r1, #1
    7bf2:	9400      	str	r4, [sp, #0]
    7bf4:	a82a      	add	r0, sp, #168	; 0xa8
    7bf6:	f7ff ff63 	bl	7ac0 <repeat_cons>
                         // AdvA
                         parsed_result  reg4153 = repeat_cons(BYTE, 6, NINF, INF);
    7bfa:	f06f 0301 	mvn.w	r3, #1
    7bfe:	2206      	movs	r2, #6
    7c00:	9400      	str	r4, [sp, #0]
    7c02:	2101      	movs	r1, #1
    7c04:	a82e      	add	r0, sp, #184	; 0xb8
    7c06:	f7ff ff5b 	bl	7ac0 <repeat_cons>
                         break;
                     }
        default:
                debug_write("ERROR: None matched case expression!");
    }
    debug_write("parse finished.\n");
    7c0a:	4858      	ldr	r0, [pc, #352]	; (7d6c <run_parser+0x1f4>)
    7c0c:	f001 fa0a 	bl	9024 <debug_write>
    return 0;
};
    7c10:	2000      	movs	r0, #0
    7c12:	b033      	add	sp, #204	; 0xcc
    7c14:	bd30      	pop	{r4, r5, pc}
                        debug_write("tag 0b0011 and scan_req\n");
    7c16:	4856      	ldr	r0, [pc, #344]	; (7d70 <run_parser+0x1f8>)
    7c18:	e7e3      	b.n	7be2 <run_parser+0x6a>
                     debug_write("tag 0000 and ADV_IDV\n");
    7c1a:	4856      	ldr	r0, [pc, #344]	; (7d74 <run_parser+0x1fc>)
                         parsed_result  reg4180 = repeat_cons(BYTE, 6, NINF, INF);
    7c1c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
            debug_write("tag ADV_SCAN_IND\n");
    7c20:	f001 fa00 	bl	9024 <debug_write>
                         parsed_result  reg4180 = repeat_cons(BYTE, 6, NINF, INF);
    7c24:	f06f 0301 	mvn.w	r3, #1
    7c28:	2206      	movs	r2, #6
    7c2a:	2101      	movs	r1, #1
    7c2c:	9400      	str	r4, [sp, #0]
    7c2e:	a82a      	add	r0, sp, #168	; 0xa8
    7c30:	f7ff ff46 	bl	7ac0 <repeat_cons>
                         parsed_result  reg4181 = repeat_cons(BYTE, INF, 0, 31);
    7c34:	231f      	movs	r3, #31
    7c36:	e080      	b.n	7d3a <run_parser+0x1c2>
                         parsed_result  reg4156 = repeat_cons(BYTE, 6, NINF, INF);
    7c38:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
                     debug_write("tag CONNECT_IND\n");
    7c3c:	484e      	ldr	r0, [pc, #312]	; (7d78 <run_parser+0x200>)
    7c3e:	f001 f9f1 	bl	9024 <debug_write>
                         parsed_result  reg4156 = repeat_cons(BYTE, 6, NINF, INF);
    7c42:	f06f 0301 	mvn.w	r3, #1
    7c46:	2206      	movs	r2, #6
    7c48:	2101      	movs	r1, #1
    7c4a:	a802      	add	r0, sp, #8
    7c4c:	9400      	str	r4, [sp, #0]
    7c4e:	f7ff ff37 	bl	7ac0 <repeat_cons>
                         parsed_result  reg4157 = repeat_cons(BYTE, 6, NINF, INF);
    7c52:	f06f 0301 	mvn.w	r3, #1
    7c56:	2206      	movs	r2, #6
    7c58:	2101      	movs	r1, #1
    7c5a:	a806      	add	r0, sp, #24
    7c5c:	9400      	str	r4, [sp, #0]
    7c5e:	f7ff ff2f 	bl	7ac0 <repeat_cons>
                         parsed_result  reg4158 = repeat_cons(BYTE, 4, NINF, INF);
    7c62:	f06f 0301 	mvn.w	r3, #1
    7c66:	2204      	movs	r2, #4
    7c68:	2101      	movs	r1, #1
    7c6a:	a80a      	add	r0, sp, #40	; 0x28
    7c6c:	9400      	str	r4, [sp, #0]
    7c6e:	f7ff ff27 	bl	7ac0 <repeat_cons>
                         parsed_result  reg4159 = repeat_cons(BYTE, 3, NINF, INF);
    7c72:	f06f 0301 	mvn.w	r3, #1
    7c76:	2203      	movs	r2, #3
    7c78:	2101      	movs	r1, #1
    7c7a:	a80e      	add	r0, sp, #56	; 0x38
    7c7c:	9400      	str	r4, [sp, #0]
    7c7e:	f7ff ff1f 	bl	7ac0 <repeat_cons>
                         parsed_result  reg4160 = repeat_cons(BYTE, 1, NINF, INF);
    7c82:	2201      	movs	r2, #1
    7c84:	f06f 0301 	mvn.w	r3, #1
    7c88:	4611      	mov	r1, r2
    7c8a:	a812      	add	r0, sp, #72	; 0x48
    7c8c:	9400      	str	r4, [sp, #0]
    7c8e:	f7ff ff17 	bl	7ac0 <repeat_cons>
                         parsed_result  reg4161 = repeat_cons(BYTE, 2, NINF, INF);
    7c92:	f06f 0301 	mvn.w	r3, #1
    7c96:	2202      	movs	r2, #2
    7c98:	2101      	movs	r1, #1
    7c9a:	a816      	add	r0, sp, #88	; 0x58
    7c9c:	9400      	str	r4, [sp, #0]
    7c9e:	f7ff ff0f 	bl	7ac0 <repeat_cons>
                         parsed_result  reg4162 = repeat_cons(BYTE, 2, NINF, INF);
    7ca2:	f06f 0301 	mvn.w	r3, #1
    7ca6:	2202      	movs	r2, #2
    7ca8:	2101      	movs	r1, #1
    7caa:	a81a      	add	r0, sp, #104	; 0x68
    7cac:	9400      	str	r4, [sp, #0]
    7cae:	f7ff ff07 	bl	7ac0 <repeat_cons>
                         parsed_result  reg4163 = repeat_cons(BYTE, 2, NINF, INF);
    7cb2:	f06f 0301 	mvn.w	r3, #1
    7cb6:	2202      	movs	r2, #2
    7cb8:	2101      	movs	r1, #1
    7cba:	a81e      	add	r0, sp, #120	; 0x78
    7cbc:	9400      	str	r4, [sp, #0]
    7cbe:	f7ff feff 	bl	7ac0 <repeat_cons>
                         parsed_result  reg4164 = repeat_cons(BYTE, 2, NINF, INF);
    7cc2:	f06f 0301 	mvn.w	r3, #1
    7cc6:	2202      	movs	r2, #2
    7cc8:	2101      	movs	r1, #1
    7cca:	a822      	add	r0, sp, #136	; 0x88
    7ccc:	9400      	str	r4, [sp, #0]
    7cce:	f7ff fef7 	bl	7ac0 <repeat_cons>
                         parsed_result  reg4165 = repeat_cons(BYTE, 5, NINF, INF);
    7cd2:	f06f 0301 	mvn.w	r3, #1
    7cd6:	2205      	movs	r2, #5
    7cd8:	2101      	movs	r1, #1
    7cda:	a826      	add	r0, sp, #152	; 0x98
    7cdc:	9400      	str	r4, [sp, #0]
    7cde:	f7ff feef 	bl	7ac0 <repeat_cons>
                         parsed_result  reg4166 = repeat_cons(BYTE, 5, NINF, INF);
    7ce2:	f06f 0301 	mvn.w	r3, #1
    7ce6:	2205      	movs	r2, #5
    7ce8:	2101      	movs	r1, #1
    7cea:	9400      	str	r4, [sp, #0]
    7cec:	a82a      	add	r0, sp, #168	; 0xa8
    7cee:	f7ff fee7 	bl	7ac0 <repeat_cons>
                         parsed_result  reg4167 = repeat_cons(BYTE, 3, NINF, INF);
    7cf2:	f06f 0301 	mvn.w	r3, #1
    7cf6:	2203      	movs	r2, #3
    7cf8:	9400      	str	r4, [sp, #0]
    7cfa:	e782      	b.n	7c02 <run_parser+0x8a>
            debug_write("tag ADV_CONNECT_IND\n");
    7cfc:	481f      	ldr	r0, [pc, #124]	; (7d7c <run_parser+0x204>)
    7cfe:	e78d      	b.n	7c1c <run_parser+0xa4>
            debug_write("tag ADV_EXT_IND\n");
    7d00:	481f      	ldr	r0, [pc, #124]	; (7d80 <run_parser+0x208>)
            debug_write("tag AUX_CONNECT_RSP\n");
    7d02:	f001 f98f 	bl	9024 <debug_write>
                         int reg4174 = len_cons(BIT, LSB, 6);
    7d06:	2100      	movs	r1, #0
    7d08:	2206      	movs	r2, #6
    7d0a:	4608      	mov	r0, r1
    7d0c:	f7ff feb8 	bl	7a80 <len_cons>
                         parsed_result  reg4175 = repeat_cons(BYTE, 2, NINF, INF);
    7d10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
                         int reg4174 = len_cons(BIT, LSB, 6);
    7d14:	4604      	mov	r4, r0
                         parsed_result  reg4175 = repeat_cons(BYTE, 2, NINF, INF);
    7d16:	9300      	str	r3, [sp, #0]
    7d18:	2202      	movs	r2, #2
    7d1a:	f06f 0301 	mvn.w	r3, #1
    7d1e:	2101      	movs	r1, #1
    7d20:	a82a      	add	r0, sp, #168	; 0xa8
    7d22:	f7ff fecd 	bl	7ac0 <repeat_cons>
                         if (reg4174 == 0) {} else {
    7d26:	b13c      	cbz	r4, 7d38 <run_parser+0x1c0>
                             parsed_result  reg4176 = repeat_cons(BYTE, reg4174, 0, 63);
    7d28:	233f      	movs	r3, #63	; 0x3f
    7d2a:	4622      	mov	r2, r4
    7d2c:	9300      	str	r3, [sp, #0]
    7d2e:	2101      	movs	r1, #1
    7d30:	2300      	movs	r3, #0
    7d32:	a82e      	add	r0, sp, #184	; 0xb8
    7d34:	f7ff fec4 	bl	7ac0 <repeat_cons>
                         parsed_result  reg4177 = repeat_cons(BYTE, INF, 0, 254);
    7d38:	23fe      	movs	r3, #254	; 0xfe
    7d3a:	9300      	str	r3, [sp, #0]
    7d3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7d40:	2300      	movs	r3, #0
    7d42:	e75e      	b.n	7c02 <run_parser+0x8a>
            debug_write("tag AUX_CONNECT_RSP\n");
    7d44:	480f      	ldr	r0, [pc, #60]	; (7d84 <run_parser+0x20c>)
    7d46:	e7dc      	b.n	7d02 <run_parser+0x18a>
            debug_write("tag SCAN_RSP\n");
    7d48:	480f      	ldr	r0, [pc, #60]	; (7d88 <run_parser+0x210>)
    7d4a:	e767      	b.n	7c1c <run_parser+0xa4>
            debug_write("tag ADV_SCAN_IND\n");
    7d4c:	480f      	ldr	r0, [pc, #60]	; (7d8c <run_parser+0x214>)
    7d4e:	e765      	b.n	7c1c <run_parser+0xa4>
                debug_write("ERROR: None matched case expression!");
    7d50:	480f      	ldr	r0, [pc, #60]	; (7d90 <run_parser+0x218>)
    7d52:	f001 f967 	bl	9024 <debug_write>
    7d56:	e758      	b.n	7c0a <run_parser+0x92>
    7d58:	10000c24 	.word	0x10000c24
    7d5c:	10003b44 	.word	0x10003b44
    7d60:	10003b3c 	.word	0x10003b3c
    7d64:	0000b622 	.word	0x0000b622
    7d68:	0000b63e 	.word	0x0000b63e
    7d6c:	0000b71d 	.word	0x0000b71d
    7d70:	0000b65d 	.word	0x0000b65d
    7d74:	0000b676 	.word	0x0000b676
    7d78:	0000b68c 	.word	0x0000b68c
    7d7c:	0000b69d 	.word	0x0000b69d
    7d80:	0000b6b2 	.word	0x0000b6b2
    7d84:	0000b6c3 	.word	0x0000b6c3
    7d88:	0000b6d8 	.word	0x0000b6d8
    7d8c:	0000b6e6 	.word	0x0000b6e6
    7d90:	0000b6f8 	.word	0x0000b6f8

00007d94 <le_DMA_IRQHandler>:
void le_DMA_IRQHandler(void) {
    7d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t timestamp = NOW; // sampled early for most accurate measurement
    7d96:	4d6a      	ldr	r5, [pc, #424]	; (7f40 <le_DMA_IRQHandler+0x1ac>)
	if (DMACIntStat & (1 << 0)) {
    7d98:	4b6a      	ldr	r3, [pc, #424]	; (7f44 <le_DMA_IRQHandler+0x1b0>)
	uint32_t timestamp = NOW; // sampled early for most accurate measurement
    7d9a:	682e      	ldr	r6, [r5, #0]
	if (DMACIntStat & (1 << 0)) {
    7d9c:	681b      	ldr	r3, [r3, #0]
    7d9e:	07df      	lsls	r7, r3, #31
    7da0:	d549      	bpl.n	7e36 <le_DMA_IRQHandler+0xa2>
		if (DMACIntTCStat & (1 << 0)) {
    7da2:	4b69      	ldr	r3, [pc, #420]	; (7f48 <le_DMA_IRQHandler+0x1b4>)
    7da4:	681b      	ldr	r3, [r3, #0]
    7da6:	07dc      	lsls	r4, r3, #31
    7da8:	d53e      	bpl.n	7e28 <le_DMA_IRQHandler+0x94>
			DMACIntTCClear = (1 << 0);
    7daa:	2301      	movs	r3, #1
    7dac:	4f67      	ldr	r7, [pc, #412]	; (7f4c <le_DMA_IRQHandler+0x1b8>)
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    7dae:	2006      	movs	r0, #6
			DMACIntTCClear = (1 << 0);
    7db0:	603b      	str	r3, [r7, #0]
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    7db2:	f001 fee3 	bl	9b7c <cc2400_get>
			current_rxbuf->rssi_sum += rssi;
    7db6:	4c66      	ldr	r4, [pc, #408]	; (7f50 <le_DMA_IRQHandler+0x1bc>)
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    7db8:	f340 2007 	sbfx	r0, r0, #8, #8
			current_rxbuf->rssi_sum += rssi;
    7dbc:	f8d4 3678 	ldr.w	r3, [r4, #1656]	; 0x678
    7dc0:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    7dc4:	4402      	add	r2, r0
    7dc6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
			if (rssi < current_rxbuf->rssi_min) current_rxbuf->rssi_min = rssi;
    7dca:	f993 211c 	ldrsb.w	r2, [r3, #284]	; 0x11c
    7dce:	4282      	cmp	r2, r0
			if (rssi > current_rxbuf->rssi_max) current_rxbuf->rssi_max = rssi;
    7dd0:	f993 211d 	ldrsb.w	r2, [r3, #285]	; 0x11d
			if (rssi < current_rxbuf->rssi_min) current_rxbuf->rssi_min = rssi;
    7dd4:	bfc8      	it	gt
    7dd6:	f883 011c 	strbgt.w	r0, [r3, #284]	; 0x11c
			if (rssi > current_rxbuf->rssi_max) current_rxbuf->rssi_max = rssi;
    7dda:	4282      	cmp	r2, r0
			pos = current_rxbuf->pos;
    7ddc:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
			if (rssi > current_rxbuf->rssi_max) current_rxbuf->rssi_max = rssi;
    7de0:	bfb8      	it	lt
    7de2:	f883 011d 	strblt.w	r0, [r3, #285]	; 0x11d
			current_rxbuf->data[pos] = le_dma_dest[pos & 1]; // dirty hack
    7de6:	485b      	ldr	r0, [pc, #364]	; (7f54 <le_DMA_IRQHandler+0x1c0>)
    7de8:	f002 0101 	and.w	r1, r2, #1
    7dec:	5c41      	ldrb	r1, [r0, r1]
    7dee:	5499      	strb	r1, [r3, r2]
			pos += 1;
    7df0:	3201      	adds	r2, #1
			if (pos == 1) {
    7df2:	2a01      	cmp	r2, #1
			current_rxbuf->pos = pos;
    7df4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
			if (pos == 1) {
    7df8:	d11e      	bne.n	7e38 <le_DMA_IRQHandler+0xa4>
				current_rxbuf->channel = rf_channel;
    7dfa:	4957      	ldr	r1, [pc, #348]	; (7f58 <le_DMA_IRQHandler+0x1c4>)
				current_rxbuf->timestamp = timestamp - USEC(8 + 32); // packet starts at preamble
    7dfc:	f5a6 76c8 	sub.w	r6, r6, #400	; 0x190
				current_rxbuf->channel = rf_channel;
    7e00:	880a      	ldrh	r2, [r1, #0]
				if (btle_channel_index(rf_channel) < 37) {
    7e02:	8808      	ldrh	r0, [r1, #0]
				current_rxbuf->channel = rf_channel;
    7e04:	b292      	uxth	r2, r2
    7e06:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
				current_rxbuf->access_address = conn.access_address;
    7e0a:	6a22      	ldr	r2, [r4, #32]
				current_rxbuf->timestamp = timestamp - USEC(8 + 32); // packet starts at preamble
    7e0c:	f8c3 610c 	str.w	r6, [r3, #268]	; 0x10c
				current_rxbuf->access_address = conn.access_address;
    7e10:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
				if (btle_channel_index(rf_channel) < 37) {
    7e14:	b280      	uxth	r0, r0
    7e16:	f7fe ffe7 	bl	6de8 <btle_channel_index>
    7e1a:	2824      	cmp	r0, #36	; 0x24
    7e1c:	d804      	bhi.n	7e28 <le_DMA_IRQHandler+0x94>
	T1MCR &= ~TMCR_MR0I;
    7e1e:	4a4f      	ldr	r2, [pc, #316]	; (7f5c <le_DMA_IRQHandler+0x1c8>)
    7e20:	6813      	ldr	r3, [r2, #0]
    7e22:	f023 0301 	bic.w	r3, r3, #1
    7e26:	6013      	str	r3, [r2, #0]
		if (DMACIntErrStat & (1 << 0)) {
    7e28:	4b4d      	ldr	r3, [pc, #308]	; (7f60 <le_DMA_IRQHandler+0x1cc>)
    7e2a:	681b      	ldr	r3, [r3, #0]
    7e2c:	07db      	lsls	r3, r3, #31
			DMACIntErrClr = (1 << 0);
    7e2e:	bf42      	ittt	mi
    7e30:	2201      	movmi	r2, #1
    7e32:	4b4c      	ldrmi	r3, [pc, #304]	; (7f64 <le_DMA_IRQHandler+0x1d0>)
    7e34:	601a      	strmi	r2, [r3, #0]
}
    7e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (pos == 2) {
    7e38:	2a02      	cmp	r2, #2
    7e3a:	d03f      	beq.n	7ebc <le_DMA_IRQHandler+0x128>
			if (pos > 2 && pos >= current_rxbuf->size) {
    7e3c:	d9f4      	bls.n	7e28 <le_DMA_IRQHandler+0x94>
    7e3e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    7e42:	4293      	cmp	r3, r2
    7e44:	d8f0      	bhi.n	7e28 <le_DMA_IRQHandler+0x94>
				cc2400_strobe(SFSON);
    7e46:	2061      	movs	r0, #97	; 0x61
    7e48:	f001 ff41 	bl	9cce <cc2400_strobe>
				DMACC0Config = 0;
    7e4c:	2200      	movs	r2, #0
    7e4e:	4b46      	ldr	r3, [pc, #280]	; (7f68 <le_DMA_IRQHandler+0x1d4>)
					uint8_t tmp = (uint8_t)DIO_SSP_DR;
    7e50:	4946      	ldr	r1, [pc, #280]	; (7f6c <le_DMA_IRQHandler+0x1d8>)
				DMACC0Config = 0;
    7e52:	601a      	str	r2, [r3, #0]
				DMACIntTCClear = (1 << 0); // if we don't clear a second time, data is corrupt
    7e54:	2301      	movs	r3, #1
				DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    7e56:	4a46      	ldr	r2, [pc, #280]	; (7f70 <le_DMA_IRQHandler+0x1dc>)
				DMACIntTCClear = (1 << 0); // if we don't clear a second time, data is corrupt
    7e58:	603b      	str	r3, [r7, #0]
				DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    7e5a:	6813      	ldr	r3, [r2, #0]
				while (SSP1SR & SSPSR_RNE) {
    7e5c:	3a18      	subs	r2, #24
				DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    7e5e:	f023 0301 	bic.w	r3, r3, #1
    7e62:	6193      	str	r3, [r2, #24]
				while (SSP1SR & SSPSR_RNE) {
    7e64:	6813      	ldr	r3, [r2, #0]
    7e66:	0758      	lsls	r0, r3, #29
    7e68:	d457      	bmi.n	7f1a <le_DMA_IRQHandler+0x186>
				ICER0 = ICER0_ICE_DMA;
    7e6a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    7e6e:	4b41      	ldr	r3, [pc, #260]	; (7f74 <le_DMA_IRQHandler+0x1e0>)
				queue_insert(&packet_queue, current_rxbuf);
    7e70:	f8d4 1678 	ldr.w	r1, [r4, #1656]	; 0x678
				ICER0 = ICER0_ICE_DMA;
    7e74:	601a      	str	r2, [r3, #0]
				queue_insert(&packet_queue, current_rxbuf);
    7e76:	4840      	ldr	r0, [pc, #256]	; (7f78 <le_DMA_IRQHandler+0x1e4>)
    7e78:	f000 fb6a 	bl	8550 <queue_insert>
				if (btle_channel_index(rf_channel) < 37) {
    7e7c:	4b36      	ldr	r3, [pc, #216]	; (7f58 <le_DMA_IRQHandler+0x1c4>)
    7e7e:	8818      	ldrh	r0, [r3, #0]
    7e80:	b280      	uxth	r0, r0
    7e82:	f7fe ffb1 	bl	6de8 <btle_channel_index>
    7e86:	2824      	cmp	r0, #36	; 0x24
    7e88:	d80f      	bhi.n	7eaa <le_DMA_IRQHandler+0x116>
					++conn_event.num_packets;
    7e8a:	4a3c      	ldr	r2, [pc, #240]	; (7f7c <le_DMA_IRQHandler+0x1e8>)
    7e8c:	6853      	ldr	r3, [r2, #4]
    7e8e:	3301      	adds	r3, #1
					if (conn_event.num_packets == 1) {
    7e90:	2b01      	cmp	r3, #1
					++conn_event.num_packets;
    7e92:	6053      	str	r3, [r2, #4]
					if (conn_event.num_packets == 1) {
    7e94:	d143      	bne.n	7f1e <le_DMA_IRQHandler+0x18a>
						conn_event.anchor = current_rxbuf->timestamp;
    7e96:	f8d4 3678 	ldr.w	r3, [r4, #1656]	; 0x678
    7e9a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
    7e9e:	6013      	str	r3, [r2, #0]
						timer1_set_match(NOW + IFS_TIMEOUT); // set a timeout for next packet
    7ea0:	6828      	ldr	r0, [r5, #0]
    7ea2:	f600 30b8 	addw	r0, r0, #3000	; 0xbb8
    7ea6:	f7ff fbcd 	bl	7644 <timer1_set_match>
				current_rxbuf = buffer_get();
    7eaa:	f7ff fc2f 	bl	770c <buffer_get>
    7eae:	f8c4 0678 	str.w	r0, [r4, #1656]	; 0x678
				if (current_rxbuf == NULL) {
    7eb2:	2800      	cmp	r0, #0
    7eb4:	d140      	bne.n	7f38 <le_DMA_IRQHandler+0x1a4>
					timer1_wait_buffer();
    7eb6:	f7ff fbe1 	bl	767c <timer1_wait_buffer>
    7eba:	e7b5      	b.n	7e28 <le_DMA_IRQHandler+0x94>
	int idx = whitening_index[btle_channel_index(channel)];
    7ebc:	f8b3 0110 	ldrh.w	r0, [r3, #272]	; 0x110
				uint8_t length = dewhiten_length(current_rxbuf->channel, current_rxbuf->data[1]);
    7ec0:	785e      	ldrb	r6, [r3, #1]
	int idx = whitening_index[btle_channel_index(channel)];
    7ec2:	f7fe ff91 	bl	6de8 <btle_channel_index>
	idx = (idx + 8) % sizeof(whitening);
    7ec6:	277f      	movs	r7, #127	; 0x7f
	uint8_t out = 0;
    7ec8:	2100      	movs	r1, #0
	int idx = whitening_index[btle_channel_index(channel)];
    7eca:	4d2d      	ldr	r5, [pc, #180]	; (7f80 <le_DMA_IRQHandler+0x1ec>)
    7ecc:	5c2b      	ldrb	r3, [r5, r0]
    7ece:	46ac      	mov	ip, r5
	idx = (idx + 8) % sizeof(whitening);
    7ed0:	3308      	adds	r3, #8
    7ed2:	fbb3 f2f7 	udiv	r2, r3, r7
	for (i = 0; i < 8; ++i) {
    7ed6:	4608      	mov	r0, r1
	idx = (idx + 8) % sizeof(whitening);
    7ed8:	ebc2 12c2 	rsb	r2, r2, r2, lsl #7
    7edc:	1a9b      	subs	r3, r3, r2
		bit = (data >> (7-i)) & 1;
    7ede:	f1c0 0207 	rsb	r2, r0, #7
    7ee2:	fa46 f202 	asr.w	r2, r6, r2
    7ee6:	f002 0501 	and.w	r5, r2, #1
		bit ^= whitening[idx];
    7eea:	eb0c 0203 	add.w	r2, ip, r3
    7eee:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
		idx = (idx + 1) % sizeof(whitening);
    7ef2:	3301      	adds	r3, #1
		bit ^= whitening[idx];
    7ef4:	406a      	eors	r2, r5
		idx = (idx + 1) % sizeof(whitening);
    7ef6:	fbb3 f5f7 	udiv	r5, r3, r7
		out |= bit << i;
    7efa:	4082      	lsls	r2, r0
	for (i = 0; i < 8; ++i) {
    7efc:	3001      	adds	r0, #1
		idx = (idx + 1) % sizeof(whitening);
    7efe:	ebc5 15c5 	rsb	r5, r5, r5, lsl #7
		out |= bit << i;
    7f02:	430a      	orrs	r2, r1
	for (i = 0; i < 8; ++i) {
    7f04:	2808      	cmp	r0, #8
		idx = (idx + 1) % sizeof(whitening);
    7f06:	eba3 0305 	sub.w	r3, r3, r5
		out |= bit << i;
    7f0a:	b2d1      	uxtb	r1, r2
	for (i = 0; i < 8; ++i) {
    7f0c:	d1e7      	bne.n	7ede <le_DMA_IRQHandler+0x14a>
				current_rxbuf->size = length + 2 + 3; // two bytes for header and three for CRC
    7f0e:	f8d4 3678 	ldr.w	r3, [r4, #1656]	; 0x678
    7f12:	3105      	adds	r1, #5
    7f14:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
			if (pos > 2 && pos >= current_rxbuf->size) {
    7f18:	e786      	b.n	7e28 <le_DMA_IRQHandler+0x94>
					uint8_t tmp = (uint8_t)DIO_SSP_DR;
    7f1a:	680b      	ldr	r3, [r1, #0]
    7f1c:	e7a2      	b.n	7e64 <le_DMA_IRQHandler+0xd0>
					else if (conn_event.num_packets == 2) {
    7f1e:	2b02      	cmp	r3, #2
    7f20:	d1c3      	bne.n	7eaa <le_DMA_IRQHandler+0x116>
						cc2400_strobe(SRFOFF);
    7f22:	2064      	movs	r0, #100	; 0x64
    7f24:	f001 fed3 	bl	9cce <cc2400_strobe>
						current_rxbuf = buffer_get();
    7f28:	f7ff fbf0 	bl	770c <buffer_get>
    7f2c:	f8c4 0678 	str.w	r0, [r4, #1656]	; 0x678
}
    7f30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						finish_conn_event();
    7f34:	f7ff bcae 	b.w	7894 <finish_conn_event>
					timer1_wait_fs_lock();
    7f38:	f7ff fb90 	bl	765c <timer1_wait_fs_lock>
    7f3c:	e774      	b.n	7e28 <le_DMA_IRQHandler+0x94>
    7f3e:	bf00      	nop
    7f40:	40008008 	.word	0x40008008
    7f44:	50004000 	.word	0x50004000
    7f48:	50004004 	.word	0x50004004
    7f4c:	50004008 	.word	0x50004008
    7f50:	10000c24 	.word	0x10000c24
    7f54:	10003b40 	.word	0x10003b40
    7f58:	10003b2c 	.word	0x10003b2c
    7f5c:	40008014 	.word	0x40008014
    7f60:	5000400c 	.word	0x5000400c
    7f64:	50004010 	.word	0x50004010
    7f68:	50004110 	.word	0x50004110
    7f6c:	40030008 	.word	0x40030008
    7f70:	40030024 	.word	0x40030024
    7f74:	e000e180 	.word	0xe000e180
    7f78:	10003afc 	.word	0x10003afc
    7f7c:	10003b30 	.word	0x10003b30
    7f80:	0000b744 	.word	0x0000b744

00007f84 <TIMER1_IRQHandler>:
void TIMER1_IRQHandler(void) {
    7f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (T1IR & TIR_MR0_Interrupt) {
    7f86:	4b5e      	ldr	r3, [pc, #376]	; (8100 <TIMER1_IRQHandler+0x17c>)
    7f88:	681a      	ldr	r2, [r3, #0]
    7f8a:	07d5      	lsls	r5, r2, #31
    7f8c:	d556      	bpl.n	803c <TIMER1_IRQHandler+0xb8>
		T1IR = TIR_MR0_Interrupt;
    7f8e:	2701      	movs	r7, #1
    7f90:	601f      	str	r7, [r3, #0]
		if (conn.conn_update_pending &&
    7f92:	4b5c      	ldr	r3, [pc, #368]	; (8104 <TIMER1_IRQHandler+0x180>)
    7f94:	495c      	ldr	r1, [pc, #368]	; (8108 <TIMER1_IRQHandler+0x184>)
    7f96:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    7f9a:	460d      	mov	r5, r1
    7f9c:	461c      	mov	r4, r3
    7f9e:	688e      	ldr	r6, [r1, #8]
    7fa0:	b36a      	cbz	r2, 7ffe <TIMER1_IRQHandler+0x7a>
    7fa2:	f8b3 010c 	ldrh.w	r0, [r3, #268]	; 0x10c
    7fa6:	f8b3 211c 	ldrh.w	r2, [r3, #284]	; 0x11c
    7faa:	4290      	cmp	r0, r2
    7fac:	d127      	bne.n	7ffe <TIMER1_IRQHandler+0x7a>
			if (!conn_event.opened && conn.win_offset > 0) {
    7fae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    7fb0:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
    7fb4:	4410      	add	r0, r2
    7fb6:	b946      	cbnz	r6, 7fca <TIMER1_IRQHandler+0x46>
    7fb8:	b13a      	cbz	r2, 7fca <TIMER1_IRQHandler+0x46>
				timer1_set_match(conn.last_anchor + conn.conn_interval +
    7fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7fbc:	f6a0 30b8 	subw	r0, r0, #3000	; 0xbb8
    7fc0:	4418      	add	r0, r3
    7fc2:	f7ff fb3f 	bl	7644 <timer1_set_match>
				conn_event.opened = 1;
    7fc6:	608f      	str	r7, [r1, #8]
}
    7fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				conn_event.opened = 1;
    7fca:	2301      	movs	r3, #1
				conn.anchor_set = 0;
    7fcc:	2200      	movs	r2, #0
				conn_event.opened = 1;
    7fce:	60ab      	str	r3, [r5, #8]
				timer1_set_match(conn.last_anchor + conn.conn_interval +
    7fd0:	f500 40a5 	add.w	r0, r0, #21120	; 0x5280
				conn.conn_interval = conn.conn_update_pending_interval;
    7fd4:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
				timer1_set_match(conn.last_anchor + conn.conn_interval +
    7fd8:	3050      	adds	r0, #80	; 0x50
				conn.conn_interval = conn.conn_update_pending_interval;
    7fda:	6323      	str	r3, [r4, #48]	; 0x30
				timer1_set_match(conn.last_anchor + conn.conn_interval +
    7fdc:	4418      	add	r0, r3
						conn.win_offset + conn.win_size + USEC(2120));
    7fde:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
				conn.supervision_timeout = conn.conn_update_pending_supervision_timeout;
    7fe2:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
				timer1_set_match(conn.last_anchor + conn.conn_interval +
    7fe6:	4418      	add	r0, r3
				conn.anchor_set = 0;
    7fe8:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
				conn.supervision_timeout = conn.conn_update_pending_supervision_timeout;
    7fec:	6361      	str	r1, [r4, #52]	; 0x34
				conn.conn_update_pending = 0;
    7fee:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
				timer1_set_match(conn.last_anchor + conn.conn_interval +
    7ff2:	f7ff fb27 	bl	7644 <timer1_set_match>
}
    7ff6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				change_channel();
    7ffa:	f7ff bbed 	b.w	77d8 <change_channel>
		if (conn.channel_map_update_pending &&
    7ffe:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    8002:	b173      	cbz	r3, 8022 <TIMER1_IRQHandler+0x9e>
    8004:	f8b4 210c 	ldrh.w	r2, [r4, #268]	; 0x10c
    8008:	f8b4 3124 	ldrh.w	r3, [r4, #292]	; 0x124
    800c:	429a      	cmp	r2, r3
    800e:	d108      	bne.n	8022 <TIMER1_IRQHandler+0x9e>
			conn.remapping = conn.pending_remapping;
    8010:	493e      	ldr	r1, [pc, #248]	; (810c <TIMER1_IRQHandler+0x188>)
    8012:	22c0      	movs	r2, #192	; 0xc0
    8014:	f1a1 00e8 	sub.w	r0, r1, #232	; 0xe8
    8018:	f002 fcf0 	bl	a9fc <memcpy>
			conn.channel_map_update_pending = 0;
    801c:	2300      	movs	r3, #0
    801e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
		if (!conn_event.opened) {
    8022:	2e00      	cmp	r6, #0
    8024:	d14c      	bne.n	80c0 <TIMER1_IRQHandler+0x13c>
			conn_event.opened = 1;
    8026:	2301      	movs	r3, #1
    8028:	60ab      	str	r3, [r5, #8]
			timer1_set_match(NOW + USEC(2120) + RX_WARMUP_TIME);
    802a:	4b39      	ldr	r3, [pc, #228]	; (8110 <TIMER1_IRQHandler+0x18c>)
    802c:	6818      	ldr	r0, [r3, #0]
    802e:	f500 40bd 	add.w	r0, r0, #24192	; 0x5e80
    8032:	3008      	adds	r0, #8
    8034:	f7ff fb06 	bl	7644 <timer1_set_match>
			change_channel();
    8038:	f7ff fbce 	bl	77d8 <change_channel>
	if (T1IR & TIR_MR1_Interrupt) {
    803c:	4b30      	ldr	r3, [pc, #192]	; (8100 <TIMER1_IRQHandler+0x17c>)
    803e:	681a      	ldr	r2, [r3, #0]
    8040:	0794      	lsls	r4, r2, #30
    8042:	d50d      	bpl.n	8060 <TIMER1_IRQHandler+0xdc>
		T1IR = TIR_MR1_Interrupt;
    8044:	2202      	movs	r2, #2
		T1MCR &= ~TMCR_MR1I;
    8046:	4933      	ldr	r1, [pc, #204]	; (8114 <TIMER1_IRQHandler+0x190>)
		T1IR = TIR_MR1_Interrupt;
    8048:	601a      	str	r2, [r3, #0]
		T1MCR &= ~TMCR_MR1I;
    804a:	680b      	ldr	r3, [r1, #0]
    804c:	f023 0308 	bic.w	r3, r3, #8
    8050:	600b      	str	r3, [r1, #0]
		TXLED_CLR;
    8052:	f44f 7180 	mov.w	r1, #256	; 0x100
    8056:	4b30      	ldr	r3, [pc, #192]	; (8118 <TIMER1_IRQHandler+0x194>)
    8058:	6019      	str	r1, [r3, #0]
		RXLED_CLR;
    805a:	2110      	movs	r1, #16
    805c:	6019      	str	r1, [r3, #0]
		USRLED_CLR;
    805e:	601a      	str	r2, [r3, #0]
	if (T1IR & TIR_MR2_Interrupt) {
    8060:	4b27      	ldr	r3, [pc, #156]	; (8100 <TIMER1_IRQHandler+0x17c>)
    8062:	681a      	ldr	r2, [r3, #0]
    8064:	0750      	lsls	r0, r2, #29
    8066:	d51b      	bpl.n	80a0 <TIMER1_IRQHandler+0x11c>
		T1IR = TIR_MR2_Interrupt;
    8068:	2204      	movs	r2, #4
    806a:	601a      	str	r2, [r3, #0]
		if (cc2400_status() & FS_LOCK) {
    806c:	f001 fe28 	bl	9cc0 <cc2400_status>
    8070:	0741      	lsls	r1, r0, #29
    8072:	d528      	bpl.n	80c6 <TIMER1_IRQHandler+0x142>
			le_dma_init();
    8074:	f7ff fac2 	bl	75fc <le_dma_init>
			dio_ssp_start();
    8078:	f7ff fa80 	bl	757c <dio_ssp_start>
			ISER0 = ISER0_ISE_DMA;
    807c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    8080:	4b26      	ldr	r3, [pc, #152]	; (811c <TIMER1_IRQHandler+0x198>)
	cc2400_strobe(SRX);
    8082:	2062      	movs	r0, #98	; 0x62
			ISER0 = ISER0_ISE_DMA;
    8084:	601a      	str	r2, [r3, #0]
	cc2400_strobe(SRX);
    8086:	f001 fe22 	bl	9cce <cc2400_strobe>
	PAEN_SET;
    808a:	2280      	movs	r2, #128	; 0x80
    808c:	4b24      	ldr	r3, [pc, #144]	; (8120 <TIMER1_IRQHandler+0x19c>)
    808e:	601a      	str	r2, [r3, #0]
	HGM_SET;
    8090:	f44f 7280 	mov.w	r2, #256	; 0x100
    8094:	601a      	str	r2, [r3, #0]
			T1MCR &= ~TMCR_MR2I;
    8096:	4a1f      	ldr	r2, [pc, #124]	; (8114 <TIMER1_IRQHandler+0x190>)
    8098:	6813      	ldr	r3, [r2, #0]
    809a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    809e:	6013      	str	r3, [r2, #0]
	if (T1IR & TIR_MR3_Interrupt) {
    80a0:	4b17      	ldr	r3, [pc, #92]	; (8100 <TIMER1_IRQHandler+0x17c>)
    80a2:	681a      	ldr	r2, [r3, #0]
    80a4:	0712      	lsls	r2, r2, #28
    80a6:	d58f      	bpl.n	7fc8 <TIMER1_IRQHandler+0x44>
		T1IR = TIR_MR3_Interrupt;
    80a8:	2208      	movs	r2, #8
    80aa:	601a      	str	r2, [r3, #0]
		current_rxbuf = buffer_get();
    80ac:	f7ff fb2e 	bl	770c <buffer_get>
    80b0:	4b14      	ldr	r3, [pc, #80]	; (8104 <TIMER1_IRQHandler+0x180>)
    80b2:	f8c3 0678 	str.w	r0, [r3, #1656]	; 0x678
		if (current_rxbuf == NULL) {
    80b6:	b948      	cbnz	r0, 80cc <TIMER1_IRQHandler+0x148>
}
    80b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			timer1_wait_buffer();
    80bc:	f7ff bade 	b.w	767c <timer1_wait_buffer>
				finish_conn_event();
    80c0:	f7ff fbe8 	bl	7894 <finish_conn_event>
    80c4:	e7ba      	b.n	803c <TIMER1_IRQHandler+0xb8>
			timer1_wait_fs_lock();
    80c6:	f7ff fac9 	bl	765c <timer1_wait_fs_lock>
    80ca:	e7e9      	b.n	80a0 <TIMER1_IRQHandler+0x11c>
			if (cc2400_status() & FS_LOCK) {
    80cc:	f001 fdf8 	bl	9cc0 <cc2400_status>
    80d0:	0743      	lsls	r3, r0, #29
    80d2:	d511      	bpl.n	80f8 <TIMER1_IRQHandler+0x174>
				le_dma_init();
    80d4:	f7ff fa92 	bl	75fc <le_dma_init>
				dio_ssp_start();
    80d8:	f7ff fa50 	bl	757c <dio_ssp_start>
				ISER0 = ISER0_ISE_DMA;
    80dc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    80e0:	4b0e      	ldr	r3, [pc, #56]	; (811c <TIMER1_IRQHandler+0x198>)
	cc2400_strobe(SRX);
    80e2:	2062      	movs	r0, #98	; 0x62
				ISER0 = ISER0_ISE_DMA;
    80e4:	601a      	str	r2, [r3, #0]
	cc2400_strobe(SRX);
    80e6:	f001 fdf2 	bl	9cce <cc2400_strobe>
	PAEN_SET;
    80ea:	2280      	movs	r2, #128	; 0x80
    80ec:	4b0c      	ldr	r3, [pc, #48]	; (8120 <TIMER1_IRQHandler+0x19c>)
    80ee:	601a      	str	r2, [r3, #0]
	HGM_SET;
    80f0:	f44f 7280 	mov.w	r2, #256	; 0x100
    80f4:	601a      	str	r2, [r3, #0]
}
    80f6:	e767      	b.n	7fc8 <TIMER1_IRQHandler+0x44>
}
    80f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				timer1_wait_fs_lock();
    80fc:	f7ff baae 	b.w	765c <timer1_wait_fs_lock>
    8100:	40008000 	.word	0x40008000
    8104:	10000c24 	.word	0x10000c24
    8108:	10003b30 	.word	0x10003b30
    810c:	10000d4c 	.word	0x10000d4c
    8110:	40008008 	.word	0x40008008
    8114:	40008014 	.word	0x40008014
    8118:	2009c03c 	.word	0x2009c03c
    811c:	e000e100 	.word	0xe000e100
    8120:	2009c058 	.word	0x2009c058

00008124 <le_phy_main>:
	}

	return 0;
}

void le_phy_main(void) {
    8124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8128:	b087      	sub	sp, #28
    // ubertooth_init();
    // usb_serial_init();

	// disable USB interrupts -- we poll them below
	// n.b., they should not be enabled but let's be careful
	ICER0 = ICER0_ICE_USB;
    812a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
		le_buffer_pool[i].available = 1;
    812e:	2501      	movs	r5, #1
	ICER0 = ICER0_ICE_USB;
    8130:	4fbd      	ldr	r7, [pc, #756]	; (8428 <le_phy_main+0x304>)
		le_buffer_pool[i].available = 1;
    8132:	4cbe      	ldr	r4, [pc, #760]	; (842c <le_phy_main+0x308>)
	ICER0 = ICER0_ICE_USB;
    8134:	603b      	str	r3, [r7, #0]
	// disable clkn and timer0
	clkn_disable();
    8136:	f7ff f969 	bl	740c <clkn_disable>

	buffers_init();
	queue_init(&packet_queue);
    813a:	48bd      	ldr	r0, [pc, #756]	; (8430 <le_phy_main+0x30c>)
		le_buffer_pool[i].available = 1;
    813c:	f8c4 5300 	str.w	r5, [r4, #768]	; 0x300
    8140:	f8c4 5424 	str.w	r5, [r4, #1060]	; 0x424
    8144:	f8c4 5548 	str.w	r5, [r4, #1352]	; 0x548
    8148:	f8c4 566c 	str.w	r5, [r4, #1644]	; 0x66c
	queue_init(&packet_queue);
    814c:	f000 f9fc 	bl	8548 <queue_init>
	T1TCR = TCR_Counter_Reset;
    8150:	2302      	movs	r3, #2
    8152:	4eb8      	ldr	r6, [pc, #736]	; (8434 <le_phy_main+0x310>)
	T1PR = 4; // 100 ns
    8154:	4ab8      	ldr	r2, [pc, #736]	; (8438 <le_phy_main+0x314>)
	T1TCR = TCR_Counter_Reset;
    8156:	6033      	str	r3, [r6, #0]
	T1PR = 4; // 100 ns
    8158:	2304      	movs	r3, #4
    815a:	6013      	str	r3, [r2, #0]
	ISER0 = ISER0_ISE_TIMER1;
    815c:	4ab7      	ldr	r2, [pc, #732]	; (843c <le_phy_main+0x318>)
	T1TCR = TCR_Counter_Enable;
    815e:	6035      	str	r5, [r6, #0]
	ISER0 = ISER0_ISE_TIMER1;
    8160:	6013      	str	r3, [r2, #0]
	timer1_start();

	current_rxbuf = buffer_get();
    8162:	f7ff fad3 	bl	770c <buffer_get>
	rf_channel = le_adv_channel; // FIXME
    8166:	4bb6      	ldr	r3, [pc, #728]	; (8440 <le_phy_main+0x31c>)
    8168:	4ab6      	ldr	r2, [pc, #728]	; (8444 <le_phy_main+0x320>)
    816a:	881b      	ldrh	r3, [r3, #0]
	current_rxbuf = buffer_get();
    816c:	f8c4 0678 	str.w	r0, [r4, #1656]	; 0x678
	rf_channel = le_adv_channel; // FIXME
    8170:	b29b      	uxth	r3, r3
    8172:	8013      	strh	r3, [r2, #0]
	conn.access_address = ADVERTISING_AA;
    8174:	4bb4      	ldr	r3, [pc, #720]	; (8448 <le_phy_main+0x324>)
	if (!le.target_set)
    8176:	f8df b304 	ldr.w	fp, [pc, #772]	; 847c <le_phy_main+0x358>
	conn.access_address = ADVERTISING_AA;
    817a:	6223      	str	r3, [r4, #32]
	usb_queue_init(); // USB FIFO FIXME replace with safer queue
    817c:	f7fe ffa2 	bl	70c4 <usb_queue_init>
	dio_ssp_init();   // init SSP and raise !CS (self-routed GPIO)
    8180:	f001 fc74 	bl	9a6c <dio_ssp_init>
	le_dma_init();    // prepare DMA + interrupts
    8184:	f7ff fa3a 	bl	75fc <le_dma_init>
	dio_ssp_start();  // enable SSP + DMA
    8188:	f7ff f9f8 	bl	757c <dio_ssp_start>
	le_sys_init();
	le_cc2400_init_rf();
    818c:	f7ff fae8 	bl	7760 <le_cc2400_init_rf>

	cancel_follow = 0;
    8190:	4bae      	ldr	r3, [pc, #696]	; (844c <le_phy_main+0x328>)
    8192:	2200      	movs	r2, #0
    8194:	4698      	mov	r8, r3
    8196:	e9cd 7601 	strd	r7, r6, [sp, #4]
    819a:	601a      	str	r2, [r3, #0]

	while (requested_mode == MODE_BT_FOLLOW_LE) {
    819c:	4bac      	ldr	r3, [pc, #688]	; (8450 <le_phy_main+0x32c>)
    819e:	781b      	ldrb	r3, [r3, #0]
    81a0:	2b09      	cmp	r3, #9
    81a2:	d011      	beq.n	81c8 <le_phy_main+0xa4>
	T1TCR = TCR_Counter_Reset;
    81a4:	2202      	movs	r2, #2
    81a6:	9b02      	ldr	r3, [sp, #8]
	ICER0 = ICER0_ICE_TIMER1;
    81a8:	9901      	ldr	r1, [sp, #4]
	T1TCR = TCR_Counter_Reset;
    81aa:	601a      	str	r2, [r3, #0]
	ICER0 = ICER0_ICE_TIMER1;
    81ac:	2304      	movs	r3, #4
    81ae:	600b      	str	r3, [r1, #0]
	}

	timer1_stop();

	// reset state
	RXLED_CLR;
    81b0:	2110      	movs	r1, #16
    81b2:	4ba8      	ldr	r3, [pc, #672]	; (8454 <le_phy_main+0x330>)
    81b4:	6019      	str	r1, [r3, #0]
	TXLED_CLR;
    81b6:	f44f 7180 	mov.w	r1, #256	; 0x100
    81ba:	6019      	str	r1, [r3, #0]
	USRLED_CLR;
    81bc:	601a      	str	r2, [r3, #0]
	clkn_init();
    81be:	f7ff f911 	bl	73e4 <clkn_init>

	// TODO kill CC2400
}
    81c2:	b007      	add	sp, #28
    81c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		le_rx_t *packet = NULL;
    81c8:	2300      	movs	r3, #0
		if (queue_remove(&packet_queue, (void **)&packet)) {
    81ca:	4899      	ldr	r0, [pc, #612]	; (8430 <le_phy_main+0x30c>)
    81cc:	a905      	add	r1, sp, #20
		le_rx_t *packet = NULL;
    81ce:	9305      	str	r3, [sp, #20]
		if (queue_remove(&packet_queue, (void **)&packet)) {
    81d0:	f000 f9cc 	bl	856c <queue_remove>
    81d4:	2800      	cmp	r0, #0
    81d6:	f000 8112 	beq.w	83fe <le_phy_main+0x2da>
			le_dewhiten(packet->data, packet->size, packet->channel);
    81da:	9805      	ldr	r0, [sp, #20]
    81dc:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
    81e0:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    81e4:	f7fe fe9c 	bl	6f20 <le_dewhiten>
	if (!le.target_set)
    81e8:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
    81ec:	2b00      	cmp	r3, #0
    81ee:	f040 80e5 	bne.w	83bc <le_phy_main+0x298>
                            debug_write("calling run_parser...");
    81f2:	4899      	ldr	r0, [pc, #612]	; (8458 <le_phy_main+0x334>)
    81f4:	f000 ff16 	bl	9024 <debug_write>
                            unsigned int ret = run_parser(packet->data, packet->size);
    81f8:	9805      	ldr	r0, [sp, #20]
    81fa:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    81fe:	f7ff fcbb 	bl	7b78 <run_parser>
                            if (ret == 0) {
    8202:	b978      	cbnz	r0, 8224 <le_phy_main+0x100>
		RXLED_SET;
    8204:	2210      	movs	r2, #16
    8206:	4b95      	ldr	r3, [pc, #596]	; (845c <le_phy_main+0x338>)
    8208:	601a      	str	r2, [r3, #0]
	T1MR1 = NOW + MSEC(10);
    820a:	4b95      	ldr	r3, [pc, #596]	; (8460 <le_phy_main+0x33c>)
    820c:	4a95      	ldr	r2, [pc, #596]	; (8464 <le_phy_main+0x340>)
    820e:	681b      	ldr	r3, [r3, #0]
    8210:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
    8214:	33a0      	adds	r3, #160	; 0xa0
    8216:	6013      	str	r3, [r2, #0]
	T1MCR |= TMCR_MR1I;
    8218:	f852 3c08 	ldr.w	r3, [r2, #-8]
    821c:	f043 0308 	orr.w	r3, r3, #8
    8220:	f842 3c08 	str.w	r3, [r2, #-8]
                            usb_enqueue_le(packet);
    8224:	9e05      	ldr	r6, [sp, #20]
	usb_pkt_rx* f = usb_enqueue();
    8226:	f7fe ff5b 	bl	70e0 <usb_enqueue>
	if (f == NULL) {
    822a:	4605      	mov	r5, r0
    822c:	b350      	cbz	r0, 8284 <le_phy_main+0x160>
	f->clkn_high = 0;
    822e:	2700      	movs	r7, #0
	f->pkt_type = LE_PACKET;
    8230:	2301      	movs	r3, #1
	f->clkn_high = 0;
    8232:	70c7      	strb	r7, [r0, #3]
	f->pkt_type = LE_PACKET;
    8234:	7003      	strb	r3, [r0, #0]
	f->clk100ns = packet->timestamp;
    8236:	f8d6 310c 	ldr.w	r3, [r6, #268]	; 0x10c
	memcpy(f->data, &packet->access_address, 4);
    823a:	f506 718a 	add.w	r1, r6, #276	; 0x114
	f->clk100ns = packet->timestamp;
    823e:	6043      	str	r3, [r0, #4]
	f->channel = (uint8_t)((packet->channel - 2402) & 0xff);
    8240:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
	memcpy(f->data, &packet->access_address, 4);
    8244:	300e      	adds	r0, #14
	f->channel = (uint8_t)((packet->channel - 2402) & 0xff);
    8246:	3b62      	subs	r3, #98	; 0x62
    8248:	f800 3c0c 	strb.w	r3, [r0, #-12]
	f->rssi_avg = packet->rssi_sum / packet->size;
    824c:	f8d6 2104 	ldr.w	r2, [r6, #260]	; 0x104
    8250:	f8d6 3120 	ldr.w	r3, [r6, #288]	; 0x120
    8254:	fbb3 f3f2 	udiv	r3, r3, r2
    8258:	f800 3c04 	strb.w	r3, [r0, #-4]
	f->rssi_min = packet->rssi_min;
    825c:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
	memcpy(f->data, &packet->access_address, 4);
    8260:	2204      	movs	r2, #4
	f->rssi_min = packet->rssi_min;
    8262:	f800 3c05 	strb.w	r3, [r0, #-5]
	f->rssi_max = packet->rssi_max;
    8266:	f896 311d 	ldrb.w	r3, [r6, #285]	; 0x11d
	f->rssi_count = 0;
    826a:	f800 7c03 	strb.w	r7, [r0, #-3]
	f->rssi_max = packet->rssi_max;
    826e:	f800 3c06 	strb.w	r3, [r0, #-6]
	memcpy(f->data, &packet->access_address, 4);
    8272:	f002 fbc3 	bl	a9fc <memcpy>
	memcpy(f->data+4, packet->data, DMA_SIZE-4);
    8276:	222e      	movs	r2, #46	; 0x2e
    8278:	4631      	mov	r1, r6
    827a:	f105 0012 	add.w	r0, r5, #18
    827e:	f002 fbbd 	bl	a9fc <memcpy>
	f->status = 0;
    8282:	706f      	strb	r7, [r5, #1]
                            packet_handler(packet);
    8284:	9d05      	ldr	r5, [sp, #20]
	if (btle_channel_index(buf->channel) >= 37) {
    8286:	f8b5 0110 	ldrh.w	r0, [r5, #272]	; 0x110
    828a:	f7fe fdad 	bl	6de8 <btle_channel_index>
    828e:	2824      	cmp	r0, #36	; 0x24
    8290:	7829      	ldrb	r1, [r5, #0]
    8292:	f240 80f5 	bls.w	8480 <le_phy_main+0x35c>
		switch (buf->data[0] & 0xf) {
    8296:	f001 010f 	and.w	r1, r1, #15
    829a:	2905      	cmp	r1, #5
    829c:	f040 80ab 	bne.w	83f6 <le_phy_main+0x2d2>
	if (!le.do_follow)
    82a0:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
    82a4:	2b00      	cmp	r3, #0
    82a6:	f000 80a6 	beq.w	83f6 <le_phy_main+0x2d2>
	if (buf->size != 2 + 6 + 6 + 22 + 3)
    82aa:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    82ae:	2b27      	cmp	r3, #39	; 0x27
    82b0:	f040 80a1 	bne.w	83f6 <le_phy_main+0x2d2>
	if (cancel_follow)
    82b4:	f8d8 3000 	ldr.w	r3, [r8]
    82b8:	b113      	cbz	r3, 82c0 <le_phy_main+0x19c>
		cancel_follow = 0;
    82ba:	2300      	movs	r3, #0
    82bc:	f8c8 3000 	str.w	r3, [r8]
	conn.access_address     = extract_field(buf, 14, 4);
    82c0:	2204      	movs	r2, #4
    82c2:	210e      	movs	r1, #14
    82c4:	4628      	mov	r0, r5
    82c6:	f7ff f9eb 	bl	76a0 <extract_field>
	conn.crc_init           = extract_field(buf, 18, 3);
    82ca:	2203      	movs	r2, #3
    82cc:	2112      	movs	r1, #18
	conn.access_address     = extract_field(buf, 14, 4);
    82ce:	6220      	str	r0, [r4, #32]
	conn.crc_init           = extract_field(buf, 18, 3);
    82d0:	4628      	mov	r0, r5
    82d2:	f7ff f9e5 	bl	76a0 <extract_field>
    82d6:	6260      	str	r0, [r4, #36]	; 0x24
	conn.crc_init_reversed  = rbit(conn.crc_init);
    82d8:	f001 fb64 	bl	99a4 <rbit>
	conn.win_size           = extract_field(buf, 21, 1);
    82dc:	2201      	movs	r2, #1
    82de:	2115      	movs	r1, #21
	conn.crc_init_reversed  = rbit(conn.crc_init);
    82e0:	62a0      	str	r0, [r4, #40]	; 0x28
	conn.win_size           = extract_field(buf, 21, 1);
    82e2:	4628      	mov	r0, r5
    82e4:	f7ff f9dc 	bl	76a0 <extract_field>
	conn.win_offset         = extract_field(buf, 22, 2);
    82e8:	2202      	movs	r2, #2
    82ea:	2116      	movs	r1, #22
	conn.win_size           = extract_field(buf, 21, 1);
    82ec:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    82f0:	4681      	mov	r9, r0
	conn.win_offset         = extract_field(buf, 22, 2);
    82f2:	4628      	mov	r0, r5
    82f4:	f7ff f9d4 	bl	76a0 <extract_field>
	conn.conn_interval      = extract_field(buf, 24, 2);
    82f8:	2202      	movs	r2, #2
    82fa:	2118      	movs	r1, #24
	conn.win_offset         = extract_field(buf, 22, 2);
    82fc:	63e0      	str	r0, [r4, #60]	; 0x3c
    82fe:	4607      	mov	r7, r0
	conn.conn_interval      = extract_field(buf, 24, 2);
    8300:	4628      	mov	r0, r5
    8302:	f7ff f9cd 	bl	76a0 <extract_field>
	conn.supervision_timeout = extract_field(buf, 28, 2);
    8306:	2202      	movs	r2, #2
	conn.conn_interval      = extract_field(buf, 24, 2);
    8308:	4606      	mov	r6, r0
	conn.supervision_timeout = extract_field(buf, 28, 2);
    830a:	211c      	movs	r1, #28
	conn.conn_interval      = extract_field(buf, 24, 2);
    830c:	6320      	str	r0, [r4, #48]	; 0x30
	conn.supervision_timeout = extract_field(buf, 28, 2);
    830e:	4628      	mov	r0, r5
    8310:	f7ff f9c6 	bl	76a0 <extract_field>
	conn.hop_increment      = extract_field(buf, 35, 1) & 0x1f;
    8314:	2201      	movs	r2, #1
	conn.supervision_timeout = extract_field(buf, 28, 2);
    8316:	6360      	str	r0, [r4, #52]	; 0x34
    8318:	4682      	mov	sl, r0
	conn.hop_increment      = extract_field(buf, 35, 1) & 0x1f;
    831a:	2123      	movs	r1, #35	; 0x23
    831c:	4628      	mov	r0, r5
    831e:	f7ff f9bf 	bl	76a0 <extract_field>
	if (conn.conn_interval < 6 || conn.conn_interval > 3200) {
    8322:	f640 437a 	movw	r3, #3194	; 0xc7a
    8326:	1fb2      	subs	r2, r6, #6
	conn.hop_increment      = extract_field(buf, 35, 1) & 0x1f;
    8328:	f000 001f 	and.w	r0, r0, #31
	if (conn.conn_interval < 6 || conn.conn_interval > 3200) {
    832c:	429a      	cmp	r2, r3
	conn.hop_increment      = extract_field(buf, 35, 1) & 0x1f;
    832e:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
	if (conn.conn_interval < 6 || conn.conn_interval > 3200) {
    8332:	d875      	bhi.n	8420 <le_phy_main+0x2fc>
		conn.conn_interval *= USEC(1250);
    8334:	f243 03d4 	movw	r3, #12500	; 0x30d4
    8338:	435e      	muls	r6, r3
	conn.win_offset *= USEC(1250);
    833a:	435f      	muls	r7, r3
	if (conn.win_offset > conn.conn_interval)
    833c:	42be      	cmp	r6, r7
		conn.conn_interval *= USEC(1250);
    833e:	6326      	str	r6, [r4, #48]	; 0x30
	conn.win_offset *= USEC(1250);
    8340:	63e7      	str	r7, [r4, #60]	; 0x3c
	if (conn.win_offset > conn.conn_interval)
    8342:	d36d      	bcc.n	8420 <le_phy_main+0x2fc>
	if (win_size < USEC(1250) || win_size > max_win_size)
    8344:	f243 02d3 	movw	r2, #12499	; 0x30d3
	win_size = conn.win_size * USEC(1250);
    8348:	fa5f f989 	uxtb.w	r9, r9
    834c:	fb03 f309 	mul.w	r3, r3, r9
	if (win_size < USEC(1250) || win_size > max_win_size)
    8350:	4293      	cmp	r3, r2
    8352:	dd65      	ble.n	8420 <le_phy_main+0x2fc>
    8354:	4844      	ldr	r0, [pc, #272]	; (8468 <le_phy_main+0x344>)
	max_win_size = conn.conn_interval - USEC(1250);
    8356:	f5a6 5643 	sub.w	r6, r6, #12480	; 0x30c0
    835a:	3e14      	subs	r6, #20
	if (win_size < USEC(1250) || win_size > max_win_size)
    835c:	4286      	cmp	r6, r0
    835e:	bf28      	it	cs
    8360:	4606      	movcs	r6, r0
    8362:	42b3      	cmp	r3, r6
    8364:	d85c      	bhi.n	8420 <le_phy_main+0x2fc>
	conn.supervision_timeout *= MSEC(10);
    8366:	fb00 f00a 	mul.w	r0, r0, sl
	if (conn.supervision_timeout < MSEC(100) || conn.supervision_timeout > SEC(32))
    836a:	4b40      	ldr	r3, [pc, #256]	; (846c <le_phy_main+0x348>)
    836c:	f5a0 2a74 	sub.w	sl, r0, #999424	; 0xf4000
    8370:	f5aa 7a10 	sub.w	sl, sl, #576	; 0x240
    8374:	459a      	cmp	sl, r3
	conn.supervision_timeout *= MSEC(10);
    8376:	6360      	str	r0, [r4, #52]	; 0x34
	if (conn.supervision_timeout < MSEC(100) || conn.supervision_timeout > SEC(32))
    8378:	d852      	bhi.n	8420 <le_phy_main+0x2fc>
	le_parse_channel_map(&buf->data[30], &conn.remapping);
    837a:	493d      	ldr	r1, [pc, #244]	; (8470 <le_phy_main+0x34c>)
    837c:	f105 001e 	add.w	r0, r5, #30
    8380:	f7fe fdfe 	bl	6f80 <le_parse_channel_map>
	if (conn.remapping.total_channels == 0)
    8384:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
    8388:	2b00      	cmp	r3, #0
    838a:	d049      	beq.n	8420 <le_phy_main+0x2fc>
	T1MCR &= ~TMCR_MR2I;
    838c:	4a39      	ldr	r2, [pc, #228]	; (8474 <le_phy_main+0x350>)
    838e:	6813      	ldr	r3, [r2, #0]
    8390:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    8394:	6013      	str	r3, [r2, #0]
	conn_event.num_packets = 0;
    8396:	2200      	movs	r2, #0
    8398:	4b37      	ldr	r3, [pc, #220]	; (8478 <le_phy_main+0x354>)
	timer1_set_match(buf->timestamp + PACKET_DURATION(buf) +
    839a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
	conn_event.opened = 0;
    839c:	e9c3 2201 	strd	r2, r2, [r3, #4]
	timer1_set_match(buf->timestamp + PACKET_DURATION(buf) +
    83a0:	2250      	movs	r2, #80	; 0x50
    83a2:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    83a6:	f500 501a 	add.w	r0, r0, #9856	; 0x2680
    83aa:	302c      	adds	r0, #44	; 0x2c
    83ac:	4418      	add	r0, r3
    83ae:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    83b2:	fb02 0003 	mla	r0, r2, r3, r0
    83b6:	f7ff f945 	bl	7644 <timer1_set_match>
	return;
    83ba:	e01c      	b.n	83f6 <le_phy_main+0x2d2>
                        if (filter_match(packet)) {
    83bc:	9d05      	ldr	r5, [sp, #20]
	if (btle_channel_index(buf->channel) < 37)
    83be:	f8b5 0110 	ldrh.w	r0, [r5, #272]	; 0x110
    83c2:	f7fe fd11 	bl	6de8 <btle_channel_index>
    83c6:	2824      	cmp	r0, #36	; 0x24
    83c8:	f67f af13 	bls.w	81f2 <le_phy_main+0xce>
	switch (buf->data[0] & 0xf) {
    83cc:	782b      	ldrb	r3, [r5, #0]
    83ce:	f003 030f 	and.w	r3, r3, #15
    83d2:	2b06      	cmp	r3, #6
    83d4:	d80f      	bhi.n	83f6 <le_phy_main+0x2d2>
    83d6:	e8df f003 	tbb	[pc, r3]
    83da:	1604      	.short	0x1604
    83dc:	16041604 	.word	0x16041604
    83e0:	04          	.byte	0x04
    83e1:	00          	.byte	0x00
			if (buf->size < 2 + 6)
    83e2:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    83e6:	2b07      	cmp	r3, #7
    83e8:	d905      	bls.n	83f6 <le_phy_main+0x2d2>
			return bd_addr_cmp(&buf->data[2]);
    83ea:	1ca8      	adds	r0, r5, #2
				   bd_addr_cmp(&buf->data[8]);
    83ec:	f7ff f966 	bl	76bc <bd_addr_cmp>
			return bd_addr_cmp(&buf->data[2]) ||
    83f0:	2800      	cmp	r0, #0
    83f2:	f47f aefe 	bne.w	81f2 <le_phy_main+0xce>
	buffer->available = 1;
    83f6:	2201      	movs	r2, #1
    83f8:	9b05      	ldr	r3, [sp, #20]
    83fa:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		handle_usb(0);
    83fe:	2000      	movs	r0, #0
    8400:	f7fe fec4 	bl	718c <handle_usb>
    8404:	e6ca      	b.n	819c <le_phy_main+0x78>
			if (buf->size < 2 + 6 + 6)
    8406:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    840a:	2b0d      	cmp	r3, #13
    840c:	d9f3      	bls.n	83f6 <le_phy_main+0x2d2>
			return bd_addr_cmp(&buf->data[2]) ||
    840e:	1ca8      	adds	r0, r5, #2
    8410:	f7ff f954 	bl	76bc <bd_addr_cmp>
    8414:	2800      	cmp	r0, #0
    8416:	f47f aeec 	bne.w	81f2 <le_phy_main+0xce>
				   bd_addr_cmp(&buf->data[8]);
    841a:	f105 0008 	add.w	r0, r5, #8
    841e:	e7e5      	b.n	83ec <le_phy_main+0x2c8>
	reset_conn();
    8420:	f7ff f964 	bl	76ec <reset_conn>
    8424:	e7e7      	b.n	83f6 <le_phy_main+0x2d2>
    8426:	bf00      	nop
    8428:	e000e180 	.word	0xe000e180
    842c:	10000c24 	.word	0x10000c24
    8430:	10003afc 	.word	0x10003afc
    8434:	40008004 	.word	0x40008004
    8438:	4000800c 	.word	0x4000800c
    843c:	e000e100 	.word	0xe000e100
    8440:	100004a0 	.word	0x100004a0
    8444:	10003b2c 	.word	0x10003b2c
    8448:	8e89bed6 	.word	0x8e89bed6
    844c:	10000b64 	.word	0x10000b64
    8450:	10000b4e 	.word	0x10000b4e
    8454:	2009c03c 	.word	0x2009c03c
    8458:	0000b72e 	.word	0x0000b72e
    845c:	2009c038 	.word	0x2009c038
    8460:	40008008 	.word	0x40008008
    8464:	4000801c 	.word	0x4000801c
    8468:	000186a0 	.word	0x000186a0
    846c:	13038dc0 	.word	0x13038dc0
    8470:	10000c64 	.word	0x10000c64
    8474:	40008014 	.word	0x40008014
    8478:	10003b30 	.word	0x10003b30
    847c:	10000450 	.word	0x10000450
		if ((buf->data[0] & 0b11) == 0b11 && buf->data[1] > 0) {
    8480:	f001 0103 	and.w	r1, r1, #3
    8484:	2903      	cmp	r1, #3
    8486:	d1b6      	bne.n	83f6 <le_phy_main+0x2d2>
    8488:	f895 9001 	ldrb.w	r9, [r5, #1]
    848c:	f1b9 0f00 	cmp.w	r9, #0
    8490:	d0b1      	beq.n	83f6 <le_phy_main+0x2d2>
			switch (buf->data[2]) {
    8492:	78ab      	ldrb	r3, [r5, #2]
    8494:	b193      	cbz	r3, 84bc <le_phy_main+0x398>
    8496:	2b01      	cmp	r3, #1
    8498:	d1ad      	bne.n	83f6 <le_phy_main+0x2d2>
					if (buf->data[1] == 8)
    849a:	f1b9 0f08 	cmp.w	r9, #8
    849e:	d1aa      	bne.n	83f6 <le_phy_main+0x2d2>
	conn.channel_map_update_instant = extract_field(buf, 8, 2);
    84a0:	4649      	mov	r1, r9
    84a2:	2202      	movs	r2, #2
    84a4:	4628      	mov	r0, r5
	conn.channel_map_update_pending = 1;
    84a6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
	conn.channel_map_update_instant = extract_field(buf, 8, 2);
    84aa:	f7ff f8f9 	bl	76a0 <extract_field>
	le_parse_channel_map(&buf->data[3], &conn.pending_remapping);
    84ae:	4924      	ldr	r1, [pc, #144]	; (8540 <le_phy_main+0x41c>)
	conn.channel_map_update_instant = extract_field(buf, 8, 2);
    84b0:	f8a4 0124 	strh.w	r0, [r4, #292]	; 0x124
	le_parse_channel_map(&buf->data[3], &conn.pending_remapping);
    84b4:	1ce8      	adds	r0, r5, #3
    84b6:	f7fe fd63 	bl	6f80 <le_parse_channel_map>
}
    84ba:	e79c      	b.n	83f6 <le_phy_main+0x2d2>
					if (buf->data[1] == 12)
    84bc:	f1b9 0f0c 	cmp.w	r9, #12
    84c0:	d199      	bne.n	83f6 <le_phy_main+0x2d2>
	conn.win_size            = extract_field(buf, 3, 1);
    84c2:	2201      	movs	r2, #1
    84c4:	4628      	mov	r0, r5
    84c6:	f7ff f8eb 	bl	76a0 <extract_field>
	conn.win_offset          = extract_field(buf, 4, 2);
    84ca:	2202      	movs	r2, #2
	conn.win_size            = extract_field(buf, 3, 1);
    84cc:	b2c6      	uxtb	r6, r0
	conn.win_offset          = extract_field(buf, 4, 2);
    84ce:	2104      	movs	r1, #4
    84d0:	4628      	mov	r0, r5
	conn.win_size            = extract_field(buf, 3, 1);
    84d2:	f884 6038 	strb.w	r6, [r4, #56]	; 0x38
	conn.win_offset          = extract_field(buf, 4, 2);
    84d6:	f7ff f8e3 	bl	76a0 <extract_field>
	conn.conn_update_pending_interval = extract_field(buf, 6, 2);
    84da:	2202      	movs	r2, #2
	conn.win_offset          = extract_field(buf, 4, 2);
    84dc:	4607      	mov	r7, r0
	conn.conn_update_pending_interval = extract_field(buf, 6, 2);
    84de:	2106      	movs	r1, #6
	conn.win_offset          = extract_field(buf, 4, 2);
    84e0:	63e0      	str	r0, [r4, #60]	; 0x3c
	conn.conn_update_pending_interval = extract_field(buf, 6, 2);
    84e2:	4628      	mov	r0, r5
    84e4:	f7ff f8dc 	bl	76a0 <extract_field>
	conn.conn_update_pending_supervision_timeout = extract_field(buf, 10, 2);
    84e8:	2202      	movs	r2, #2
    84ea:	210a      	movs	r1, #10
	conn.conn_update_pending_interval = extract_field(buf, 6, 2);
    84ec:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
    84f0:	9003      	str	r0, [sp, #12]
	conn.conn_update_pending_supervision_timeout = extract_field(buf, 10, 2);
    84f2:	4628      	mov	r0, r5
    84f4:	f7ff f8d4 	bl	76a0 <extract_field>
	conn.conn_update_instant = extract_field(buf, 12, 2);
    84f8:	2202      	movs	r2, #2
	conn.conn_update_pending_supervision_timeout = extract_field(buf, 10, 2);
    84fa:	4682      	mov	sl, r0
    84fc:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
	conn.conn_update_instant = extract_field(buf, 12, 2);
    8500:	4649      	mov	r1, r9
    8502:	4628      	mov	r0, r5
    8504:	f7ff f8cc 	bl	76a0 <extract_field>
	conn.win_offset *= USEC(1250);
    8508:	f243 02d4 	movw	r2, #12500	; 0x30d4
	conn.conn_update_pending_interval *= USEC(1250);
    850c:	9b03      	ldr	r3, [sp, #12]
	conn.conn_update_instant = extract_field(buf, 12, 2);
    850e:	f8a4 011c 	strh.w	r0, [r4, #284]	; 0x11c
	conn.conn_update_pending_interval *= USEC(1250);
    8512:	4353      	muls	r3, r2
    8514:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
	conn.conn_update_pending = 1;
    8518:	2301      	movs	r3, #1
	conn.win_size   *= USEC(1250);
    851a:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    851e:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    8522:	eb06 0680 	add.w	r6, r6, r0, lsl #2
	conn.conn_update_pending_supervision_timeout *= MSEC(10);
    8526:	4807      	ldr	r0, [pc, #28]	; (8544 <le_phy_main+0x420>)
	conn.win_offset *= USEC(1250);
    8528:	4357      	muls	r7, r2
	conn.conn_update_pending_supervision_timeout *= MSEC(10);
    852a:	fb00 f00a 	mul.w	r0, r0, sl
	conn.win_size   *= USEC(1250);
    852e:	00b6      	lsls	r6, r6, #2
    8530:	f884 6038 	strb.w	r6, [r4, #56]	; 0x38
	conn.win_offset *= USEC(1250);
    8534:	63e7      	str	r7, [r4, #60]	; 0x3c
	conn.conn_update_pending_supervision_timeout *= MSEC(10);
    8536:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
	conn.conn_update_pending = 1;
    853a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
}
    853e:	e75a      	b.n	83f6 <le_phy_main+0x2d2>
    8540:	10000d4c 	.word	0x10000d4c
    8544:	000186a0 	.word	0x000186a0

00008548 <queue_init>:

// queue implementation is based heavily on Koopman's "Better Embedded
// Systems Software" section 20.3.3.1 pg 209

void queue_init(queue_t *f) {
	f->head = 0;
    8548:	2300      	movs	r3, #0
	f->tail = 0;
    854a:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
}
    854e:	4770      	bx	lr

00008550 <queue_insert>:

// insert
int queue_insert(queue_t *f, void *x) {
	unsigned newtail;
	// access next free element
	newtail = f->tail + 1;
    8550:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

	// wrap around to beginning if needed
	if (newtail >= FIFOSIZE) { newtail = 0; }

	// if head and tail are equal, queue is full
	if (newtail == f->head) { return 0; }
    8552:	6a82      	ldr	r2, [r0, #40]	; 0x28
	newtail = f->tail + 1;
    8554:	3301      	adds	r3, #1
	if (newtail >= FIFOSIZE) { newtail = 0; }
    8556:	2b0a      	cmp	r3, #10
    8558:	bf28      	it	cs
    855a:	2300      	movcs	r3, #0
	if (newtail == f->head) { return 0; }
    855c:	429a      	cmp	r2, r3

	// write data before updating pointer
	f->data[newtail] = x;
    855e:	bf1d      	ittte	ne
    8560:	f840 1023 	strne.w	r1, [r0, r3, lsl #2]
	f->tail = newtail;
    8564:	62c3      	strne	r3, [r0, #44]	; 0x2c

	return 1;
    8566:	2001      	movne	r0, #1
	if (newtail == f->head) { return 0; }
    8568:	2000      	moveq	r0, #0
}
    856a:	4770      	bx	lr

0000856c <queue_remove>:

// TODO remove
int queue_remove(queue_t *f, void **x) {
	unsigned newhead;

	if (f->head == f->tail) { return 0; }
    856c:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
    8570:	4293      	cmp	r3, r2
    8572:	d009      	beq.n	8588 <queue_remove+0x1c>

	newhead = f->head + 1;
    8574:	3301      	adds	r3, #1

	if (newhead >= FIFOSIZE) { newhead = 0; }
    8576:	2b0a      	cmp	r3, #10
    8578:	bf28      	it	cs
    857a:	2300      	movcs	r3, #0

	*x = f->data[newhead];
    857c:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    8580:	600a      	str	r2, [r1, #0]
	f->head = newhead;
    8582:	6283      	str	r3, [r0, #40]	; 0x28

	return 1;
    8584:	2001      	movs	r0, #1
    8586:	4770      	bx	lr
	if (f->head == f->tail) { return 0; }
    8588:	2000      	movs	r0, #0
}
    858a:	4770      	bx	lr

0000858c <cc2400_rangetest>:
 *   crc: 2 bytes
 */

#ifdef TX_ENABLE
void cc2400_rangetest(volatile u16 *chan_ptr)
{
    858c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8590:	b099      	sub	sp, #100	; 0x64
    8592:	af00      	add	r7, sp, #0
	u8 len = 22;
	u8 pa = 0;
	u8 txbuf[len];
	u8 rxbuf[len];

	txbuf[0] = len - 1; // length of data (rest of payload)
    8594:	2315      	movs	r3, #21
    8596:	863b      	strh	r3, [r7, #48]	; 0x30
	txbuf[1] = 0; // request

	// read device serial number
	command[0] = 58;
    8598:	233a      	movs	r3, #58	; 0x3a
    859a:	60bb      	str	r3, [r7, #8]
	iap_entry(command, result);
    859c:	4b96      	ldr	r3, [pc, #600]	; (87f8 <cc2400_rangetest+0x26c>)
{
    859e:	4606      	mov	r6, r0
	iap_entry(command, result);
    85a0:	681b      	ldr	r3, [r3, #0]
    85a2:	f107 011c 	add.w	r1, r7, #28
    85a6:	f107 0008 	add.w	r0, r7, #8
{
    85aa:	f8c7 d004 	str.w	sp, [r7, #4]
	iap_entry(command, result);
    85ae:	4798      	blx	r3
	if ((result[0] & 0xFF) != 0) //status check
    85b0:	7f3c      	ldrb	r4, [r7, #28]
    85b2:	2c00      	cmp	r4, #0
    85b4:	f040 811b 	bne.w	87ee <cc2400_rangetest+0x262>
		return;
	txbuf[2] = (result[1] >> 24) & 0xFF;
    85b8:	6a3b      	ldr	r3, [r7, #32]
    85ba:	8c3a      	ldrh	r2, [r7, #32]
    85bc:	0e19      	lsrs	r1, r3, #24
	txbuf[3] = (result[1] >> 16) & 0xFF;
    85be:	0c1b      	lsrs	r3, r3, #16
    85c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	txbuf[4] = (result[1] >> 8) & 0xFF;
	txbuf[5] = result[1] & 0xFF;
	txbuf[6] = (result[2] >> 24) & 0xFF;
    85c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	txbuf[2] = (result[1] >> 24) & 0xFF;
    85c6:	f887 1032 	strb.w	r1, [r7, #50]	; 0x32
	txbuf[6] = (result[2] >> 24) & 0xFF;
    85ca:	0e19      	lsrs	r1, r3, #24
	txbuf[7] = (result[2] >> 16) & 0xFF;
    85cc:	0c1b      	lsrs	r3, r3, #16
    85ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	txbuf[8] = (result[2] >> 8) & 0xFF;
	txbuf[9] = result[2] & 0xFF;
	txbuf[10] = (result[3] >> 24) & 0xFF;
    85d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
	txbuf[6] = (result[2] >> 24) & 0xFF;
    85d4:	f887 1036 	strb.w	r1, [r7, #54]	; 0x36
	txbuf[10] = (result[3] >> 24) & 0xFF;
    85d8:	0e19      	lsrs	r1, r3, #24
	txbuf[11] = (result[3] >> 16) & 0xFF;
    85da:	0c1b      	lsrs	r3, r3, #16
    85dc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	txbuf[12] = (result[3] >> 8) & 0xFF;
	txbuf[13] = result[3] & 0xFF;
	txbuf[14] = (result[4] >> 24) & 0xFF;
    85e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	txbuf[10] = (result[3] >> 24) & 0xFF;
    85e2:	f887 103a 	strb.w	r1, [r7, #58]	; 0x3a
	txbuf[14] = (result[4] >> 24) & 0xFF;
    85e6:	0e19      	lsrs	r1, r3, #24
	txbuf[15] = (result[4] >> 16) & 0xFF;
    85e8:	0c1b      	lsrs	r3, r3, #16
    85ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	txbuf[16] = (result[4] >> 8) & 0xFF;
	txbuf[17] = result[4] & 0xFF;

	txbuf[18] = pa; // request pa
	txbuf[19] = 0; // request number
	txbuf[20] = 0xff; // reply pa
    85ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
    85f2:	ba52      	rev16	r2, r2
	txbuf[4] = (result[1] >> 8) & 0xFF;
    85f4:	86ba      	strh	r2, [r7, #52]	; 0x34
	txbuf[9] = result[2] & 0xFF;
    85f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
	txbuf[21] = 0xff; // reply number

	// Bluetooth-like modulation
	cc2400_set(LMTST,   0x2b22);
    85f8:	2012      	movs	r0, #18
    85fa:	ba52      	rev16	r2, r2
	txbuf[8] = (result[2] >> 8) & 0xFF;
    85fc:	873a      	strh	r2, [r7, #56]	; 0x38
	txbuf[13] = result[3] & 0xFF;
    85fe:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
	txbuf[14] = (result[4] >> 24) & 0xFF;
    8600:	f887 103e 	strb.w	r1, [r7, #62]	; 0x3e
    8604:	ba52      	rev16	r2, r2
	txbuf[12] = (result[3] >> 8) & 0xFF;
    8606:	87ba      	strh	r2, [r7, #60]	; 0x3c
	txbuf[17] = result[4] & 0xFF;
    8608:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
	cc2400_set(LMTST,   0x2b22);
    860a:	f642 3122 	movw	r1, #11042	; 0x2b22
    860e:	ba52      	rev16	r2, r2
	txbuf[16] = (result[4] >> 8) & 0xFF;
    8610:	f8a7 2040 	strh.w	r2, [r7, #64]	; 0x40
	txbuf[20] = 0xff; // reply pa
    8614:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	cc2400_set(LMTST,   0x2b22);
    8618:	f001 fab9 	bl	9b8e <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);
    861c:	f241 314b 	movw	r1, #4939	; 0x134b
    8620:	2014      	movs	r0, #20
    8622:	f001 fab4 	bl	9b8e <cc2400_set>
	cc2400_set(GRMDM,   0x0df1);  // default value
    8626:	f640 51f1 	movw	r1, #3569	; 0xdf1
    862a:	2020      	movs	r0, #32
    862c:	f001 faaf 	bl	9b8e <cc2400_set>
	cc2400_set(FSDIV,   *chan_ptr);
    8630:	8831      	ldrh	r1, [r6, #0]
    8632:	2002      	movs	r0, #2
    8634:	b289      	uxth	r1, r1
    8636:	f001 faaa 	bl	9b8e <cc2400_set>
	cc2400_set(SYNCH,   0xf9ae);
    863a:	f64f 11ae 	movw	r1, #63918	; 0xf9ae
    863e:	202d      	movs	r0, #45	; 0x2d
    8640:	f001 faa5 	bl	9b8e <cc2400_set>
	cc2400_set(SYNCL,   0x1584);
    8644:	f241 5184 	movw	r1, #5508	; 0x1584
    8648:	202c      	movs	r0, #44	; 0x2c
    864a:	f001 faa0 	bl	9b8e <cc2400_set>
	cc2400_set(FREND,   8 | pa);
    864e:	2108      	movs	r1, #8
    8650:	2005      	movs	r0, #5
    8652:	f001 fa9c 	bl	9b8e <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029);
    8656:	2129      	movs	r1, #41	; 0x29
    8658:	2003      	movs	r0, #3
    865a:	f001 fa98 	bl	9b8e <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    865e:	f001 fb2f 	bl	9cc0 <cc2400_status>
    8662:	0641      	lsls	r1, r0, #25
    8664:	d5fb      	bpl.n	865e <cc2400_rangetest+0xd2>
	cc2400_strobe(SFSON);
    8666:	2061      	movs	r0, #97	; 0x61
    8668:	f001 fb31 	bl	9cce <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    866c:	f001 fb28 	bl	9cc0 <cc2400_status>
    8670:	0742      	lsls	r2, r0, #29
    8672:	d5fb      	bpl.n	866c <cc2400_rangetest+0xe0>
	TXLED_SET;
    8674:	f44f 7280 	mov.w	r2, #256	; 0x100
    8678:	4b60      	ldr	r3, [pc, #384]	; (87fc <cc2400_rangetest+0x270>)
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    867a:	2180      	movs	r1, #128	; 0x80
    867c:	4698      	mov	r8, r3
	TXLED_SET;
    867e:	601a      	str	r2, [r3, #0]
	PAEN_SET;
    8680:	4a5f      	ldr	r2, [pc, #380]	; (8800 <cc2400_rangetest+0x274>)
    8682:	6011      	str	r1, [r2, #0]
#endif
	for (pa = 0; pa < 8; pa++) {
		cc2400_set(FREND, 8 | pa);
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
    8684:	f04f 0900 	mov.w	r9, #0
    8688:	b2e5      	uxtb	r5, r4
		cc2400_set(FREND, 8 | pa);
    868a:	2005      	movs	r0, #5
    868c:	f045 0108 	orr.w	r1, r5, #8
    8690:	f001 fa7d 	bl	9b8e <cc2400_set>
		txbuf[18] = pa;
    8694:	f887 5042 	strb.w	r5, [r7, #66]	; 0x42
			txbuf[19] = i;
    8698:	f887 9043 	strb.w	r9, [r7, #67]	; 0x43
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    869c:	200e      	movs	r0, #14
    869e:	f001 fa6d 	bl	9b7c <cc2400_get>
    86a2:	f000 001f 	and.w	r0, r0, #31
    86a6:	280f      	cmp	r0, #15
    86a8:	d1f8      	bne.n	869c <cc2400_rangetest+0x110>
    86aa:	f107 0530 	add.w	r5, r7, #48	; 0x30
    86ae:	46ab      	mov	fp, r5
			// transmit a packet
			for (j = 0; j < len; j++)
    86b0:	f04f 0a00 	mov.w	sl, #0
				cc2400_set8(FIFOREG, txbuf[j]);
    86b4:	2070      	movs	r0, #112	; 0x70
    86b6:	f81b 1b01 	ldrb.w	r1, [fp], #1
			for (j = 0; j < len; j++)
    86ba:	f10a 0a01 	add.w	sl, sl, #1
				cc2400_set8(FIFOREG, txbuf[j]);
    86be:	f001 fa74 	bl	9baa <cc2400_set8>
			for (j = 0; j < len; j++)
    86c2:	f1ba 0f16 	cmp.w	sl, #22
    86c6:	d1f5      	bne.n	86b4 <cc2400_rangetest+0x128>
			cc2400_strobe(STX);
    86c8:	2063      	movs	r0, #99	; 0x63
		for (i = 0; i < 16; i++) {
    86ca:	f109 0901 	add.w	r9, r9, #1
			cc2400_strobe(STX);
    86ce:	f001 fafe 	bl	9cce <cc2400_strobe>
		for (i = 0; i < 16; i++) {
    86d2:	f1b9 0f10 	cmp.w	r9, #16
    86d6:	d1df      	bne.n	8698 <cc2400_rangetest+0x10c>
	for (pa = 0; pa < 8; pa++) {
    86d8:	3401      	adds	r4, #1
    86da:	2c08      	cmp	r4, #8
    86dc:	d1d2      	bne.n	8684 <cc2400_rangetest+0xf8>
		}
	}
	// sent packet, now look for repeated packet
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    86de:	200e      	movs	r0, #14
    86e0:	f001 fa4c 	bl	9b7c <cc2400_get>
    86e4:	f000 001f 	and.w	r0, r0, #31
    86e8:	280f      	cmp	r0, #15
    86ea:	d1f8      	bne.n	86de <cc2400_rangetest+0x152>
	TXLED_CLR;
    86ec:	f44f 7380 	mov.w	r3, #256	; 0x100
    86f0:	4c44      	ldr	r4, [pc, #272]	; (8804 <cc2400_rangetest+0x278>)
	cc2400_strobe(SRFOFF);
    86f2:	2064      	movs	r0, #100	; 0x64
	TXLED_CLR;
    86f4:	6023      	str	r3, [r4, #0]
	cc2400_strobe(SRFOFF);
    86f6:	f001 faea 	bl	9cce <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    86fa:	f001 fae1 	bl	9cc0 <cc2400_status>
    86fe:	0743      	lsls	r3, r0, #29
    8700:	d4fb      	bmi.n	86fa <cc2400_rangetest+0x16e>
	cc2400_set(FSDIV, *chan_ptr - 1);
    8702:	8831      	ldrh	r1, [r6, #0]
    8704:	2002      	movs	r0, #2
    8706:	3901      	subs	r1, #1
    8708:	b289      	uxth	r1, r1
    870a:	f001 fa40 	bl	9b8e <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    870e:	f001 fad7 	bl	9cc0 <cc2400_status>
    8712:	0640      	lsls	r0, r0, #25
    8714:	d5fb      	bpl.n	870e <cc2400_rangetest+0x182>
	cc2400_strobe(SFSON);
    8716:	2061      	movs	r0, #97	; 0x61
    8718:	f001 fad9 	bl	9cce <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    871c:	f001 fad0 	bl	9cc0 <cc2400_status>
    8720:	0741      	lsls	r1, r0, #29
    8722:	d5fb      	bpl.n	871c <cc2400_rangetest+0x190>
	RXLED_SET;
    8724:	2310      	movs	r3, #16
	while (1) {
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
		cc2400_strobe(SRX);
		while (!(cc2400_status() & SYNC_RECEIVED));
		USRLED_SET;
    8726:	f04f 0a02 	mov.w	sl, #2
	RXLED_SET;
    872a:	f8c8 3000 	str.w	r3, [r8]
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    872e:	200e      	movs	r0, #14
    8730:	f001 fa24 	bl	9b7c <cc2400_get>
    8734:	f000 001f 	and.w	r0, r0, #31
    8738:	280f      	cmp	r0, #15
    873a:	d1f8      	bne.n	872e <cc2400_rangetest+0x1a2>
		cc2400_strobe(SRX);
    873c:	2062      	movs	r0, #98	; 0x62
    873e:	f001 fac6 	bl	9cce <cc2400_strobe>
		while (!(cc2400_status() & SYNC_RECEIVED));
    8742:	f001 fabd 	bl	9cc0 <cc2400_status>
    8746:	06c2      	lsls	r2, r0, #27
    8748:	d5fb      	bpl.n	8742 <cc2400_rangetest+0x1b6>
		USRLED_SET;
    874a:	f107 0648 	add.w	r6, r7, #72	; 0x48
    874e:	46b3      	mov	fp, r6
		for (j = 0; j < len; j++)
    8750:	f04f 0900 	mov.w	r9, #0
		USRLED_SET;
    8754:	f8c8 a000 	str.w	sl, [r8]
			rxbuf[j] = cc2400_get8(FIFOREG);
    8758:	2070      	movs	r0, #112	; 0x70
    875a:	f001 fa1d 	bl	9b98 <cc2400_get8>
		for (j = 0; j < len; j++)
    875e:	f109 0901 	add.w	r9, r9, #1
    8762:	f1b9 0f16 	cmp.w	r9, #22
			rxbuf[j] = cc2400_get8(FIFOREG);
    8766:	f80b 0b01 	strb.w	r0, [fp], #1
		for (j = 0; j < len; j++)
    876a:	d1f5      	bne.n	8758 <cc2400_rangetest+0x1cc>
		if (cc2400_status() & STATUS_CRC_OK)
    876c:	f001 faa8 	bl	9cc0 <cc2400_status>
    8770:	0703      	lsls	r3, r0, #28
    8772:	d402      	bmi.n	877a <cc2400_rangetest+0x1ee>
			break;
		USRLED_CLR;
    8774:	f8c4 a000 	str.w	sl, [r4]
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8778:	e7d9      	b.n	872e <cc2400_rangetest+0x1a2>
	}

	// done
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    877a:	200e      	movs	r0, #14
    877c:	f001 f9fe 	bl	9b7c <cc2400_get>
    8780:	f000 001f 	and.w	r0, r0, #31
    8784:	280f      	cmp	r0, #15
    8786:	d1f8      	bne.n	877a <cc2400_rangetest+0x1ee>
	cc2400_strobe(SRFOFF);
    8788:	2064      	movs	r0, #100	; 0x64
    878a:	f001 faa0 	bl	9cce <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    878e:	f001 fa97 	bl	9cc0 <cc2400_status>
    8792:	f010 0004 	ands.w	r0, r0, #4
    8796:	d1fa      	bne.n	878e <cc2400_rangetest+0x202>
#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    8798:	2280      	movs	r2, #128	; 0x80
    879a:	4b1b      	ldr	r3, [pc, #108]	; (8808 <cc2400_rangetest+0x27c>)
    879c:	601a      	str	r2, [r3, #0]
#endif
	RXLED_CLR;
    879e:	2310      	movs	r3, #16
    87a0:	6023      	str	r3, [r4, #0]

	// get test result
	rr.valid       = 1;
	rr.request_pa  = rxbuf[18];
    87a2:	f897 105a 	ldrb.w	r1, [r7, #90]	; 0x5a
	rr.valid       = 1;
    87a6:	4b19      	ldr	r3, [pc, #100]	; (880c <cc2400_rangetest+0x280>)
    87a8:	2201      	movs	r2, #1
	rr.request_pa  = rxbuf[18];
    87aa:	7059      	strb	r1, [r3, #1]
	rr.request_num = rxbuf[19];
    87ac:	f897 105b 	ldrb.w	r1, [r7, #91]	; 0x5b
	rr.valid       = 1;
    87b0:	701a      	strb	r2, [r3, #0]
	rr.request_num = rxbuf[19];
    87b2:	7099      	strb	r1, [r3, #2]
	rr.reply_pa    = rxbuf[20];
    87b4:	f897 105c 	ldrb.w	r1, [r7, #92]	; 0x5c
	rr.reply_num   = rxbuf[21];

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
    87b8:	f887 2031 	strb.w	r2, [r7, #49]	; 0x31
	rr.reply_pa    = rxbuf[20];
    87bc:	70d9      	strb	r1, [r3, #3]
	rr.reply_num   = rxbuf[21];
    87be:	f897 105d 	ldrb.w	r1, [r7, #93]	; 0x5d
    87c2:	7119      	strb	r1, [r3, #4]
	txbuf[1] = 1; // expected value in rxbuf
    87c4:	2102      	movs	r1, #2
	for (i = 0; i < 18; i++)
		if (rxbuf[i] != txbuf[i])
    87c6:	f816 eb01 	ldrb.w	lr, [r6], #1
    87ca:	f815 cb01 	ldrb.w	ip, [r5], #1
			rr.valid = 2 + i;
    87ce:	45e6      	cmp	lr, ip
    87d0:	bf18      	it	ne
    87d2:	460a      	movne	r2, r1
    87d4:	f101 0101 	add.w	r1, r1, #1
    87d8:	b2c9      	uxtb	r1, r1
    87da:	bf18      	it	ne
    87dc:	2001      	movne	r0, #1
	for (i = 0; i < 18; i++)
    87de:	2914      	cmp	r1, #20
    87e0:	d1f1      	bne.n	87c6 <cc2400_rangetest+0x23a>
    87e2:	b100      	cbz	r0, 87e6 <cc2400_rangetest+0x25a>
    87e4:	701a      	strb	r2, [r3, #0]

	USRLED_CLR;
    87e6:	2302      	movs	r3, #2
    87e8:	6023      	str	r3, [r4, #0]
    87ea:	f8d7 d004 	ldr.w	sp, [r7, #4]
}
    87ee:	3764      	adds	r7, #100	; 0x64
    87f0:	46bd      	mov	sp, r7
    87f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    87f6:	bf00      	nop
    87f8:	0000b890 	.word	0x0000b890
    87fc:	2009c038 	.word	0x2009c038
    8800:	2009c058 	.word	0x2009c058
    8804:	2009c03c 	.word	0x2009c03c
    8808:	2009c05c 	.word	0x2009c05c
    880c:	10001828 	.word	0x10001828

00008810 <cc2400_repeater>:
#endif

/* This is the repeater implementation to be used with cc2400_rangetest(). */
#ifdef TX_ENABLE
void cc2400_repeater(volatile u16 *chan_ptr)
{
    8810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8814:	b089      	sub	sp, #36	; 0x24
		cc2400_set(FREND,   0x0008); // minimum tx power
		cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
		while (!(cc2400_status() & XOSC16M_STABLE));
		cc2400_strobe(SFSON);
		while (!(cc2400_status() & FS_LOCK));
		RXLED_SET;
    8816:	f8df a180 	ldr.w	sl, [pc, #384]	; 8998 <cc2400_repeater+0x188>
{
    881a:	4605      	mov	r5, r0
		cc2400_set(FSDIV,   *chan_ptr - 1);
    881c:	2602      	movs	r6, #2
    881e:	46d3      	mov	fp, sl
		cc2400_set(LMTST,   0x2b22);
    8820:	f642 3122 	movw	r1, #11042	; 0x2b22
    8824:	2012      	movs	r0, #18
    8826:	f001 f9b2 	bl	9b8e <cc2400_set>
		cc2400_set(MDMTST0, 0x134b);
    882a:	f241 314b 	movw	r1, #4939	; 0x134b
    882e:	2014      	movs	r0, #20
    8830:	f001 f9ad 	bl	9b8e <cc2400_set>
		cc2400_set(FSDIV,   *chan_ptr - 1);
    8834:	8829      	ldrh	r1, [r5, #0]
    8836:	2002      	movs	r0, #2
    8838:	3901      	subs	r1, #1
    883a:	b289      	uxth	r1, r1
    883c:	f001 f9a7 	bl	9b8e <cc2400_set>
		cc2400_set(SYNCH,   0xf9ae);
    8840:	f64f 11ae 	movw	r1, #63918	; 0xf9ae
    8844:	202d      	movs	r0, #45	; 0x2d
    8846:	f001 f9a2 	bl	9b8e <cc2400_set>
		cc2400_set(SYNCL,   0x1584);
    884a:	f241 5184 	movw	r1, #5508	; 0x1584
    884e:	202c      	movs	r0, #44	; 0x2c
    8850:	f001 f99d 	bl	9b8e <cc2400_set>
		cc2400_set(FREND,   0x0008); // minimum tx power
    8854:	2108      	movs	r1, #8
    8856:	2005      	movs	r0, #5
    8858:	f001 f999 	bl	9b8e <cc2400_set>
		cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    885c:	2129      	movs	r1, #41	; 0x29
    885e:	2003      	movs	r0, #3
    8860:	f001 f995 	bl	9b8e <cc2400_set>
		while (!(cc2400_status() & XOSC16M_STABLE));
    8864:	f001 fa2c 	bl	9cc0 <cc2400_status>
    8868:	0641      	lsls	r1, r0, #25
    886a:	d5fb      	bpl.n	8864 <cc2400_repeater+0x54>
		cc2400_strobe(SFSON);
    886c:	2061      	movs	r0, #97	; 0x61
    886e:	f001 fa2e 	bl	9cce <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    8872:	f001 fa25 	bl	9cc0 <cc2400_status>
    8876:	0742      	lsls	r2, r0, #29
    8878:	d5fb      	bpl.n	8872 <cc2400_repeater+0x62>
		RXLED_SET;
    887a:	2310      	movs	r3, #16
    887c:	f8ca 3000 	str.w	r3, [sl]
		TXLED_CLR;
    8880:	f44f 7380 	mov.w	r3, #256	; 0x100
    8884:	4c42      	ldr	r4, [pc, #264]	; (8990 <cc2400_repeater+0x180>)
		USRLED_CLR;
#ifdef UBERTOOTH_ONE
		PAEN_SET;
    8886:	2280      	movs	r2, #128	; 0x80
    8888:	46a0      	mov	r8, r4
		TXLED_CLR;
    888a:	6023      	str	r3, [r4, #0]
		PAEN_SET;
    888c:	4b41      	ldr	r3, [pc, #260]	; (8994 <cc2400_repeater+0x184>)
		USRLED_CLR;
    888e:	6026      	str	r6, [r4, #0]
		PAEN_SET;
    8890:	601a      	str	r2, [r3, #0]
#endif
		while (1) {
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8892:	200e      	movs	r0, #14
    8894:	f001 f972 	bl	9b7c <cc2400_get>
    8898:	f000 001f 	and.w	r0, r0, #31
    889c:	280f      	cmp	r0, #15
    889e:	d1f8      	bne.n	8892 <cc2400_repeater+0x82>
			USRLED_CLR;
			cc2400_strobe(SRX);
    88a0:	2062      	movs	r0, #98	; 0x62
			USRLED_CLR;
    88a2:	f8c8 6000 	str.w	r6, [r8]
			cc2400_strobe(SRX);
    88a6:	f001 fa12 	bl	9cce <cc2400_strobe>
			while (!(cc2400_status() & SYNC_RECEIVED));
    88aa:	f001 fa09 	bl	9cc0 <cc2400_status>
    88ae:	06c3      	lsls	r3, r0, #27
    88b0:	d5fb      	bpl.n	88aa <cc2400_repeater+0x9a>
			USRLED_SET;
			for (i = 0; i < len; i++)
    88b2:	2700      	movs	r7, #0
			USRLED_SET;
    88b4:	f8cb 6000 	str.w	r6, [fp]
    88b8:	f10d 0908 	add.w	r9, sp, #8
				buf[i] = cc2400_get8(FIFOREG);
    88bc:	2070      	movs	r0, #112	; 0x70
    88be:	f001 f96b 	bl	9b98 <cc2400_get8>
			for (i = 0; i < len; i++)
    88c2:	3701      	adds	r7, #1
    88c4:	2f16      	cmp	r7, #22
				buf[i] = cc2400_get8(FIFOREG);
    88c6:	f809 0b01 	strb.w	r0, [r9], #1
			for (i = 0; i < len; i++)
    88ca:	d1f7      	bne.n	88bc <cc2400_repeater+0xac>
			if (cc2400_status() & STATUS_CRC_OK)
    88cc:	f001 f9f8 	bl	9cc0 <cc2400_status>
    88d0:	0707      	lsls	r7, r0, #28
    88d2:	d5de      	bpl.n	8892 <cc2400_repeater+0x82>
				break;
		}
		// got packet, now repeat it
		i = 2000000; while (--i); // allow time for requester to switch to rx
		USRLED_CLR;
		RXLED_CLR;
    88d4:	2310      	movs	r3, #16
		USRLED_CLR;
    88d6:	6026      	str	r6, [r4, #0]
		cc2400_strobe(SRFOFF);
    88d8:	2064      	movs	r0, #100	; 0x64
		RXLED_CLR;
    88da:	6023      	str	r3, [r4, #0]
		cc2400_strobe(SRFOFF);
    88dc:	f001 f9f7 	bl	9cce <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    88e0:	f001 f9ee 	bl	9cc0 <cc2400_status>
    88e4:	0740      	lsls	r0, r0, #29
    88e6:	d4fb      	bmi.n	88e0 <cc2400_repeater+0xd0>
		while (!(cc2400_status() & XOSC16M_STABLE));
    88e8:	f001 f9ea 	bl	9cc0 <cc2400_status>
    88ec:	0641      	lsls	r1, r0, #25
    88ee:	d5fb      	bpl.n	88e8 <cc2400_repeater+0xd8>
		cc2400_set(FSDIV, *chan_ptr);
    88f0:	8829      	ldrh	r1, [r5, #0]
    88f2:	2002      	movs	r0, #2
    88f4:	b289      	uxth	r1, r1
    88f6:	f001 f94a 	bl	9b8e <cc2400_set>
		while (!(cc2400_status() & XOSC16M_STABLE));
    88fa:	f001 f9e1 	bl	9cc0 <cc2400_status>
    88fe:	0642      	lsls	r2, r0, #25
    8900:	d5fb      	bpl.n	88fa <cc2400_repeater+0xea>
		cc2400_strobe(SFSON);
    8902:	2061      	movs	r0, #97	; 0x61
    8904:	f001 f9e3 	bl	9cce <cc2400_strobe>
		TXLED_SET;
    8908:	f44f 7380 	mov.w	r3, #256	; 0x100
    890c:	f8cb 3000 	str.w	r3, [fp]
		buf[0] = len - 1; // length of data (rest of payload)
    8910:	f240 1315 	movw	r3, #277	; 0x115
    8914:	2700      	movs	r7, #0
    8916:	f8ad 3008 	strh.w	r3, [sp, #8]
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
    891a:	fa5f f887 	uxtb.w	r8, r7
			cc2400_set(FREND, 8 | pa);
    891e:	f048 0108 	orr.w	r1, r8, #8
    8922:	2005      	movs	r0, #5
    8924:	f001 f933 	bl	9b8e <cc2400_set>
			buf[20] = pa;
    8928:	f88d 801c 	strb.w	r8, [sp, #28]
			for (i = 0; i < 16; i++) {
    892c:	f04f 0800 	mov.w	r8, #0
				buf[21] = i;
    8930:	f88d 801d 	strb.w	r8, [sp, #29]
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8934:	200e      	movs	r0, #14
    8936:	f001 f921 	bl	9b7c <cc2400_get>
    893a:	f000 001f 	and.w	r0, r0, #31
    893e:	280f      	cmp	r0, #15
    8940:	d1f8      	bne.n	8934 <cc2400_repeater+0x124>
				for (j = 0; j < len; j++)
    8942:	f04f 0900 	mov.w	r9, #0
    8946:	ab02      	add	r3, sp, #8
					cc2400_set8(FIFOREG, buf[j]);
    8948:	f813 1b01 	ldrb.w	r1, [r3], #1
    894c:	2070      	movs	r0, #112	; 0x70
				for (j = 0; j < len; j++)
    894e:	f109 0901 	add.w	r9, r9, #1
					cc2400_set8(FIFOREG, buf[j]);
    8952:	e9cd 3300 	strd	r3, r3, [sp]
    8956:	f001 f928 	bl	9baa <cc2400_set8>
				for (j = 0; j < len; j++)
    895a:	f1b9 0f16 	cmp.w	r9, #22
    895e:	9b00      	ldr	r3, [sp, #0]
    8960:	d1f2      	bne.n	8948 <cc2400_repeater+0x138>
				cc2400_strobe(STX);
    8962:	2063      	movs	r0, #99	; 0x63
			for (i = 0; i < 16; i++) {
    8964:	f108 0801 	add.w	r8, r8, #1
				cc2400_strobe(STX);
    8968:	f001 f9b1 	bl	9cce <cc2400_strobe>
			for (i = 0; i < 16; i++) {
    896c:	f1b8 0f10 	cmp.w	r8, #16
    8970:	d1de      	bne.n	8930 <cc2400_repeater+0x120>
		for (pa = 0; pa < 8; pa++) {
    8972:	3701      	adds	r7, #1
    8974:	2f08      	cmp	r7, #8
    8976:	d1d0      	bne.n	891a <cc2400_repeater+0x10a>
			}
		}
		TXLED_CLR;
    8978:	f44f 7380 	mov.w	r3, #256	; 0x100
		cc2400_strobe(SRFOFF);
    897c:	2064      	movs	r0, #100	; 0x64
		TXLED_CLR;
    897e:	6023      	str	r3, [r4, #0]
		cc2400_strobe(SRFOFF);
    8980:	f001 f9a5 	bl	9cce <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    8984:	f001 f99c 	bl	9cc0 <cc2400_status>
    8988:	0743      	lsls	r3, r0, #29
    898a:	d4fb      	bmi.n	8984 <cc2400_repeater+0x174>
    898c:	e748      	b.n	8820 <cc2400_repeater+0x10>
    898e:	bf00      	nop
    8990:	2009c03c 	.word	0x2009c03c
    8994:	2009c058 	.word	0x2009c058
    8998:	2009c038 	.word	0x2009c038

0000899c <cc2400_txtest>:
}
#endif

#ifdef TX_ENABLE
void cc2400_txtest(volatile u8 *mod_ptr, volatile u16 *chan_ptr)
{
    899c:	b538      	push	{r3, r4, r5, lr}
	u16 mdmctrl;
	if (*mod_ptr == MOD_BT_BASIC_RATE) {
    899e:	7803      	ldrb	r3, [r0, #0]
{
    89a0:	460c      	mov	r4, r1
	if (*mod_ptr == MOD_BT_BASIC_RATE) {
    89a2:	b38b      	cbz	r3, 8a08 <cc2400_txtest+0x6c>
		mdmctrl = 0x0029; // 160 kHz frequency deviation
	} else if (*mod_ptr == MOD_BT_LOW_ENERGY) {
    89a4:	7803      	ldrb	r3, [r0, #0]
    89a6:	2b01      	cmp	r3, #1
    89a8:	d12d      	bne.n	8a06 <cc2400_txtest+0x6a>
		mdmctrl = 0x0040; // 250 kHz frequency deviation
    89aa:	2540      	movs	r5, #64	; 0x40
	} else {
		/* oops */
		return;
	}
	cc2400_set(LMTST,   0x2b22);
    89ac:	f642 3122 	movw	r1, #11042	; 0x2b22
    89b0:	2012      	movs	r0, #18
    89b2:	f001 f8ec 	bl	9b8e <cc2400_set>
	cc2400_set(MDMTST0, 0x334b); // with PRNG
    89b6:	f243 314b 	movw	r1, #13131	; 0x334b
    89ba:	2014      	movs	r0, #20
    89bc:	f001 f8e7 	bl	9b8e <cc2400_set>
	cc2400_set(GRMDM,   0x0df1); // default value
    89c0:	f640 51f1 	movw	r1, #3569	; 0xdf1
    89c4:	2020      	movs	r0, #32
    89c6:	f001 f8e2 	bl	9b8e <cc2400_set>
	cc2400_set(FSDIV,   *chan_ptr);
    89ca:	8821      	ldrh	r1, [r4, #0]
    89cc:	2002      	movs	r0, #2
    89ce:	b289      	uxth	r1, r1
    89d0:	f001 f8dd 	bl	9b8e <cc2400_set>
	cc2400_set(MDMCTRL, mdmctrl);
    89d4:	4629      	mov	r1, r5
    89d6:	2003      	movs	r0, #3
    89d8:	f001 f8d9 	bl	9b8e <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    89dc:	f001 f970 	bl	9cc0 <cc2400_status>
    89e0:	0642      	lsls	r2, r0, #25
    89e2:	d5fb      	bpl.n	89dc <cc2400_txtest+0x40>
	cc2400_strobe(SFSON);
    89e4:	2061      	movs	r0, #97	; 0x61
    89e6:	f001 f972 	bl	9cce <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    89ea:	f001 f969 	bl	9cc0 <cc2400_status>
    89ee:	0743      	lsls	r3, r0, #29
    89f0:	d5fb      	bpl.n	89ea <cc2400_txtest+0x4e>
	TXLED_SET;
    89f2:	f44f 7280 	mov.w	r2, #256	; 0x100
    89f6:	4b05      	ldr	r3, [pc, #20]	; (8a0c <cc2400_txtest+0x70>)
	cc2400_strobe(STX);
    89f8:	2063      	movs	r0, #99	; 0x63
	TXLED_SET;
    89fa:	601a      	str	r2, [r3, #0]
	cc2400_strobe(STX);
    89fc:	f001 f967 	bl	9cce <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    8a00:	2280      	movs	r2, #128	; 0x80
    8a02:	4b03      	ldr	r3, [pc, #12]	; (8a10 <cc2400_txtest+0x74>)
    8a04:	601a      	str	r2, [r3, #0]
#endif
}
    8a06:	bd38      	pop	{r3, r4, r5, pc}
		mdmctrl = 0x0029; // 160 kHz frequency deviation
    8a08:	2529      	movs	r5, #41	; 0x29
    8a0a:	e7cf      	b.n	89ac <cc2400_txtest+0x10>
    8a0c:	2009c038 	.word	0x2009c038
    8a10:	2009c058 	.word	0x2009c058

00008a14 <ssp_stop>:
	DIO_SSEL_CLR;
}

static void ssp_stop() {
	// disable CC2400's output (active low)
	DIO_SSEL_SET;
    8a14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    8a18:	4b03      	ldr	r3, [pc, #12]	; (8a28 <ssp_stop+0x14>)
    8a1a:	601a      	str	r2, [r3, #0]

	// disable SSP
	DIO_SSP_CR1 &= ~SSPCR1_SSE;
    8a1c:	4a03      	ldr	r2, [pc, #12]	; (8a2c <ssp_stop+0x18>)
    8a1e:	6813      	ldr	r3, [r2, #0]
    8a20:	f023 0302 	bic.w	r3, r3, #2
    8a24:	6013      	str	r3, [r2, #0]
}
    8a26:	4770      	bx	lr
    8a28:	2009c098 	.word	0x2009c098
    8a2c:	40030004 	.word	0x40030004

00008a30 <do_rx>:
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);

	cc2400_strobe(SRX);
}

static void do_rx(ego_packet_t *packet) {
    8a30:	b530      	push	{r4, r5, lr}
	int i;
	for (i = 0; i < packet_len; i++) {
    8a32:	4b07      	ldr	r3, [pc, #28]	; (8a50 <do_rx+0x20>)
		// make sure there are bytes ready
		while (!(SSP1SR & SSPSR_RNE)) ;
    8a34:	4907      	ldr	r1, [pc, #28]	; (8a54 <do_rx+0x24>)
	for (i = 0; i < packet_len; i++) {
    8a36:	781a      	ldrb	r2, [r3, #0]
    8a38:	2300      	movs	r3, #0
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
    8a3a:	4c07      	ldr	r4, [pc, #28]	; (8a58 <do_rx+0x28>)
	for (i = 0; i < packet_len; i++) {
    8a3c:	429a      	cmp	r2, r3
    8a3e:	dc00      	bgt.n	8a42 <do_rx+0x12>
	}
}
    8a40:	bd30      	pop	{r4, r5, pc}
		while (!(SSP1SR & SSPSR_RNE)) ;
    8a42:	680d      	ldr	r5, [r1, #0]
    8a44:	076d      	lsls	r5, r5, #29
    8a46:	d5fc      	bpl.n	8a42 <do_rx+0x12>
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
    8a48:	6825      	ldr	r5, [r4, #0]
    8a4a:	54c5      	strb	r5, [r0, r3]
	for (i = 0; i < packet_len; i++) {
    8a4c:	3301      	adds	r3, #1
    8a4e:	e7f5      	b.n	8a3c <do_rx+0xc>
    8a50:	10000a6c 	.word	0x10000a6c
    8a54:	4003000c 	.word	0x4003000c
    8a58:	40030008 	.word	0x40030008

00008a5c <sleep_ms>:
static inline int sync_received(void) {
	return cc2400_status() & SYNC_RECEIVED;
}

// sleep for some milliseconds
static void sleep_ms(ego_fsm_state_t *state, u32 duration) {
    8a5c:	b510      	push	{r4, lr}
	state->sleep_start = CLK100NS;
    8a5e:	f640 4435 	movw	r4, #3125	; 0xc35
    8a62:	4b07      	ldr	r3, [pc, #28]	; (8a80 <sleep_ms+0x24>)
    8a64:	4a07      	ldr	r2, [pc, #28]	; (8a84 <sleep_ms+0x28>)
    8a66:	681b      	ldr	r3, [r3, #0]
    8a68:	6812      	ldr	r2, [r2, #0]
    8a6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
    8a6e:	fb04 2303 	mla	r3, r4, r3, r2
    8a72:	6083      	str	r3, [r0, #8]
	state->sleep_duration = duration * 1000*10;
    8a74:	f242 7310 	movw	r3, #10000	; 0x2710
    8a78:	434b      	muls	r3, r1
    8a7a:	60c3      	str	r3, [r0, #12]
}
    8a7c:	bd10      	pop	{r4, pc}
    8a7e:	bf00      	nop
    8a80:	1000136c 	.word	0x1000136c
    8a84:	40004008 	.word	0x40004008

00008a88 <sleep_elapsed>:
	state->sleep_start = state->anchor;
	state->sleep_duration = duration * 1000*10;
}

static inline int sleep_elapsed(ego_fsm_state_t *state) {
	u32 now = CLK100NS;
    8a88:	f640 4135 	movw	r1, #3125	; 0xc35
    8a8c:	4b0a      	ldr	r3, [pc, #40]	; (8ab8 <sleep_elapsed+0x30>)
    8a8e:	4a0b      	ldr	r2, [pc, #44]	; (8abc <sleep_elapsed+0x34>)
    8a90:	681b      	ldr	r3, [r3, #0]
    8a92:	6812      	ldr	r2, [r2, #0]
    8a94:	f3c3 0313 	ubfx	r3, r3, #0, #20
    8a98:	fb01 2303 	mla	r3, r1, r3, r2
	if (now < state->sleep_start)
    8a9c:	6882      	ldr	r2, [r0, #8]
		now += 3276800000;
	return (now - state->sleep_start) >= state->sleep_duration;
    8a9e:	68c0      	ldr	r0, [r0, #12]
	if (now < state->sleep_start)
    8aa0:	429a      	cmp	r2, r3
		now += 3276800000;
    8aa2:	bf84      	itt	hi
    8aa4:	f103 4343 	addhi.w	r3, r3, #3271557120	; 0xc3000000
    8aa8:	f503 03a0 	addhi.w	r3, r3, #5242880	; 0x500000
	return (now - state->sleep_start) >= state->sleep_duration;
    8aac:	1a9b      	subs	r3, r3, r2
}
    8aae:	4283      	cmp	r3, r0
    8ab0:	bf34      	ite	cc
    8ab2:	2000      	movcc	r0, #0
    8ab4:	2001      	movcs	r0, #1
    8ab6:	4770      	bx	lr
    8ab8:	1000136c 	.word	0x1000136c
    8abc:	40004008 	.word	0x40004008

00008ac0 <nop_state>:
/////////////
// states

// do nothing
static void nop_state(ego_fsm_state_t *state) {
}
    8ac0:	4770      	bx	lr
    8ac2:	0000      	movs	r0, r0

00008ac4 <init_state>:

// used in follow and jam mode, override the channel supplied by user
static void init_state(ego_fsm_state_t *state) {
	state->channel_index = 0;
    8ac4:	2300      	movs	r3, #0
	channel = channels[state->channel_index];
    8ac6:	f640 1268 	movw	r2, #2408	; 0x968
	state->channel_index = 0;
    8aca:	6043      	str	r3, [r0, #4]
	channel = channels[state->channel_index];
    8acc:	4b02      	ldr	r3, [pc, #8]	; (8ad8 <init_state+0x14>)
    8ace:	801a      	strh	r2, [r3, #0]
	state->state = EGO_ST_START_RX;
    8ad0:	2301      	movs	r3, #1
    8ad2:	7003      	strb	r3, [r0, #0]
}
    8ad4:	4770      	bx	lr
    8ad6:	bf00      	nop
    8ad8:	1000049c 	.word	0x1000049c

00008adc <continuous_init_state>:
	}
}

// continuous cap states (reuses START_RX state)
static void continuous_init_state(ego_fsm_state_t *state) {
	state->state = EGO_ST_START_RX;
    8adc:	2301      	movs	r3, #1
    8ade:	7003      	strb	r3, [r0, #0]
}
    8ae0:	4770      	bx	lr
    8ae2:	0000      	movs	r0, r0

00008ae4 <cap_state>:
static void cap_state(ego_fsm_state_t *state) {
    8ae4:	b530      	push	{r4, r5, lr}
    8ae6:	b08f      	sub	sp, #60	; 0x3c
	ego_packet_t packet = {
    8ae8:	2234      	movs	r2, #52	; 0x34
static void cap_state(ego_fsm_state_t *state) {
    8aea:	4604      	mov	r4, r0
	ego_packet_t packet = {
    8aec:	2100      	movs	r1, #0
    8aee:	a801      	add	r0, sp, #4
    8af0:	f7fb fb74 	bl	41dc <memset>
		.rxtime = CLK100NS,
    8af4:	f640 4135 	movw	r1, #3125	; 0xc35
    8af8:	4b1b      	ldr	r3, [pc, #108]	; (8b68 <cap_state+0x84>)
    8afa:	4a1c      	ldr	r2, [pc, #112]	; (8b6c <cap_state+0x88>)
    8afc:	681b      	ldr	r3, [r3, #0]
    8afe:	6812      	ldr	r2, [r2, #0]
    8b00:	f3c3 0313 	ubfx	r3, r3, #0, #20
    8b04:	fb01 2303 	mla	r3, r1, r3, r2
	if (sleep_elapsed(state)) {
    8b08:	4620      	mov	r0, r4
	ego_packet_t packet = {
    8b0a:	930d      	str	r3, [sp, #52]	; 0x34
	if (sleep_elapsed(state)) {
    8b0c:	f7ff ffbc 	bl	8a88 <sleep_elapsed>
    8b10:	b128      	cbz	r0, 8b1e <cap_state+0x3a>
		sleep_ms(state, 4);
    8b12:	2104      	movs	r1, #4
    8b14:	4620      	mov	r0, r4
    8b16:	f7ff ffa1 	bl	8a5c <sleep_ms>
		state->state = EGO_ST_SLEEP;
    8b1a:	2303      	movs	r3, #3
    8b1c:	7023      	strb	r3, [r4, #0]
	return cc2400_status() & SYNC_RECEIVED;
    8b1e:	f001 f8cf 	bl	9cc0 <cc2400_status>
	if (sync_received()) {
    8b22:	06c3      	lsls	r3, r0, #27
    8b24:	d51a      	bpl.n	8b5c <cap_state+0x78>
		RXLED_SET;
    8b26:	2510      	movs	r5, #16
    8b28:	4b11      	ldr	r3, [pc, #68]	; (8b70 <cap_state+0x8c>)
		do_rx(&packet);
    8b2a:	a801      	add	r0, sp, #4
		RXLED_SET;
    8b2c:	601d      	str	r5, [r3, #0]
		do_rx(&packet);
    8b2e:	f7ff ff7f 	bl	8a30 <do_rx>
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
    8b32:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8b34:	a901      	add	r1, sp, #4
    8b36:	2006      	movs	r0, #6
    8b38:	f7fc fa14 	bl	4f64 <enqueue_with_ts>
		RXLED_CLR;
    8b3c:	4b0d      	ldr	r3, [pc, #52]	; (8b74 <cap_state+0x90>)
		sleep_ms(state, 6);
    8b3e:	2106      	movs	r1, #6
		RXLED_CLR;
    8b40:	601d      	str	r5, [r3, #0]
		sleep_ms(state, 6);
    8b42:	4620      	mov	r0, r4
    8b44:	f7ff ff8a 	bl	8a5c <sleep_ms>
		state->state = EGO_ST_SLEEP;
    8b48:	2303      	movs	r3, #3
    8b4a:	7023      	strb	r3, [r4, #0]
		cc2400_strobe(SRFOFF);
    8b4c:	2064      	movs	r0, #100	; 0x64
    8b4e:	f001 f8be 	bl	9cce <cc2400_strobe>
		ssp_stop();
    8b52:	f7ff ff5f 	bl	8a14 <ssp_stop>
		state->timer_active = 1;
    8b56:	2301      	movs	r3, #1
    8b58:	6123      	str	r3, [r4, #16]
}
    8b5a:	e002      	b.n	8b62 <cap_state+0x7e>
	if (state->state != EGO_ST_CAP) {
    8b5c:	7823      	ldrb	r3, [r4, #0]
    8b5e:	2b02      	cmp	r3, #2
    8b60:	d1f4      	bne.n	8b4c <cap_state+0x68>
}
    8b62:	b00f      	add	sp, #60	; 0x3c
    8b64:	bd30      	pop	{r4, r5, pc}
    8b66:	bf00      	nop
    8b68:	1000136c 	.word	0x1000136c
    8b6c:	40004008 	.word	0x40004008
    8b70:	2009c038 	.word	0x2009c038
    8b74:	2009c03c 	.word	0x2009c03c

00008b78 <start_rf_state>:
static void start_rf_state(ego_fsm_state_t *state) {
    8b78:	b538      	push	{r3, r4, r5, lr}
	cc2400_set(MANAND,  0x7fff);
    8b7a:	f647 71ff 	movw	r1, #32767	; 0x7fff
static void start_rf_state(ego_fsm_state_t *state) {
    8b7e:	4604      	mov	r4, r0
	cc2400_set(MANAND,  0x7fff);
    8b80:	200d      	movs	r0, #13
    8b82:	f001 f804 	bl	9b8e <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    8b86:	f642 3122 	movw	r1, #11042	; 0x2b22
    8b8a:	2012      	movs	r0, #18
    8b8c:	f000 ffff 	bl	9b8e <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    8b90:	f241 314b 	movw	r1, #4939	; 0x134b
    8b94:	2014      	movs	r0, #20
    8b96:	f000 fffa 	bl	9b8e <cc2400_set>
	cc2400_set(GRMDM,   0x04e0); // un-buffered mode, 2FSK
    8b9a:	f44f 619c 	mov.w	r1, #1248	; 0x4e0
    8b9e:	2020      	movs	r0, #32
    8ba0:	f000 fff5 	bl	9b8e <cc2400_set>
	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    8ba4:	4b1d      	ldr	r3, [pc, #116]	; (8c1c <start_rf_state+0xa4>)
    8ba6:	2002      	movs	r0, #2
    8ba8:	8819      	ldrh	r1, [r3, #0]
	cc2400_set(SYNCH, (access_code >> 16) & 0xffff);
    8baa:	4d1d      	ldr	r5, [pc, #116]	; (8c20 <start_rf_state+0xa8>)
	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    8bac:	3901      	subs	r1, #1
    8bae:	b289      	uxth	r1, r1
    8bb0:	f000 ffed 	bl	9b8e <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040); // 250 kHz frequency deviation
    8bb4:	2140      	movs	r1, #64	; 0x40
    8bb6:	2003      	movs	r0, #3
    8bb8:	f000 ffe9 	bl	9b8e <cc2400_set>
	cc2400_set(GRDEC,  3);       // 250 kbit
    8bbc:	2103      	movs	r1, #3
    8bbe:	2021      	movs	r0, #33	; 0x21
    8bc0:	f000 ffe5 	bl	9b8e <cc2400_set>
	cc2400_set(SYNCH, (access_code >> 16) & 0xffff);
    8bc4:	202d      	movs	r0, #45	; 0x2d
    8bc6:	88e9      	ldrh	r1, [r5, #6]
    8bc8:	f000 ffe1 	bl	9b8e <cc2400_set>
	cc2400_set(SYNCL, (access_code >>  0) & 0xffff);
    8bcc:	202c      	movs	r0, #44	; 0x2c
    8bce:	88a9      	ldrh	r1, [r5, #4]
    8bd0:	f000 ffdd 	bl	9b8e <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    8bd4:	f001 f874 	bl	9cc0 <cc2400_status>
    8bd8:	0642      	lsls	r2, r0, #25
    8bda:	d5fb      	bpl.n	8bd4 <start_rf_state+0x5c>
	DIO_SSEL_SET;
    8bdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    8be0:	4b10      	ldr	r3, [pc, #64]	; (8c24 <start_rf_state+0xac>)
	DIO_SSP_CR1 |= SSPCR1_SSE;
    8be2:	4911      	ldr	r1, [pc, #68]	; (8c28 <start_rf_state+0xb0>)
	DIO_SSEL_SET;
    8be4:	601a      	str	r2, [r3, #0]
	DIO_SSP_CR1 |= SSPCR1_SSE;
    8be6:	680b      	ldr	r3, [r1, #0]
	cc2400_strobe(SFSON);
    8be8:	2061      	movs	r0, #97	; 0x61
	DIO_SSP_CR1 |= SSPCR1_SSE;
    8bea:	f043 0302 	orr.w	r3, r3, #2
    8bee:	600b      	str	r3, [r1, #0]
	DIO_SSEL_CLR;
    8bf0:	4b0e      	ldr	r3, [pc, #56]	; (8c2c <start_rf_state+0xb4>)
    8bf2:	601a      	str	r2, [r3, #0]
	cc2400_strobe(SFSON);
    8bf4:	f001 f86b 	bl	9cce <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    8bf8:	f001 f862 	bl	9cc0 <cc2400_status>
    8bfc:	0743      	lsls	r3, r0, #29
    8bfe:	d5fb      	bpl.n	8bf8 <start_rf_state+0x80>
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8c00:	200e      	movs	r0, #14
    8c02:	f000 ffbb 	bl	9b7c <cc2400_get>
    8c06:	f000 001f 	and.w	r0, r0, #31
    8c0a:	280f      	cmp	r0, #15
    8c0c:	d1f8      	bne.n	8c00 <start_rf_state+0x88>
	cc2400_strobe(SRX);
    8c0e:	2062      	movs	r0, #98	; 0x62
    8c10:	f001 f85d 	bl	9cce <cc2400_strobe>
	state->state = EGO_ST_CAP;
    8c14:	2302      	movs	r3, #2
    8c16:	7023      	strb	r3, [r4, #0]
}
    8c18:	bd38      	pop	{r3, r4, r5, pc}
    8c1a:	bf00      	nop
    8c1c:	1000049c 	.word	0x1000049c
    8c20:	10000a6c 	.word	0x10000a6c
    8c24:	2009c098 	.word	0x2009c098
    8c28:	40030004 	.word	0x40030004
    8c2c:	2009c09c 	.word	0x2009c09c

00008c30 <start_jamming_state>:
		cc2400_strobe(SRFOFF);
		ssp_stop();
	}
}

static void start_jamming_state(ego_fsm_state_t *state) {
    8c30:	b510      	push	{r4, lr}
	cc2400_set(MANAND,  0x7fff);
    8c32:	f647 71ff 	movw	r1, #32767	; 0x7fff
static void start_jamming_state(ego_fsm_state_t *state) {
    8c36:	4604      	mov	r4, r0
	cc2400_set(MANAND,  0x7fff);
    8c38:	200d      	movs	r0, #13
    8c3a:	f000 ffa8 	bl	9b8e <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    8c3e:	f642 3122 	movw	r1, #11042	; 0x2b22
    8c42:	2012      	movs	r0, #18
    8c44:	f000 ffa3 	bl	9b8e <cc2400_set>
	cc2400_set(MDMTST0, 0x334b); // with PRNG
    8c48:	f243 314b 	movw	r1, #13131	; 0x334b
    8c4c:	2014      	movs	r0, #20
    8c4e:	f000 ff9e 	bl	9b8e <cc2400_set>
	// cc2400_set(GRMDM,   0x04e0); // un-buffered mode, 2FSK
	cc2400_set(GRMDM,   0x04c0); // un-buffered mode, 2FSK
    8c52:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
    8c56:	2020      	movs	r0, #32
    8c58:	f000 ff99 	bl	9b8e <cc2400_set>
	//      |  | |   |  +--------> CRC off
	//      |  | |   +-----------> sync word: 24 MSB bits of SYNC_WORD
	//      |  | +---------------> 1 byte of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> un-buffered mode
	cc2400_set(FSDIV,   channel); // no IF for TX
    8c5c:	4b1a      	ldr	r3, [pc, #104]	; (8cc8 <start_jamming_state+0x98>)
    8c5e:	2002      	movs	r0, #2
    8c60:	8819      	ldrh	r1, [r3, #0]
    8c62:	b289      	uxth	r1, r1
    8c64:	f000 ff93 	bl	9b8e <cc2400_set>
	cc2400_set(MDMCTRL, 0x0026); // 150 kHz frequency deviation
    8c68:	2126      	movs	r1, #38	; 0x26
    8c6a:	2003      	movs	r0, #3
    8c6c:	f000 ff8f 	bl	9b8e <cc2400_set>
	cc2400_set(GRDEC,  3);       // 250 kbit
    8c70:	2103      	movs	r1, #3
    8c72:	2021      	movs	r0, #33	; 0x21
    8c74:	f000 ff8b 	bl	9b8e <cc2400_set>
	cc2400_set(FREND, 0xf);
    8c78:	210f      	movs	r1, #15
    8c7a:	2005      	movs	r0, #5
    8c7c:	f000 ff87 	bl	9b8e <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    8c80:	f001 f81e 	bl	9cc0 <cc2400_status>
    8c84:	0642      	lsls	r2, r0, #25
    8c86:	d5fb      	bpl.n	8c80 <start_jamming_state+0x50>

	cc2400_strobe(SFSON);
    8c88:	2061      	movs	r0, #97	; 0x61
    8c8a:	f001 f820 	bl	9cce <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    8c8e:	f001 f817 	bl	9cc0 <cc2400_status>
    8c92:	0743      	lsls	r3, r0, #29
    8c94:	d5fb      	bpl.n	8c8e <start_jamming_state+0x5e>
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8c96:	200e      	movs	r0, #14
    8c98:	f000 ff70 	bl	9b7c <cc2400_get>
    8c9c:	f000 001f 	and.w	r0, r0, #31
    8ca0:	280f      	cmp	r0, #15
    8ca2:	d1f8      	bne.n	8c96 <start_jamming_state+0x66>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    8ca4:	2280      	movs	r2, #128	; 0x80
    8ca6:	4b09      	ldr	r3, [pc, #36]	; (8ccc <start_jamming_state+0x9c>)
#endif

	cc2400_strobe(STX);
    8ca8:	2063      	movs	r0, #99	; 0x63
	PAEN_SET;
    8caa:	601a      	str	r2, [r3, #0]
	cc2400_strobe(STX);
    8cac:	f001 f80f 	bl	9cce <cc2400_strobe>
	TXLED_SET;
    8cb0:	f44f 7280 	mov.w	r2, #256	; 0x100
    8cb4:	4b06      	ldr	r3, [pc, #24]	; (8cd0 <start_jamming_state+0xa0>)
    8cb6:	601a      	str	r2, [r3, #0]

	state->state = EGO_ST_JAMMING;
    8cb8:	2305      	movs	r3, #5
    8cba:	7023      	strb	r3, [r4, #0]
	state->sleep_start = state->anchor;
    8cbc:	69a3      	ldr	r3, [r4, #24]
    8cbe:	60a3      	str	r3, [r4, #8]
	state->sleep_duration = duration * 1000*10;
    8cc0:	f644 6320 	movw	r3, #20000	; 0x4e20
    8cc4:	60e3      	str	r3, [r4, #12]
	sleep_ms_anchor(state, 2);
}
    8cc6:	bd10      	pop	{r4, pc}
    8cc8:	1000049c 	.word	0x1000049c
    8ccc:	2009c058 	.word	0x2009c058
    8cd0:	2009c038 	.word	0x2009c038

00008cd4 <sleep_state>:
static void sleep_state(ego_fsm_state_t *state) {
    8cd4:	b510      	push	{r4, lr}
    8cd6:	4604      	mov	r4, r0
	if (sleep_elapsed(state)) {
    8cd8:	f7ff fed6 	bl	8a88 <sleep_elapsed>
    8cdc:	b1a8      	cbz	r0, 8d0a <sleep_state+0x36>
		state->channel_index = (state->channel_index + 1) % 4;
    8cde:	6863      	ldr	r3, [r4, #4]
		sleep_ms(state, 7);
    8ce0:	2107      	movs	r1, #7
		state->channel_index = (state->channel_index + 1) % 4;
    8ce2:	3301      	adds	r3, #1
    8ce4:	425a      	negs	r2, r3
    8ce6:	f002 0203 	and.w	r2, r2, #3
    8cea:	f003 0303 	and.w	r3, r3, #3
    8cee:	bf58      	it	pl
    8cf0:	4253      	negpl	r3, r2
		channel = channels[state->channel_index];
    8cf2:	4a06      	ldr	r2, [pc, #24]	; (8d0c <sleep_state+0x38>)
		state->channel_index = (state->channel_index + 1) % 4;
    8cf4:	6063      	str	r3, [r4, #4]
		channel = channels[state->channel_index];
    8cf6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    8cfa:	4b05      	ldr	r3, [pc, #20]	; (8d10 <sleep_state+0x3c>)
		sleep_ms(state, 7);
    8cfc:	4620      	mov	r0, r4
		channel = channels[state->channel_index];
    8cfe:	801a      	strh	r2, [r3, #0]
		sleep_ms(state, 7);
    8d00:	f7ff feac 	bl	8a5c <sleep_ms>
		state->timer_active = 1;
    8d04:	2301      	movs	r3, #1
    8d06:	6123      	str	r3, [r4, #16]
		state->state = EGO_ST_START_RX;
    8d08:	7023      	strb	r3, [r4, #0]
}
    8d0a:	bd10      	pop	{r4, pc}
    8d0c:	0000b7ec 	.word	0x0000b7ec
    8d10:	1000049c 	.word	0x1000049c

00008d14 <jam_sleep_state>:
		state->state = EGO_ST_SLEEP;
		sleep_ms_anchor(state, 6);
	}
}

static void jam_sleep_state(ego_fsm_state_t *state) {
    8d14:	b510      	push	{r4, lr}
    8d16:	4604      	mov	r4, r0
	if (sleep_elapsed(state)) {
    8d18:	f7ff feb6 	bl	8a88 <sleep_elapsed>
    8d1c:	b130      	cbz	r0, 8d2c <jam_sleep_state+0x18>
		state->state = EGO_ST_START_RX;
    8d1e:	2301      	movs	r3, #1
    8d20:	7023      	strb	r3, [r4, #0]
		state->timer_active = 1;
    8d22:	6123      	str	r3, [r4, #16]
	state->sleep_start = state->anchor;
    8d24:	69a3      	ldr	r3, [r4, #24]
    8d26:	60a3      	str	r3, [r4, #8]
	state->sleep_duration = duration * 1000*10;
    8d28:	4b01      	ldr	r3, [pc, #4]	; (8d30 <jam_sleep_state+0x1c>)
    8d2a:	60e3      	str	r3, [r4, #12]
		sleep_ms_anchor(state, 11);
	}
}
    8d2c:	bd10      	pop	{r4, pc}
    8d2e:	bf00      	nop
    8d30:	0001adb0 	.word	0x0001adb0

00008d34 <jamming_state>:
void jamming_state(ego_fsm_state_t *state) {
    8d34:	b510      	push	{r4, lr}
    8d36:	4604      	mov	r4, r0
	if (sleep_elapsed(state)) {
    8d38:	f7ff fea6 	bl	8a88 <sleep_elapsed>
    8d3c:	b1f8      	cbz	r0, 8d7e <jamming_state+0x4a>
		cc2400_strobe(SRFOFF);
    8d3e:	2064      	movs	r0, #100	; 0x64
    8d40:	f000 ffc5 	bl	9cce <cc2400_strobe>
		PAEN_CLR;
    8d44:	2280      	movs	r2, #128	; 0x80
    8d46:	4b0e      	ldr	r3, [pc, #56]	; (8d80 <jamming_state+0x4c>)
    8d48:	601a      	str	r2, [r3, #0]
		TXLED_CLR;
    8d4a:	f44f 7280 	mov.w	r2, #256	; 0x100
    8d4e:	f843 2c20 	str.w	r2, [r3, #-32]
		state->channel_index = (state->channel_index + 1) % 4;
    8d52:	6863      	ldr	r3, [r4, #4]
    8d54:	3301      	adds	r3, #1
    8d56:	425a      	negs	r2, r3
    8d58:	f002 0203 	and.w	r2, r2, #3
    8d5c:	f003 0303 	and.w	r3, r3, #3
    8d60:	bf58      	it	pl
    8d62:	4253      	negpl	r3, r2
		channel = channels[state->channel_index];
    8d64:	4a07      	ldr	r2, [pc, #28]	; (8d84 <jamming_state+0x50>)
		state->channel_index = (state->channel_index + 1) % 4;
    8d66:	6063      	str	r3, [r4, #4]
		channel = channels[state->channel_index];
    8d68:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    8d6c:	4b06      	ldr	r3, [pc, #24]	; (8d88 <jamming_state+0x54>)
    8d6e:	801a      	strh	r2, [r3, #0]
		state->state = EGO_ST_SLEEP;
    8d70:	2303      	movs	r3, #3
    8d72:	7023      	strb	r3, [r4, #0]
	state->sleep_start = state->anchor;
    8d74:	69a3      	ldr	r3, [r4, #24]
    8d76:	60a3      	str	r3, [r4, #8]
	state->sleep_duration = duration * 1000*10;
    8d78:	f64e 2360 	movw	r3, #60000	; 0xea60
    8d7c:	60e3      	str	r3, [r4, #12]
}
    8d7e:	bd10      	pop	{r4, pc}
    8d80:	2009c05c 	.word	0x2009c05c
    8d84:	0000b7ec 	.word	0x0000b7ec
    8d88:	1000049c 	.word	0x1000049c

00008d8c <jam_cap_state>:
static void jam_cap_state(ego_fsm_state_t *state) {
    8d8c:	b510      	push	{r4, lr}
    8d8e:	4604      	mov	r4, r0
	return cc2400_status() & SYNC_RECEIVED;
    8d90:	f000 ff96 	bl	9cc0 <cc2400_status>
	if (sync_received()) {
    8d94:	06c3      	lsls	r3, r0, #27
    8d96:	d50e      	bpl.n	8db6 <jam_cap_state+0x2a>
		state->state = EGO_ST_START_JAMMING;
    8d98:	2304      	movs	r3, #4
    8d9a:	7023      	strb	r3, [r4, #0]
		state->packet_observed = 1;
    8d9c:	2301      	movs	r3, #1
		state->anchor = CLK100NS;
    8d9e:	f640 4135 	movw	r1, #3125	; 0xc35
		state->packet_observed = 1;
    8da2:	6163      	str	r3, [r4, #20]
		state->anchor = CLK100NS;
    8da4:	4b10      	ldr	r3, [pc, #64]	; (8de8 <jam_cap_state+0x5c>)
    8da6:	4a11      	ldr	r2, [pc, #68]	; (8dec <jam_cap_state+0x60>)
    8da8:	681b      	ldr	r3, [r3, #0]
    8daa:	6812      	ldr	r2, [r2, #0]
    8dac:	f3c3 0313 	ubfx	r3, r3, #0, #20
    8db0:	fb01 2303 	mla	r3, r1, r3, r2
    8db4:	61a3      	str	r3, [r4, #24]
	if (state->timer_active && sleep_elapsed(state)) {
    8db6:	6923      	ldr	r3, [r4, #16]
    8db8:	b15b      	cbz	r3, 8dd2 <jam_cap_state+0x46>
    8dba:	4620      	mov	r0, r4
    8dbc:	f7ff fe64 	bl	8a88 <sleep_elapsed>
    8dc0:	b138      	cbz	r0, 8dd2 <jam_cap_state+0x46>
		state->state = EGO_ST_START_JAMMING;
    8dc2:	2304      	movs	r3, #4
    8dc4:	7023      	strb	r3, [r4, #0]
		state->packet_observed = 0;
    8dc6:	2300      	movs	r3, #0
		sleep_ms(state, 11); // 11 ms hop interval
    8dc8:	210b      	movs	r1, #11
    8dca:	4620      	mov	r0, r4
		state->packet_observed = 0;
    8dcc:	6163      	str	r3, [r4, #20]
		sleep_ms(state, 11); // 11 ms hop interval
    8dce:	f7ff fe45 	bl	8a5c <sleep_ms>
	if (state->state != EGO_ST_CAP) {
    8dd2:	7823      	ldrb	r3, [r4, #0]
    8dd4:	2b02      	cmp	r3, #2
    8dd6:	d006      	beq.n	8de6 <jam_cap_state+0x5a>
		cc2400_strobe(SRFOFF);
    8dd8:	2064      	movs	r0, #100	; 0x64
    8dda:	f000 ff78 	bl	9cce <cc2400_strobe>
}
    8dde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ssp_stop();
    8de2:	f7ff be17 	b.w	8a14 <ssp_stop>
}
    8de6:	bd10      	pop	{r4, pc}
    8de8:	1000136c 	.word	0x1000136c
    8dec:	40004008 	.word	0x40004008

00008df0 <continuous_cap_state>:
static void continuous_cap_state(ego_fsm_state_t *state) {
    8df0:	b510      	push	{r4, lr}
    8df2:	b08e      	sub	sp, #56	; 0x38
	ego_packet_t packet = {
    8df4:	2234      	movs	r2, #52	; 0x34
    8df6:	2100      	movs	r1, #0
    8df8:	a801      	add	r0, sp, #4
    8dfa:	f7fb f9ef 	bl	41dc <memset>
		.rxtime = CLK100NS,
    8dfe:	f640 4135 	movw	r1, #3125	; 0xc35
    8e02:	4b20      	ldr	r3, [pc, #128]	; (8e84 <continuous_cap_state+0x94>)
    8e04:	4a20      	ldr	r2, [pc, #128]	; (8e88 <continuous_cap_state+0x98>)
    8e06:	681b      	ldr	r3, [r3, #0]
    8e08:	6812      	ldr	r2, [r2, #0]
    8e0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
    8e0e:	fb01 2303 	mla	r3, r1, r3, r2
	ego_packet_t packet = {
    8e12:	930d      	str	r3, [sp, #52]	; 0x34
	return cc2400_status() & SYNC_RECEIVED;
    8e14:	f000 ff54 	bl	9cc0 <cc2400_status>
	if (sync_received()) {
    8e18:	06c1      	lsls	r1, r0, #27
    8e1a:	d52f      	bpl.n	8e7c <continuous_cap_state+0x8c>
		RXLED_SET;
    8e1c:	2410      	movs	r4, #16
    8e1e:	4b1b      	ldr	r3, [pc, #108]	; (8e8c <continuous_cap_state+0x9c>)
		do_rx(&packet);
    8e20:	a801      	add	r0, sp, #4
		RXLED_SET;
    8e22:	601c      	str	r4, [r3, #0]
		do_rx(&packet);
    8e24:	f7ff fe04 	bl	8a30 <do_rx>
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
    8e28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8e2a:	a901      	add	r1, sp, #4
    8e2c:	2006      	movs	r0, #6
    8e2e:	f7fc f899 	bl	4f64 <enqueue_with_ts>
		RXLED_CLR;
    8e32:	4b17      	ldr	r3, [pc, #92]	; (8e90 <continuous_cap_state+0xa0>)
    8e34:	601c      	str	r4, [r3, #0]
		ssp_stop();
    8e36:	f7ff fded 	bl	8a14 <ssp_stop>
		cc2400_strobe(SFSON);
    8e3a:	2061      	movs	r0, #97	; 0x61
    8e3c:	f000 ff47 	bl	9cce <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    8e40:	f000 ff3e 	bl	9cc0 <cc2400_status>
    8e44:	0742      	lsls	r2, r0, #29
    8e46:	d5fb      	bpl.n	8e40 <continuous_cap_state+0x50>
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8e48:	200e      	movs	r0, #14
    8e4a:	f000 fe97 	bl	9b7c <cc2400_get>
    8e4e:	f000 001f 	and.w	r0, r0, #31
    8e52:	280f      	cmp	r0, #15
    8e54:	d1f8      	bne.n	8e48 <continuous_cap_state+0x58>
		while (SSP1SR & SSPSR_RNE) {
    8e56:	4a0f      	ldr	r2, [pc, #60]	; (8e94 <continuous_cap_state+0xa4>)
			uint8_t tmp = (uint8_t)DIO_SSP_DR;
    8e58:	490f      	ldr	r1, [pc, #60]	; (8e98 <continuous_cap_state+0xa8>)
		while (SSP1SR & SSPSR_RNE) {
    8e5a:	6813      	ldr	r3, [r2, #0]
    8e5c:	075b      	lsls	r3, r3, #29
    8e5e:	d40f      	bmi.n	8e80 <continuous_cap_state+0x90>
	DIO_SSEL_SET;
    8e60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    8e64:	4b0d      	ldr	r3, [pc, #52]	; (8e9c <continuous_cap_state+0xac>)
	DIO_SSP_CR1 |= SSPCR1_SSE;
    8e66:	490e      	ldr	r1, [pc, #56]	; (8ea0 <continuous_cap_state+0xb0>)
	DIO_SSEL_SET;
    8e68:	601a      	str	r2, [r3, #0]
	DIO_SSP_CR1 |= SSPCR1_SSE;
    8e6a:	680b      	ldr	r3, [r1, #0]
		cc2400_strobe(SRX);
    8e6c:	2062      	movs	r0, #98	; 0x62
	DIO_SSP_CR1 |= SSPCR1_SSE;
    8e6e:	f043 0302 	orr.w	r3, r3, #2
    8e72:	600b      	str	r3, [r1, #0]
	DIO_SSEL_CLR;
    8e74:	4b0b      	ldr	r3, [pc, #44]	; (8ea4 <continuous_cap_state+0xb4>)
    8e76:	601a      	str	r2, [r3, #0]
		cc2400_strobe(SRX);
    8e78:	f000 ff29 	bl	9cce <cc2400_strobe>
}
    8e7c:	b00e      	add	sp, #56	; 0x38
    8e7e:	bd10      	pop	{r4, pc}
			uint8_t tmp = (uint8_t)DIO_SSP_DR;
    8e80:	680b      	ldr	r3, [r1, #0]
    8e82:	e7ea      	b.n	8e5a <continuous_cap_state+0x6a>
    8e84:	1000136c 	.word	0x1000136c
    8e88:	40004008 	.word	0x40004008
    8e8c:	2009c038 	.word	0x2009c038
    8e90:	2009c03c 	.word	0x2009c03c
    8e94:	4003000c 	.word	0x4003000c
    8e98:	40030008 	.word	0x40030008
    8e9c:	2009c098 	.word	0x2009c098
    8ea0:	40030004 	.word	0x40030004
    8ea4:	2009c09c 	.word	0x2009c09c

00008ea8 <ego_main>:
#endif

void ego_main(ego_mode_t mode) {
    8ea8:	b530      	push	{r4, r5, lr}
    8eaa:	b089      	sub	sp, #36	; 0x24
    8eac:	4604      	mov	r4, r0
	const ego_st_handler *handler; // set depending on mode
	ego_fsm_state_t state = {
    8eae:	221c      	movs	r2, #28
    8eb0:	2100      	movs	r1, #0
    8eb2:	a801      	add	r0, sp, #4
    8eb4:	f7fb f992 	bl	41dc <memset>
		start_jamming_state,
		jamming_state,
	};
#endif

	clkn_start(); // FIXME replace with a different timer
    8eb8:	f7fe fa8e 	bl	73d8 <clkn_start>

	switch (mode) {
    8ebc:	2c02      	cmp	r4, #2
    8ebe:	4d12      	ldr	r5, [pc, #72]	; (8f08 <ego_main+0x60>)
    8ec0:	d813      	bhi.n	8eea <ego_main+0x42>
	ISER0 = ISER0_ISE_USB;
    8ec2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    8ec6:	4811      	ldr	r0, [pc, #68]	; (8f0c <ego_main+0x64>)
    8ec8:	4b11      	ldr	r3, [pc, #68]	; (8f10 <ego_main+0x68>)
    8eca:	eb00 0484 	add.w	r4, r0, r4, lsl #2
    8ece:	601a      	str	r2, [r3, #0]
    8ed0:	68a4      	ldr	r4, [r4, #8]
	dio_ssp_init();
    8ed2:	f000 fdcb 	bl	9a6c <dio_ssp_init>
	}

	ego_init();

	while (1) {
		if (requested_mode != MODE_EGO)
    8ed6:	782b      	ldrb	r3, [r5, #0]
    8ed8:	2b0d      	cmp	r3, #13
    8eda:	d10a      	bne.n	8ef2 <ego_main+0x4a>
			break;
		handler[state.state](&state);
    8edc:	f89d 3004 	ldrb.w	r3, [sp, #4]
    8ee0:	a801      	add	r0, sp, #4
    8ee2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    8ee6:	4798      	blx	r3
		if (requested_mode != MODE_EGO)
    8ee8:	e7f5      	b.n	8ed6 <ego_main+0x2e>
			requested_mode = MODE_IDLE;
    8eea:	2300      	movs	r3, #0
    8eec:	702b      	strb	r3, [r5, #0]
	}

	ego_deinit();
}
    8eee:	b009      	add	sp, #36	; 0x24
    8ef0:	bd30      	pop	{r4, r5, pc}
	cc2400_strobe(SRFOFF);
    8ef2:	2064      	movs	r0, #100	; 0x64
    8ef4:	f000 feeb 	bl	9cce <cc2400_strobe>
	ssp_stop(); // TODO disable SSP
    8ef8:	f7ff fd8c 	bl	8a14 <ssp_stop>
	ICER0 = ICER0_ICE_USB;
    8efc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    8f00:	4b04      	ldr	r3, [pc, #16]	; (8f14 <ego_main+0x6c>)
    8f02:	601a      	str	r2, [r3, #0]
    8f04:	e7f3      	b.n	8eee <ego_main+0x46>
    8f06:	bf00      	nop
    8f08:	10000b4e 	.word	0x10000b4e
    8f0c:	0000b7ec 	.word	0x0000b7ec
    8f10:	e000e100 	.word	0xe000e100
    8f14:	e000e180 	.word	0xe000e180

00008f18 <rfcat_subcommand>:

/**
 * Process a subcommand for rfcat-like functionality.
 * Returns 1 on success, 0 on failure.
 */
int rfcat_subcommand(uint16_t cmd, uint8_t *body, int body_len) {
    8f18:	b570      	push	{r4, r5, r6, lr}
    8f1a:	4603      	mov	r3, r0
	int i;
	switch (cmd) {
    8f1c:	2b01      	cmp	r3, #1
int rfcat_subcommand(uint16_t cmd, uint8_t *body, int body_len) {
    8f1e:	4610      	mov	r0, r2
	switch (cmd) {
    8f20:	d003      	beq.n	8f2a <rfcat_subcommand+0x12>
    8f22:	2b02      	cmp	r3, #2
    8f24:	d018      	beq.n	8f58 <rfcat_subcommand+0x40>
		// set aa
		case RFCAT_SET_AA:
			if (body_len < 1 || body_len > 4)
				return 0;
    8f26:	2000      	movs	r0, #0
    8f28:	e015      	b.n	8f56 <rfcat_subcommand+0x3e>
			if (body_len < 1 || body_len > 4)
    8f2a:	1e53      	subs	r3, r2, #1
    8f2c:	2b03      	cmp	r3, #3
    8f2e:	d8fa      	bhi.n	8f26 <rfcat_subcommand+0xe>
			for (i = 0; i < 4; ++i) {
    8f30:	2200      	movs	r2, #0
				access_code <<= 8;
				if (i < access_code_len)
    8f32:	4b0c      	ldr	r3, [pc, #48]	; (8f64 <rfcat_subcommand+0x4c>)
    8f34:	689e      	ldr	r6, [r3, #8]
				access_code <<= 8;
    8f36:	685c      	ldr	r4, [r3, #4]
				if (i < access_code_len)
    8f38:	4296      	cmp	r6, r2
				access_code <<= 8;
    8f3a:	ea4f 2404 	mov.w	r4, r4, lsl #8
    8f3e:	605c      	str	r4, [r3, #4]
					access_code |= body[i];
    8f40:	bfc8      	it	gt
    8f42:	5c8d      	ldrbgt	r5, [r1, r2]
			for (i = 0; i < 4; ++i) {
    8f44:	f102 0201 	add.w	r2, r2, #1
					access_code |= body[i];
    8f48:	bfc4      	itt	gt
    8f4a:	432c      	orrgt	r4, r5
    8f4c:	605c      	strgt	r4, [r3, #4]
			for (i = 0; i < 4; ++i) {
    8f4e:	2a04      	cmp	r2, #4
    8f50:	d1f1      	bne.n	8f36 <rfcat_subcommand+0x1e>
			}
			access_code_len = body_len;
    8f52:	6098      	str	r0, [r3, #8]

		default:
			// error
			return 0;
	}
	return 1;
    8f54:	2001      	movs	r0, #1
}
    8f56:	bd70      	pop	{r4, r5, r6, pc}
			if (body_len != 1)
    8f58:	2a01      	cmp	r2, #1
    8f5a:	d1e4      	bne.n	8f26 <rfcat_subcommand+0xe>
			packet_len = body[0];
    8f5c:	780a      	ldrb	r2, [r1, #0]
    8f5e:	4b01      	ldr	r3, [pc, #4]	; (8f64 <rfcat_subcommand+0x4c>)
    8f60:	701a      	strb	r2, [r3, #0]
			break;
    8f62:	e7f8      	b.n	8f56 <rfcat_subcommand+0x3e>
    8f64:	10000a6c 	.word	0x10000a6c

00008f68 <debug_uart_init>:
int debug_dma_active = 0;
char debug_buffer[256];

void debug_uart_init(int flow_control) {
	// power on UART1 peripheral
	PCONP |= PCONP_PCUART1;
    8f68:	4a28      	ldr	r2, [pc, #160]	; (900c <debug_uart_init+0xa4>)

	// 8N1, enable access to divisor latches
	U1LCR = 0b10000011;

	// divisor: 11, fractional: 3/13. final baud: 115,411
	U1DLL = 11;
    8f6a:	210b      	movs	r1, #11
	PCONP |= PCONP_PCUART1;
    8f6c:	6813      	ldr	r3, [r2, #0]
    8f6e:	f043 0310 	orr.w	r3, r3, #16
    8f72:	6013      	str	r3, [r2, #0]
	U1LCR = 0b10000011;
    8f74:	2283      	movs	r2, #131	; 0x83
    8f76:	4b26      	ldr	r3, [pc, #152]	; (9010 <debug_uart_init+0xa8>)
    8f78:	601a      	str	r2, [r3, #0]
	U1DLL = 11;
    8f7a:	4a26      	ldr	r2, [pc, #152]	; (9014 <debug_uart_init+0xac>)
    8f7c:	3304      	adds	r3, #4
    8f7e:	6011      	str	r1, [r2, #0]
	U1DLM = 0;
    8f80:	2100      	movs	r1, #0
    8f82:	6051      	str	r1, [r2, #4]
	U1FDR = (3 << 0) | (13 << 4);
    8f84:	21d3      	movs	r1, #211	; 0xd3
    8f86:	6291      	str	r1, [r2, #40]	; 0x28

	// block access to divisor latches
	U1LCR &= ~0b10000000;
    8f88:	f853 2c04 	ldr.w	r2, [r3, #-4]
    8f8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    8f90:	f843 2c04 	str.w	r2, [r3, #-4]

	// enable auto RTS/CTS
	if (flow_control)
    8f94:	2800      	cmp	r0, #0
    8f96:	d036      	beq.n	9006 <debug_uart_init+0x9e>
		U1MCR = 0b11000000;
    8f98:	22c0      	movs	r2, #192	; 0xc0
    8f9a:	601a      	str	r2, [r3, #0]
	else
		U1MCR = 0;

	// enable FIFO and DMA
	U1FCR = 0b1001;
    8f9c:	2209      	movs	r2, #9
    8f9e:	4b1e      	ldr	r3, [pc, #120]	; (9018 <debug_uart_init+0xb0>)
    8fa0:	601a      	str	r2, [r3, #0]

	// set P0.15 as TXD1, with pullup
	PINSEL0  = (PINSEL0  & ~(0b11 << 30)) | (0b01 << 30);
    8fa2:	4a1e      	ldr	r2, [pc, #120]	; (901c <debug_uart_init+0xb4>)
    8fa4:	6813      	ldr	r3, [r2, #0]
	PINMODE0 = (PINMODE0 & ~(0b11 << 30)) | (0b00 << 30);

	// set P0.16 as RXD1, with pullup
	PINSEL1  = (PINSEL1  & ~(0b11 <<  0)) | (0b01 <<  0);
    8fa6:	3204      	adds	r2, #4
	PINSEL0  = (PINSEL0  & ~(0b11 << 30)) | (0b01 << 30);
    8fa8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    8fac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    8fb0:	f842 3c04 	str.w	r3, [r2, #-4]
	PINMODE0 = (PINMODE0 & ~(0b11 << 30)) | (0b00 << 30);
    8fb4:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    8fb6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    8fba:	63d3      	str	r3, [r2, #60]	; 0x3c
	PINSEL1  = (PINSEL1  & ~(0b11 <<  0)) | (0b01 <<  0);
    8fbc:	6813      	ldr	r3, [r2, #0]
    8fbe:	f023 0303 	bic.w	r3, r3, #3
    8fc2:	f043 0301 	orr.w	r3, r3, #1
    8fc6:	6013      	str	r3, [r2, #0]
	PINMODE1 = (PINMODE1 & ~(0b11 <<  0)) | (0b00 <<  0);
    8fc8:	4b15      	ldr	r3, [pc, #84]	; (9020 <debug_uart_init+0xb8>)
    8fca:	6819      	ldr	r1, [r3, #0]
    8fcc:	f021 0103 	bic.w	r1, r1, #3
    8fd0:	6019      	str	r1, [r3, #0]

	if (flow_control) {
    8fd2:	b1b8      	cbz	r0, 9004 <debug_uart_init+0x9c>
		// set P0.17 as CTS1, no pullup/down
		PINSEL1  = (PINSEL1  & ~(0b11 <<  2)) | (0b01 <<  2);
    8fd4:	6811      	ldr	r1, [r2, #0]
    8fd6:	f021 010c 	bic.w	r1, r1, #12
    8fda:	f041 0104 	orr.w	r1, r1, #4
    8fde:	6011      	str	r1, [r2, #0]
		PINMODE1 = (PINMODE1 & ~(0b11 <<  2)) | (0b10 <<  2);
    8fe0:	6819      	ldr	r1, [r3, #0]
    8fe2:	f021 010c 	bic.w	r1, r1, #12
    8fe6:	f041 0108 	orr.w	r1, r1, #8
    8fea:	6019      	str	r1, [r3, #0]

		// set P0.22 as RTS1, no pullup/down
		PINSEL1  = (PINSEL1  & ~(0b11 << 12)) | (0b01 << 12);
    8fec:	6811      	ldr	r1, [r2, #0]
    8fee:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
    8ff2:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
    8ff6:	6011      	str	r1, [r2, #0]
		PINMODE1 = (PINMODE1 & ~(0b11 << 12)) | (0b10 << 12);
    8ff8:	681a      	ldr	r2, [r3, #0]
    8ffa:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    8ffe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    9002:	601a      	str	r2, [r3, #0]
	}
}
    9004:	4770      	bx	lr
		U1MCR = 0;
    9006:	6018      	str	r0, [r3, #0]
    9008:	e7c8      	b.n	8f9c <debug_uart_init+0x34>
    900a:	bf00      	nop
    900c:	400fc0c4 	.word	0x400fc0c4
    9010:	4001000c 	.word	0x4001000c
    9014:	40010000 	.word	0x40010000
    9018:	40010008 	.word	0x40010008
    901c:	4002c000 	.word	0x4002c000
    9020:	4002c044 	.word	0x4002c044

00009024 <debug_write>:

// synchronously write a string to debug UART
// does not start any DMA
void debug_write(const char *str) {
    9024:	b510      	push	{r4, lr}
	unsigned i;

	for (i = 0; str[i]; ++i) {
		while ((U1LSR & U1LSR_THRE) == 0)
    9026:	4a06      	ldr	r2, [pc, #24]	; (9040 <debug_write+0x1c>)
			;
		U1THR = str[i];
    9028:	4906      	ldr	r1, [pc, #24]	; (9044 <debug_write+0x20>)
    902a:	3801      	subs	r0, #1
	for (i = 0; str[i]; ++i) {
    902c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    9030:	b903      	cbnz	r3, 9034 <debug_write+0x10>
	}
}
    9032:	bd10      	pop	{r4, pc}
		while ((U1LSR & U1LSR_THRE) == 0)
    9034:	6814      	ldr	r4, [r2, #0]
    9036:	06a4      	lsls	r4, r4, #26
    9038:	d5fc      	bpl.n	9034 <debug_write+0x10>
		U1THR = str[i];
    903a:	600b      	str	r3, [r1, #0]
	for (i = 0; str[i]; ++i) {
    903c:	e7f6      	b.n	902c <debug_write+0x8>
    903e:	bf00      	nop
    9040:	40010014 	.word	0x40010014
    9044:	40010000 	.word	0x40010000

00009048 <debug_printf>:
			DMACCxConfig_ITC  ; // allow terminal count interrupts

	DMACC7Config |= 1;
}

void debug_printf(char *fmt, ...) {
    9048:	b40f      	push	{r0, r1, r2, r3}
    904a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	va_list ap;
	void *ret;

	// TODO warn user?
	if (debug_dma_active)
    904c:	4b13      	ldr	r3, [pc, #76]	; (909c <debug_printf+0x54>)
    904e:	681d      	ldr	r5, [r3, #0]
    9050:	b9fd      	cbnz	r5, 9092 <debug_printf+0x4a>
		return;
	debug_dma_active = 1;
    9052:	2201      	movs	r2, #1

	va_start(ap, fmt);
	tfp_vsnprintf(debug_buffer, sizeof(debug_buffer) - 1, fmt, ap);
    9054:	4c12      	ldr	r4, [pc, #72]	; (90a0 <debug_printf+0x58>)
	debug_dma_active = 1;
    9056:	601a      	str	r2, [r3, #0]
	tfp_vsnprintf(debug_buffer, sizeof(debug_buffer) - 1, fmt, ap);
    9058:	21ff      	movs	r1, #255	; 0xff
	va_start(ap, fmt);
    905a:	ab07      	add	r3, sp, #28
	tfp_vsnprintf(debug_buffer, sizeof(debug_buffer) - 1, fmt, ap);
    905c:	9a06      	ldr	r2, [sp, #24]
    905e:	4620      	mov	r0, r4
	va_start(ap, fmt);
    9060:	9301      	str	r3, [sp, #4]
	tfp_vsnprintf(debug_buffer, sizeof(debug_buffer) - 1, fmt, ap);
    9062:	f000 faa1 	bl	95a8 <tfp_vsnprintf>
	va_end(ap);
	debug_buffer[sizeof(debug_buffer) - 1] = 0;

	size_t len = strlen(debug_buffer);
    9066:	4620      	mov	r0, r4
	debug_buffer[sizeof(debug_buffer) - 1] = 0;
    9068:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
	size_t len = strlen(debug_buffer);
    906c:	f001 fd62 	bl	ab34 <strlen>
	DMACC7SrcAddr = (uint32_t)debug_buffer;
    9070:	4b0c      	ldr	r3, [pc, #48]	; (90a4 <debug_printf+0x5c>)
	DMACC7DestAddr = (uint32_t)&U1THR;
    9072:	4a0d      	ldr	r2, [pc, #52]	; (90a8 <debug_printf+0x60>)
	DMACC7SrcAddr = (uint32_t)debug_buffer;
    9074:	601c      	str	r4, [r3, #0]
	DMACC7DestAddr = (uint32_t)&U1THR;
    9076:	605a      	str	r2, [r3, #4]
	DMACC7Config =
    9078:	f64c 2280 	movw	r2, #51840	; 0xca80
			(0b000 << 12)    | // source burst: 1 byte
    907c:	f3c0 000b 	ubfx	r0, r0, #0, #12
			DMACCxControl_SI | // source increment
    9080:	f040 4004 	orr.w	r0, r0, #2214592512	; 0x84000000
	DMACC7LLI = 0;
    9084:	609d      	str	r5, [r3, #8]
	DMACC7Control =
    9086:	60d8      	str	r0, [r3, #12]
	DMACC7Config =
    9088:	611a      	str	r2, [r3, #16]
	DMACC7Config |= 1;
    908a:	691a      	ldr	r2, [r3, #16]
    908c:	f042 0201 	orr.w	r2, r2, #1
    9090:	611a      	str	r2, [r3, #16]
	debug_send_dma(len);
}
    9092:	b003      	add	sp, #12
    9094:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    9098:	b004      	add	sp, #16
    909a:	4770      	bx	lr
    909c:	100012a8 	.word	0x100012a8
    90a0:	10003b48 	.word	0x10003b48
    90a4:	500041e0 	.word	0x500041e0
    90a8:	40010000 	.word	0x40010000

000090ac <ulli2a>:


#ifdef PRINTF_LONG_LONG_SUPPORT
static void _TFP_GCC_NO_INLINE_ ulli2a(
    unsigned long long int num, struct param *p)
{
    90ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
    while (num / d >= p->base)
    90b0:	f04f 0900 	mov.w	r9, #0
    90b4:	e9d2 3603 	ldrd	r3, r6, [r2, #12]
{
    90b8:	4607      	mov	r7, r0
    90ba:	468a      	mov	sl, r1
    90bc:	4693      	mov	fp, r2
    while (num / d >= p->base)
    90be:	4698      	mov	r8, r3
    unsigned long long int d = 1;
    90c0:	2401      	movs	r4, #1
    90c2:	2500      	movs	r5, #0
    while (num / d >= p->base)
    90c4:	4622      	mov	r2, r4
    90c6:	462b      	mov	r3, r5
    90c8:	4638      	mov	r0, r7
    90ca:	4651      	mov	r1, sl
    90cc:	f001 faea 	bl	a6a4 <__aeabi_uldivmod>
    90d0:	4549      	cmp	r1, r9
    90d2:	bf08      	it	eq
    90d4:	4540      	cmpeq	r0, r8
    90d6:	d209      	bcs.n	90ec <ulli2a+0x40>
    int n = 0;
    90d8:	f04f 0900 	mov.w	r9, #0
        d *= p->base;
    while (d != 0) {
    90dc:	ea54 0305 	orrs.w	r3, r4, r5
    90e0:	d10c      	bne.n	90fc <ulli2a+0x50>
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
            ++n;
        }
    }
    *bf = 0;
    90e2:	2300      	movs	r3, #0
    90e4:	7033      	strb	r3, [r6, #0]
}
    90e6:	b003      	add	sp, #12
    90e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        d *= p->base;
    90ec:	fb04 f309 	mul.w	r3, r4, r9
    90f0:	fb08 3305 	mla	r3, r8, r5, r3
    90f4:	fba4 4508 	umull	r4, r5, r4, r8
    90f8:	441d      	add	r5, r3
    90fa:	e7e3      	b.n	90c4 <ulli2a+0x18>
        int dgt = num / d;
    90fc:	4638      	mov	r0, r7
    90fe:	4651      	mov	r1, sl
    9100:	4622      	mov	r2, r4
    9102:	462b      	mov	r3, r5
    9104:	f001 face 	bl	a6a4 <__aeabi_uldivmod>
    9108:	469a      	mov	sl, r3
        d /= p->base;
    910a:	f8db 300c 	ldr.w	r3, [fp, #12]
    910e:	4617      	mov	r7, r2
    9110:	4619      	mov	r1, r3
    9112:	2200      	movs	r2, #0
    9114:	4680      	mov	r8, r0
    9116:	e9cd 1200 	strd	r1, r2, [sp]
    911a:	4613      	mov	r3, r2
    911c:	4620      	mov	r0, r4
    911e:	460a      	mov	r2, r1
    9120:	4629      	mov	r1, r5
    9122:	f001 fabf 	bl	a6a4 <__aeabi_uldivmod>
        if (n || dgt > 0 || d == 0) {
    9126:	f1b9 0f00 	cmp.w	r9, #0
    912a:	d10b      	bne.n	9144 <ulli2a+0x98>
    912c:	f1b8 0f00 	cmp.w	r8, #0
    9130:	dc08      	bgt.n	9144 <ulli2a+0x98>
    9132:	e9dd 2300 	ldrd	r2, r3, [sp]
    9136:	429d      	cmp	r5, r3
    9138:	bf08      	it	eq
    913a:	4294      	cmpeq	r4, r2
    913c:	d312      	bcc.n	9164 <ulli2a+0xb8>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    913e:	4604      	mov	r4, r0
    9140:	460d      	mov	r5, r1
    9142:	e7cb      	b.n	90dc <ulli2a+0x30>
    9144:	f1b8 0f09 	cmp.w	r8, #9
    9148:	dd0c      	ble.n	9164 <ulli2a+0xb8>
    914a:	f89b 3000 	ldrb.w	r3, [fp]
    914e:	f013 0f04 	tst.w	r3, #4
    9152:	bf14      	ite	ne
    9154:	2337      	movne	r3, #55	; 0x37
    9156:	2357      	moveq	r3, #87	; 0x57
    9158:	4498      	add	r8, r3
    915a:	f806 8b01 	strb.w	r8, [r6], #1
            ++n;
    915e:	f109 0901 	add.w	r9, r9, #1
    9162:	e7ec      	b.n	913e <ulli2a+0x92>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    9164:	2330      	movs	r3, #48	; 0x30
    9166:	e7f7      	b.n	9158 <ulli2a+0xac>

00009168 <uli2a>:
}
#endif

#ifdef PRINTF_LONG_SUPPORT
static void uli2a(unsigned long int num, struct param *p)
{
    9168:	b5f0      	push	{r4, r5, r6, r7, lr}
    int n = 0;
    unsigned long int d = 1;
    916a:	2301      	movs	r3, #1
    char *bf = p->bf;
    while (num / d >= p->base)
    916c:	e9d1 4203 	ldrd	r4, r2, [r1, #12]
    9170:	fbb0 f5f3 	udiv	r5, r0, r3
    9174:	42a5      	cmp	r5, r4
    9176:	d203      	bcs.n	9180 <uli2a+0x18>
    int n = 0;
    9178:	2500      	movs	r5, #0
        d *= p->base;
    while (d != 0) {
    917a:	b91b      	cbnz	r3, 9184 <uli2a+0x1c>
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
            ++n;
        }
    }
    *bf = 0;
    917c:	7013      	strb	r3, [r2, #0]
}
    917e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        d *= p->base;
    9180:	4363      	muls	r3, r4
    9182:	e7f5      	b.n	9170 <uli2a+0x8>
        int dgt = num / d;
    9184:	fbb0 f4f3 	udiv	r4, r0, r3
        d /= p->base;
    9188:	68ce      	ldr	r6, [r1, #12]
        num %= d;
    918a:	fb03 0014 	mls	r0, r3, r4, r0
        d /= p->base;
    918e:	fbb3 f7f6 	udiv	r7, r3, r6
        if (n || dgt > 0 || d == 0) {
    9192:	b92d      	cbnz	r5, 91a0 <uli2a+0x38>
    9194:	2c00      	cmp	r4, #0
    9196:	dc03      	bgt.n	91a0 <uli2a+0x38>
    9198:	429e      	cmp	r6, r3
    919a:	d80e      	bhi.n	91ba <uli2a+0x52>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    919c:	463b      	mov	r3, r7
    919e:	e7ec      	b.n	917a <uli2a+0x12>
    91a0:	2c09      	cmp	r4, #9
    91a2:	dd0a      	ble.n	91ba <uli2a+0x52>
    91a4:	780b      	ldrb	r3, [r1, #0]
    91a6:	f013 0f04 	tst.w	r3, #4
    91aa:	bf14      	ite	ne
    91ac:	2337      	movne	r3, #55	; 0x37
    91ae:	2357      	moveq	r3, #87	; 0x57
    91b0:	4423      	add	r3, r4
    91b2:	f802 3b01 	strb.w	r3, [r2], #1
            ++n;
    91b6:	3501      	adds	r5, #1
    91b8:	e7f0      	b.n	919c <uli2a+0x34>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    91ba:	2330      	movs	r3, #48	; 0x30
    91bc:	e7f8      	b.n	91b0 <uli2a+0x48>

000091be <ui2a>:
    uli2a(num, p);
}
#endif

static void ui2a(unsigned int num, struct param *p)
{
    91be:	b5f0      	push	{r4, r5, r6, r7, lr}
    int n = 0;
    unsigned int d = 1;
    91c0:	2301      	movs	r3, #1
    char *bf = p->bf;
    while (num / d >= p->base)
    91c2:	e9d1 4203 	ldrd	r4, r2, [r1, #12]
    91c6:	fbb0 f5f3 	udiv	r5, r0, r3
    91ca:	42a5      	cmp	r5, r4
    91cc:	d203      	bcs.n	91d6 <ui2a+0x18>
    int n = 0;
    91ce:	2500      	movs	r5, #0
        d *= p->base;
    while (d != 0) {
    91d0:	b91b      	cbnz	r3, 91da <ui2a+0x1c>
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
            ++n;
        }
    }
    *bf = 0;
    91d2:	7013      	strb	r3, [r2, #0]
}
    91d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        d *= p->base;
    91d6:	4363      	muls	r3, r4
    91d8:	e7f5      	b.n	91c6 <ui2a+0x8>
        int dgt = num / d;
    91da:	fbb0 f4f3 	udiv	r4, r0, r3
        d /= p->base;
    91de:	68ce      	ldr	r6, [r1, #12]
        num %= d;
    91e0:	fb03 0014 	mls	r0, r3, r4, r0
        d /= p->base;
    91e4:	fbb3 f7f6 	udiv	r7, r3, r6
        if (n || dgt > 0 || d == 0) {
    91e8:	b92d      	cbnz	r5, 91f6 <ui2a+0x38>
    91ea:	2c00      	cmp	r4, #0
    91ec:	dc03      	bgt.n	91f6 <ui2a+0x38>
    91ee:	429e      	cmp	r6, r3
    91f0:	d80e      	bhi.n	9210 <ui2a+0x52>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    91f2:	463b      	mov	r3, r7
    91f4:	e7ec      	b.n	91d0 <ui2a+0x12>
    91f6:	2c09      	cmp	r4, #9
    91f8:	dd0a      	ble.n	9210 <ui2a+0x52>
    91fa:	780b      	ldrb	r3, [r1, #0]
    91fc:	f013 0f04 	tst.w	r3, #4
    9200:	bf14      	ite	ne
    9202:	2337      	movne	r3, #55	; 0x37
    9204:	2357      	moveq	r3, #87	; 0x57
    9206:	4423      	add	r3, r4
    9208:	f802 3b01 	strb.w	r3, [r2], #1
            ++n;
    920c:	3501      	adds	r5, #1
    920e:	e7f0      	b.n	91f2 <ui2a+0x34>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    9210:	2330      	movs	r3, #48	; 0x30
    9212:	e7f8      	b.n	9206 <ui2a+0x48>

00009214 <putchw>:
    *nump = num;
    return ch;
}

static void putchw(void *putp, putcf putf, struct param *p)
{
    9214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9218:	4606      	mov	r6, r0
    921a:	460f      	mov	r7, r1
    921c:	4615      	mov	r5, r2
    char ch;
    int n = p->width;
    921e:	6854      	ldr	r4, [r2, #4]
    char *bf = p->bf;
    9220:	6913      	ldr	r3, [r2, #16]

    /* Number of filling characters */
    while (*bf++ && n > 0)
    9222:	f813 2b01 	ldrb.w	r2, [r3], #1
    9226:	b10a      	cbz	r2, 922c <putchw+0x18>
    9228:	2c00      	cmp	r4, #0
    922a:	dc44      	bgt.n	92b6 <putchw+0xa2>
        n--;
    if (p->sign)
    922c:	7a2b      	ldrb	r3, [r5, #8]
    922e:	b103      	cbz	r3, 9232 <putchw+0x1e>
        n--;
    9230:	3c01      	subs	r4, #1
    if (p->alt && p->base == 16)
    9232:	782b      	ldrb	r3, [r5, #0]
    9234:	0799      	lsls	r1, r3, #30
    9236:	d503      	bpl.n	9240 <putchw+0x2c>
    9238:	68ea      	ldr	r2, [r5, #12]
    923a:	2a10      	cmp	r2, #16
    923c:	d13d      	bne.n	92ba <putchw+0xa6>
        n -= 2;
    923e:	3c02      	subs	r4, #2
    else if (p->alt && p->base == 8)
        n--;

    /* Fill with space to align to the right, before alternate or sign */
    if (!p->lz && !p->align_left) {
    9240:	f013 0f09 	tst.w	r3, #9
    9244:	d108      	bne.n	9258 <putchw+0x44>
    9246:	46a0      	mov	r8, r4
        while (n-- > 0)
    9248:	f1b8 0f00 	cmp.w	r8, #0
    924c:	dc3a      	bgt.n	92c4 <putchw+0xb0>
    924e:	1e63      	subs	r3, r4, #1
    9250:	2c00      	cmp	r4, #0
    9252:	bfb4      	ite	lt
    9254:	461c      	movlt	r4, r3
    9256:	1b1c      	subge	r4, r3, r4
            putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
    9258:	7a29      	ldrb	r1, [r5, #8]
    925a:	b109      	cbz	r1, 9260 <putchw+0x4c>
        putf(putp, p->sign);
    925c:	4630      	mov	r0, r6
    925e:	47b8      	blx	r7

    /* Alternate */
    if (p->alt && p->base == 16) {
    9260:	782b      	ldrb	r3, [r5, #0]
    9262:	079a      	lsls	r2, r3, #30
    9264:	d50d      	bpl.n	9282 <putchw+0x6e>
    9266:	68eb      	ldr	r3, [r5, #12]
    9268:	2b10      	cmp	r3, #16
    926a:	d131      	bne.n	92d0 <putchw+0xbc>
        putf(putp, '0');
    926c:	2130      	movs	r1, #48	; 0x30
    926e:	4630      	mov	r0, r6
    9270:	47b8      	blx	r7
        putf(putp, (p->uc ? 'X' : 'x'));
    9272:	782b      	ldrb	r3, [r5, #0]
    9274:	f013 0f04 	tst.w	r3, #4
    9278:	bf14      	ite	ne
    927a:	2158      	movne	r1, #88	; 0x58
    927c:	2178      	moveq	r1, #120	; 0x78
    } else if (p->alt && p->base == 8) {
        putf(putp, '0');
    927e:	4630      	mov	r0, r6
    9280:	47b8      	blx	r7
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
    9282:	782b      	ldrb	r3, [r5, #0]
    9284:	07db      	lsls	r3, r3, #31
    9286:	d508      	bpl.n	929a <putchw+0x86>
    9288:	46a0      	mov	r8, r4
        while (n-- > 0)
    928a:	f1b8 0f00 	cmp.w	r8, #0
    928e:	dc23      	bgt.n	92d8 <putchw+0xc4>
    9290:	1e63      	subs	r3, r4, #1
    9292:	2c00      	cmp	r4, #0
    9294:	bfb4      	ite	lt
    9296:	461c      	movlt	r4, r3
    9298:	1b1c      	subge	r4, r3, r4
            putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
    929a:	f8d5 8010 	ldr.w	r8, [r5, #16]
    while ((ch = *bf++))
    929e:	f818 1b01 	ldrb.w	r1, [r8], #1
    92a2:	b9f9      	cbnz	r1, 92e4 <putchw+0xd0>
        putf(putp, ch);

    /* Fill with space to align to the left, after string */
    if (!p->lz && p->align_left) {
    92a4:	782b      	ldrb	r3, [r5, #0]
    92a6:	f003 0309 	and.w	r3, r3, #9
    92aa:	2b08      	cmp	r3, #8
    92ac:	d101      	bne.n	92b2 <putchw+0x9e>
        while (n-- > 0)
    92ae:	2c00      	cmp	r4, #0
    92b0:	dc1b      	bgt.n	92ea <putchw+0xd6>
            putf(putp, ' ');
    }
}
    92b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        n--;
    92b6:	3c01      	subs	r4, #1
    92b8:	e7b3      	b.n	9222 <putchw+0xe>
    else if (p->alt && p->base == 8)
    92ba:	2a08      	cmp	r2, #8
        n--;
    92bc:	bf08      	it	eq
    92be:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
    92c2:	e7bd      	b.n	9240 <putchw+0x2c>
            putf(putp, ' ');
    92c4:	2120      	movs	r1, #32
    92c6:	4630      	mov	r0, r6
    92c8:	47b8      	blx	r7
    92ca:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    92ce:	e7bb      	b.n	9248 <putchw+0x34>
    } else if (p->alt && p->base == 8) {
    92d0:	2b08      	cmp	r3, #8
    92d2:	d1d6      	bne.n	9282 <putchw+0x6e>
        putf(putp, '0');
    92d4:	2130      	movs	r1, #48	; 0x30
    92d6:	e7d2      	b.n	927e <putchw+0x6a>
            putf(putp, '0');
    92d8:	2130      	movs	r1, #48	; 0x30
    92da:	4630      	mov	r0, r6
    92dc:	47b8      	blx	r7
    92de:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    92e2:	e7d2      	b.n	928a <putchw+0x76>
        putf(putp, ch);
    92e4:	4630      	mov	r0, r6
    92e6:	47b8      	blx	r7
    92e8:	e7d9      	b.n	929e <putchw+0x8a>
            putf(putp, ' ');
    92ea:	2120      	movs	r1, #32
    92ec:	4630      	mov	r0, r6
    92ee:	47b8      	blx	r7
    92f0:	3c01      	subs	r4, #1
    92f2:	e7dc      	b.n	92ae <putchw+0x9a>

000092f4 <_vsnprintf_putcf>:
};

static void _vsnprintf_putcf(void *p, char c)
{
  struct _vsnprintf_putcf_data *data = (struct _vsnprintf_putcf_data*)p;
  if (data->num_chars < data->dest_capacity)
    92f4:	6883      	ldr	r3, [r0, #8]
    92f6:	6802      	ldr	r2, [r0, #0]
    92f8:	4293      	cmp	r3, r2
    data->dest[data->num_chars] = c;
    92fa:	bf3c      	itt	cc
    92fc:	6842      	ldrcc	r2, [r0, #4]
    92fe:	54d1      	strbcc	r1, [r2, r3]
  data->num_chars ++;
    9300:	6883      	ldr	r3, [r0, #8]
    9302:	3301      	adds	r3, #1
    9304:	6083      	str	r3, [r0, #8]
}
    9306:	4770      	bx	lr

00009308 <tfp_format>:
{
    9308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    930c:	b08d      	sub	sp, #52	; 0x34
            p.width = 0;
    930e:	f04f 0900 	mov.w	r9, #0
{
    9312:	4607      	mov	r7, r0
    9314:	4688      	mov	r8, r1
    9316:	4615      	mov	r5, r2
    9318:	461c      	mov	r4, r3
            p.width = 0;
    931a:	46ca      	mov	sl, r9
    p.bf = bf;
    931c:	ae06      	add	r6, sp, #24
    931e:	9605      	str	r6, [sp, #20]
    while ((ch = *(fmt++))) {
    9320:	f815 bb01 	ldrb.w	fp, [r5], #1
    9324:	f1bb 0f00 	cmp.w	fp, #0
    9328:	d076      	beq.n	9418 <tfp_format+0x110>
        if (ch != '%') {
    932a:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
    932e:	d009      	beq.n	9344 <tfp_format+0x3c>
			if (ch == '\n')
    9330:	f1bb 0f0a 	cmp.w	fp, #10
    9334:	d102      	bne.n	933c <tfp_format+0x34>
				putf(putp, '\r');
    9336:	210d      	movs	r1, #13
    9338:	4638      	mov	r0, r7
    933a:	47c0      	blx	r8
            putf(putp, ch);
    933c:	4659      	mov	r1, fp
                putf(putp, ch);
    933e:	4638      	mov	r0, r7
    9340:	47c0      	blx	r8
    9342:	e7ed      	b.n	9320 <tfp_format+0x18>
            p.lz = 0;
    9344:	f89d 3004 	ldrb.w	r3, [sp, #4]
            p.width = 0;
    9348:	f8cd a008 	str.w	sl, [sp, #8]
            p.lz = 0;
    934c:	f023 030b 	bic.w	r3, r3, #11
    9350:	f88d 3004 	strb.w	r3, [sp, #4]
            while ((ch = *(fmt++))) {
    9354:	2300      	movs	r3, #0
    9356:	461a      	mov	r2, r3
    9358:	4618      	mov	r0, r3
            p.sign = 0;
    935a:	f88d 900c 	strb.w	r9, [sp, #12]
            while ((ch = *(fmt++))) {
    935e:	f815 1b01 	ldrb.w	r1, [r5], #1
    9362:	b129      	cbz	r1, 9370 <tfp_format+0x68>
                switch (ch) {
    9364:	292d      	cmp	r1, #45	; 0x2d
    9366:	d01f      	beq.n	93a8 <tfp_format+0xa0>
    9368:	2930      	cmp	r1, #48	; 0x30
    936a:	d01f      	beq.n	93ac <tfp_format+0xa4>
    936c:	2923      	cmp	r1, #35	; 0x23
    936e:	d01f      	beq.n	93b0 <tfp_format+0xa8>
    9370:	b128      	cbz	r0, 937e <tfp_format+0x76>
    9372:	f89d 0004 	ldrb.w	r0, [sp, #4]
    9376:	f040 0008 	orr.w	r0, r0, #8
    937a:	f88d 0004 	strb.w	r0, [sp, #4]
    937e:	b12a      	cbz	r2, 938c <tfp_format+0x84>
    9380:	f89d 2004 	ldrb.w	r2, [sp, #4]
    9384:	f042 0201 	orr.w	r2, r2, #1
    9388:	f88d 2004 	strb.w	r2, [sp, #4]
    938c:	b12b      	cbz	r3, 939a <tfp_format+0x92>
    938e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    9392:	f043 0302 	orr.w	r3, r3, #2
    9396:	f88d 3004 	strb.w	r3, [sp, #4]
            if (ch >= '0' && ch <= '9') {
    939a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    939e:	2b09      	cmp	r3, #9
    93a0:	d81c      	bhi.n	93dc <tfp_format+0xd4>
    unsigned int num = 0;
    93a2:	2200      	movs	r2, #0
        num = num * base + digit;
    93a4:	200a      	movs	r0, #10
    93a6:	e009      	b.n	93bc <tfp_format+0xb4>
                switch (ch) {
    93a8:	2001      	movs	r0, #1
    93aa:	e7d8      	b.n	935e <tfp_format+0x56>
                    p.lz = 1;
    93ac:	2201      	movs	r2, #1
    93ae:	e7d6      	b.n	935e <tfp_format+0x56>
                    p.alt = 1;
    93b0:	2301      	movs	r3, #1
    93b2:	e7d4      	b.n	935e <tfp_format+0x56>
        num = num * base + digit;
    93b4:	fb00 3202 	mla	r2, r0, r2, r3
        ch = *p++;
    93b8:	f815 1b01 	ldrb.w	r1, [r5], #1
    if (ch >= '0' && ch <= '9')
    93bc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    93c0:	fa5f fc83 	uxtb.w	ip, r3
    93c4:	f1bc 0f09 	cmp.w	ip, #9
    93c8:	d9f4      	bls.n	93b4 <tfp_format+0xac>
    else if (ch >= 'a' && ch <= 'f')
    93ca:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
    93ce:	2b05      	cmp	r3, #5
    93d0:	d825      	bhi.n	941e <tfp_format+0x116>
        return ch - 'a' + 10;
    93d2:	f1a1 0357 	sub.w	r3, r1, #87	; 0x57
        if (digit > base)
    93d6:	2b0a      	cmp	r3, #10
    93d8:	d0ec      	beq.n	93b4 <tfp_format+0xac>
    *nump = num;
    93da:	9202      	str	r2, [sp, #8]
            if (ch == '.') {
    93dc:	292e      	cmp	r1, #46	; 0x2e
    93de:	d10b      	bne.n	93f8 <tfp_format+0xf0>
              p.lz = 1;  /* zero-padding */
    93e0:	f89d 3004 	ldrb.w	r3, [sp, #4]
    93e4:	f043 0301 	orr.w	r3, r3, #1
    93e8:	f88d 3004 	strb.w	r3, [sp, #4]
                ch = *(fmt++);
    93ec:	f815 1b01 	ldrb.w	r1, [r5], #1
              } while ((ch >= '0') && (ch <= '9'));
    93f0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    93f4:	2b09      	cmp	r3, #9
    93f6:	d9f9      	bls.n	93ec <tfp_format+0xe4>
            if (ch == 'z') {
    93f8:	297a      	cmp	r1, #122	; 0x7a
    93fa:	d117      	bne.n	942c <tfp_format+0x124>
                ch = *(fmt++);
    93fc:	f815 1b01 	ldrb.w	r1, [r5], #1
                lng = 1;
    9400:	2301      	movs	r3, #1
            switch (ch) {
    9402:	2978      	cmp	r1, #120	; 0x78
    9404:	d88c      	bhi.n	9320 <tfp_format+0x18>
    9406:	2962      	cmp	r1, #98	; 0x62
    9408:	d81d      	bhi.n	9446 <tfp_format+0x13e>
    940a:	2925      	cmp	r1, #37	; 0x25
    940c:	d097      	beq.n	933e <tfp_format+0x36>
    940e:	2958      	cmp	r1, #88	; 0x58
    9410:	f000 809f 	beq.w	9552 <tfp_format+0x24a>
    9414:	2900      	cmp	r1, #0
    9416:	d183      	bne.n	9320 <tfp_format+0x18>
}
    9418:	b00d      	add	sp, #52	; 0x34
    941a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if (ch >= 'A' && ch <= 'F')
    941e:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
    9422:	2b05      	cmp	r3, #5
    9424:	d8d9      	bhi.n	93da <tfp_format+0xd2>
        return ch - 'A' + 10;
    9426:	f1a1 0337 	sub.w	r3, r1, #55	; 0x37
    942a:	e7d4      	b.n	93d6 <tfp_format+0xce>
            if (ch == 'l') {
    942c:	296c      	cmp	r1, #108	; 0x6c
    942e:	d108      	bne.n	9442 <tfp_format+0x13a>
                ch = *(fmt++);
    9430:	7829      	ldrb	r1, [r5, #0]
                if (ch == 'l') {
    9432:	296c      	cmp	r1, #108	; 0x6c
    9434:	d001      	beq.n	943a <tfp_format+0x132>
                ch = *(fmt++);
    9436:	3501      	adds	r5, #1
    9438:	e7e2      	b.n	9400 <tfp_format+0xf8>
                  ch = *(fmt++);
    943a:	7869      	ldrb	r1, [r5, #1]
                  lng = 2;
    943c:	2302      	movs	r3, #2
                  ch = *(fmt++);
    943e:	3502      	adds	r5, #2
    9440:	e7df      	b.n	9402 <tfp_format+0xfa>
            char lng = 0;  /* 1 for long, 2 for long long */
    9442:	2300      	movs	r3, #0
    9444:	e7dd      	b.n	9402 <tfp_format+0xfa>
    9446:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
    944a:	2a15      	cmp	r2, #21
    944c:	f63f af68 	bhi.w	9320 <tfp_format+0x18>
    9450:	a001      	add	r0, pc, #4	; (adr r0, 9458 <tfp_format+0x150>)
    9452:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    9456:	bf00      	nop
    9458:	0000958d 	.word	0x0000958d
    945c:	000094d5 	.word	0x000094d5
    9460:	00009321 	.word	0x00009321
    9464:	00009321 	.word	0x00009321
    9468:	00009321 	.word	0x00009321
    946c:	00009321 	.word	0x00009321
    9470:	000094d5 	.word	0x000094d5
    9474:	00009321 	.word	0x00009321
    9478:	00009321 	.word	0x00009321
    947c:	00009321 	.word	0x00009321
    9480:	00009321 	.word	0x00009321
    9484:	00009321 	.word	0x00009321
    9488:	0000957d 	.word	0x0000957d
    948c:	00009545 	.word	0x00009545
    9490:	00009321 	.word	0x00009321
    9494:	00009321 	.word	0x00009321
    9498:	00009595 	.word	0x00009595
    949c:	00009321 	.word	0x00009321
    94a0:	000094b1 	.word	0x000094b1
    94a4:	00009321 	.word	0x00009321
    94a8:	00009321 	.word	0x00009321
    94ac:	00009553 	.word	0x00009553
                p.base = 10;
    94b0:	220a      	movs	r2, #10
    94b2:	9204      	str	r2, [sp, #16]
                if (2 == lng)
    94b4:	2b02      	cmp	r3, #2
    94b6:	d159      	bne.n	956c <tfp_format+0x264>
                    ulli2a(va_arg(va, unsigned long long int), &p);
    94b8:	3407      	adds	r4, #7
    94ba:	f024 0407 	bic.w	r4, r4, #7
    94be:	aa01      	add	r2, sp, #4
    94c0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
    94c4:	f7ff fdf2 	bl	90ac <ulli2a>
                putchw(putp, putf, &p);
    94c8:	4641      	mov	r1, r8
    94ca:	4638      	mov	r0, r7
    94cc:	aa01      	add	r2, sp, #4
    94ce:	f7ff fea1 	bl	9214 <putchw>
                break;
    94d2:	e725      	b.n	9320 <tfp_format+0x18>
                p.base = 10;
    94d4:	220a      	movs	r2, #10
                if (2 == lng)
    94d6:	2b02      	cmp	r3, #2
                p.base = 10;
    94d8:	9204      	str	r2, [sp, #16]
                if (2 == lng)
    94da:	d118      	bne.n	950e <tfp_format+0x206>
                    lli2a(va_arg(va, long long int), &p);
    94dc:	3407      	adds	r4, #7
    94de:	f024 0b07 	bic.w	fp, r4, #7
    94e2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
    if (num < 0) {
    94e6:	2800      	cmp	r0, #0
    94e8:	f171 0300 	sbcs.w	r3, r1, #0
    94ec:	da05      	bge.n	94fa <tfp_format+0x1f2>
        p->sign = '-';
    94ee:	232d      	movs	r3, #45	; 0x2d
        num = -num;
    94f0:	4240      	negs	r0, r0
    94f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = '-';
    94f6:	f88d 300c 	strb.w	r3, [sp, #12]
    ulli2a(num, p);
    94fa:	aa01      	add	r2, sp, #4
    94fc:	f7ff fdd6 	bl	90ac <ulli2a>
                putchw(putp, putf, &p);
    9500:	4641      	mov	r1, r8
    9502:	4638      	mov	r0, r7
    9504:	aa01      	add	r2, sp, #4
    9506:	f7ff fe85 	bl	9214 <putchw>
                break;
    950a:	465c      	mov	r4, fp
    950c:	e708      	b.n	9320 <tfp_format+0x18>
                  if (1 == lng)
    950e:	2b01      	cmp	r3, #1
                    li2a(va_arg(va, long int), &p);
    9510:	6820      	ldr	r0, [r4, #0]
    9512:	f104 0b04 	add.w	fp, r4, #4
                  if (1 == lng)
    9516:	d10a      	bne.n	952e <tfp_format+0x226>
    if (num < 0) {
    9518:	2800      	cmp	r0, #0
        p->sign = '-';
    951a:	bfbc      	itt	lt
    951c:	232d      	movlt	r3, #45	; 0x2d
        num = -num;
    951e:	4240      	neglt	r0, r0
    uli2a(num, p);
    9520:	a901      	add	r1, sp, #4
        p->sign = '-';
    9522:	bfb8      	it	lt
    9524:	f88d 300c 	strblt.w	r3, [sp, #12]
    uli2a(num, p);
    9528:	f7ff fe1e 	bl	9168 <uli2a>
}
    952c:	e7e8      	b.n	9500 <tfp_format+0x1f8>
    if (num < 0) {
    952e:	2800      	cmp	r0, #0
        p->sign = '-';
    9530:	bfbc      	itt	lt
    9532:	232d      	movlt	r3, #45	; 0x2d
        num = -num;
    9534:	4240      	neglt	r0, r0
    ui2a(num, p);
    9536:	a901      	add	r1, sp, #4
        p->sign = '-';
    9538:	bfb8      	it	lt
    953a:	f88d 300c 	strblt.w	r3, [sp, #12]
    ui2a(num, p);
    953e:	f7ff fe3e 	bl	91be <ui2a>
}
    9542:	e7dd      	b.n	9500 <tfp_format+0x1f8>
                p.alt = 1;
    9544:	f89d 3004 	ldrb.w	r3, [sp, #4]
    9548:	f043 0302 	orr.w	r3, r3, #2
    954c:	f88d 3004 	strb.w	r3, [sp, #4]
                lng = 0;
    9550:	2300      	movs	r3, #0
                p.base = 16;
    9552:	2210      	movs	r2, #16
    9554:	9204      	str	r2, [sp, #16]
                p.uc = (ch == 'X')?1:0;
    9556:	f1a1 0258 	sub.w	r2, r1, #88	; 0x58
    955a:	4251      	negs	r1, r2
    955c:	4151      	adcs	r1, r2
    955e:	f89d 2004 	ldrb.w	r2, [sp, #4]
    9562:	f361 0282 	bfi	r2, r1, #2, #1
    9566:	f88d 2004 	strb.w	r2, [sp, #4]
    956a:	e7a3      	b.n	94b4 <tfp_format+0x1ac>
                  if (1 == lng)
    956c:	2b01      	cmp	r3, #1
    956e:	f854 0b04 	ldr.w	r0, [r4], #4
                    uli2a(va_arg(va, unsigned long int), &p);
    9572:	a901      	add	r1, sp, #4
                  if (1 == lng)
    9574:	d107      	bne.n	9586 <tfp_format+0x27e>
                    uli2a(va_arg(va, unsigned long int), &p);
    9576:	f7ff fdf7 	bl	9168 <uli2a>
    957a:	e7a5      	b.n	94c8 <tfp_format+0x1c0>
                p.base = 8;
    957c:	2308      	movs	r3, #8
                ui2a(va_arg(va, unsigned int), &p);
    957e:	f854 0b04 	ldr.w	r0, [r4], #4
                p.base = 8;
    9582:	9304      	str	r3, [sp, #16]
                ui2a(va_arg(va, unsigned int), &p);
    9584:	a901      	add	r1, sp, #4
                    ui2a(va_arg(va, unsigned int), &p);
    9586:	f7ff fe1a 	bl	91be <ui2a>
    958a:	e79d      	b.n	94c8 <tfp_format+0x1c0>
                putf(putp, (char)(va_arg(va, int)));
    958c:	f854 1b04 	ldr.w	r1, [r4], #4
    9590:	b2c9      	uxtb	r1, r1
    9592:	e6d4      	b.n	933e <tfp_format+0x36>
                p.bf = va_arg(va, char *);
    9594:	f854 3b04 	ldr.w	r3, [r4], #4
                putchw(putp, putf, &p);
    9598:	4641      	mov	r1, r8
    959a:	4638      	mov	r0, r7
    959c:	aa01      	add	r2, sp, #4
                p.bf = va_arg(va, char *);
    959e:	9305      	str	r3, [sp, #20]
                putchw(putp, putf, &p);
    95a0:	f7ff fe38 	bl	9214 <putchw>
                p.bf = bf;
    95a4:	9605      	str	r6, [sp, #20]
                break;
    95a6:	e6bb      	b.n	9320 <tfp_format+0x18>

000095a8 <tfp_vsnprintf>:

int tfp_vsnprintf(char *str, size_t size, const char *format, va_list ap)
{
    95a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  struct _vsnprintf_putcf_data data;

  if (size < 1)
    95aa:	2400      	movs	r4, #0
    95ac:	b189      	cbz	r1, 95d2 <tfp_vsnprintf+0x2a>
    return 0;

  data.dest = str;
  data.dest_capacity = size-1;
    95ae:	3901      	subs	r1, #1
  data.dest = str;
    95b0:	9002      	str	r0, [sp, #8]
  data.dest_capacity = size-1;
    95b2:	9101      	str	r1, [sp, #4]
  data.num_chars = 0;
  tfp_format(&data, _vsnprintf_putcf, format, ap);
    95b4:	a801      	add	r0, sp, #4
    95b6:	4908      	ldr	r1, [pc, #32]	; (95d8 <tfp_vsnprintf+0x30>)
  data.num_chars = 0;
    95b8:	9403      	str	r4, [sp, #12]
  tfp_format(&data, _vsnprintf_putcf, format, ap);
    95ba:	f7ff fea5 	bl	9308 <tfp_format>

  if (data.num_chars < data.dest_capacity)
    95be:	9903      	ldr	r1, [sp, #12]
    95c0:	9b01      	ldr	r3, [sp, #4]
    95c2:	9a02      	ldr	r2, [sp, #8]
    95c4:	4299      	cmp	r1, r3
    data.dest[data.num_chars] = '\0';
    95c6:	bf34      	ite	cc
    95c8:	5454      	strbcc	r4, [r2, r1]
  else
    data.dest[data.dest_capacity] = '\0';
    95ca:	54d4      	strbcs	r4, [r2, r3]

  return data.num_chars;
    95cc:	9803      	ldr	r0, [sp, #12]
}
    95ce:	b004      	add	sp, #16
    95d0:	bd10      	pop	{r4, pc}
    return 0;
    95d2:	4608      	mov	r0, r1
    95d4:	e7fb      	b.n	95ce <tfp_vsnprintf+0x26>
    95d6:	bf00      	nop
    95d8:	000092f5 	.word	0x000092f5

000095dc <delay_30ms>:
 */

#include "ubertooth.h"

// delay for about 30 ms (very rough)
static void delay_30ms(void) {
    95dc:	b082      	sub	sp, #8
	volatile int i;
	for (i = 0; i < 3000000; ++i)
    95de:	2300      	movs	r3, #0
    95e0:	4a05      	ldr	r2, [pc, #20]	; (95f8 <delay_30ms+0x1c>)
    95e2:	9301      	str	r3, [sp, #4]
    95e4:	9b01      	ldr	r3, [sp, #4]
    95e6:	4293      	cmp	r3, r2
    95e8:	dd01      	ble.n	95ee <delay_30ms+0x12>
		;
}
    95ea:	b002      	add	sp, #8
    95ec:	4770      	bx	lr
	for (i = 0; i < 3000000; ++i)
    95ee:	9b01      	ldr	r3, [sp, #4]
    95f0:	3301      	adds	r3, #1
    95f2:	9301      	str	r3, [sp, #4]
    95f4:	e7f6      	b.n	95e4 <delay_30ms+0x8>
    95f6:	bf00      	nop
    95f8:	002dc6bf 	.word	0x002dc6bf

000095fc <flash_leds>:

// flash LEDs a certain number of times
static void flash_leds(int count) {
    95fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	for (i = 0; i < count; ++i) {
		USRLED_SET;
    9600:	2702      	movs	r7, #2
	for (i = 0; i < count; ++i) {
    9602:	2100      	movs	r1, #0
		USRLED_SET;
    9604:	46b8      	mov	r8, r7
    9606:	4c0d      	ldr	r4, [pc, #52]	; (963c <flash_leds+0x40>)
		RXLED_SET;
    9608:	2610      	movs	r6, #16
		TXLED_SET;
    960a:	f44f 7580 	mov.w	r5, #256	; 0x100
		USRLED_SET;
    960e:	f8c4 8000 	str.w	r8, [r4]
		RXLED_SET;
    9612:	6026      	str	r6, [r4, #0]
		TXLED_SET;
    9614:	6025      	str	r5, [r4, #0]
		delay_30ms();
    9616:	f7ff ffe1 	bl	95dc <delay_30ms>
		USRLED_CLR;
    961a:	4b09      	ldr	r3, [pc, #36]	; (9640 <flash_leds+0x44>)
    961c:	601f      	str	r7, [r3, #0]
		RXLED_CLR;
    961e:	601e      	str	r6, [r3, #0]
		TXLED_CLR;
    9620:	601d      	str	r5, [r3, #0]
		delay_30ms();
    9622:	f7ff ffdb 	bl	95dc <delay_30ms>
	for (i = 0; i < count; ++i) {
    9626:	3101      	adds	r1, #1
    9628:	4288      	cmp	r0, r1
    962a:	d1ed      	bne.n	9608 <flash_leds+0xc>
	}
	delay_30ms();
    962c:	f7ff ffd6 	bl	95dc <delay_30ms>
	delay_30ms();
    9630:	f7ff ffd4 	bl	95dc <delay_30ms>
	delay_30ms();
}
    9634:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	delay_30ms();
    9638:	f7ff bfd0 	b.w	95dc <delay_30ms>
    963c:	2009c038 	.word	0x2009c038
    9640:	2009c03c 	.word	0x2009c03c

00009644 <HardFault_Handler>:

void HardFault_Handler(void) {
    9644:	b538      	push	{r3, r4, r5, lr}
	uint32_t val = SCB_HFSR;
    9646:	4b0c      	ldr	r3, [pc, #48]	; (9678 <HardFault_Handler+0x34>)
    9648:	681c      	ldr	r4, [r3, #0]

	while (1) {
		flash_leds(2);

		if (val & (1 << 1)) {
    964a:	f004 0502 	and.w	r5, r4, #2
			flash_leds(3); // vector table read
		} else if (val & (1 << 30)) {
    964e:	f004 4480 	and.w	r4, r4, #1073741824	; 0x40000000
		flash_leds(2);
    9652:	2002      	movs	r0, #2
    9654:	f7ff ffd2 	bl	95fc <flash_leds>
		if (val & (1 << 1)) {
    9658:	b14d      	cbz	r5, 966e <HardFault_Handler+0x2a>
			flash_leds(3); // vector table read
    965a:	2003      	movs	r0, #3
			flash_leds(4); // forced (should never happen)
    965c:	f7ff ffce 	bl	95fc <flash_leds>
		}

		delay_30ms();
    9660:	f7ff ffbc 	bl	95dc <delay_30ms>
		delay_30ms();
    9664:	f7ff ffba 	bl	95dc <delay_30ms>
		delay_30ms();
    9668:	f7ff ffb8 	bl	95dc <delay_30ms>
		flash_leds(2);
    966c:	e7f1      	b.n	9652 <HardFault_Handler+0xe>
		} else if (val & (1 << 30)) {
    966e:	2c00      	cmp	r4, #0
    9670:	d0f6      	beq.n	9660 <HardFault_Handler+0x1c>
			flash_leds(4); // forced (should never happen)
    9672:	2004      	movs	r0, #4
    9674:	e7f2      	b.n	965c <HardFault_Handler+0x18>
    9676:	bf00      	nop
    9678:	e000ed2c 	.word	0xe000ed2c

0000967c <MemManagement_Handler>:
	}
}

void MemManagement_Handler(void) {
    967c:	b530      	push	{r4, r5, lr}
    967e:	b087      	sub	sp, #28
	int i;
	int offset[5] = { 7, 4, 3, 1, 0 };
    9680:	4d10      	ldr	r5, [pc, #64]	; (96c4 <MemManagement_Handler+0x48>)
    9682:	ac01      	add	r4, sp, #4
    9684:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    9686:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    9688:	682b      	ldr	r3, [r5, #0]
    968a:	6023      	str	r3, [r4, #0]
	uint8_t mmsr = SCB_MMSR;
    968c:	4b0e      	ldr	r3, [pc, #56]	; (96c8 <MemManagement_Handler+0x4c>)
    968e:	781c      	ldrb	r4, [r3, #0]
    9690:	b2e4      	uxtb	r4, r4

	while (1) {
		flash_leds(3);
    9692:	2003      	movs	r0, #3
    9694:	f7ff ffb2 	bl	95fc <flash_leds>

		for (i = 0; i < 5; ++i) {
    9698:	2000      	movs	r0, #0
    969a:	aa01      	add	r2, sp, #4
			if (mmsr & (1 << offset[i])) {
    969c:	f852 3b04 	ldr.w	r3, [r2], #4
    96a0:	3001      	adds	r0, #1
    96a2:	fa44 f303 	asr.w	r3, r4, r3
    96a6:	07db      	lsls	r3, r3, #31
    96a8:	d508      	bpl.n	96bc <MemManagement_Handler+0x40>
				flash_leds(i+1);
    96aa:	f7ff ffa7 	bl	95fc <flash_leds>
				break;
			}
		}

		delay_30ms();
    96ae:	f7ff ff95 	bl	95dc <delay_30ms>
		delay_30ms();
    96b2:	f7ff ff93 	bl	95dc <delay_30ms>
		delay_30ms();
    96b6:	f7ff ff91 	bl	95dc <delay_30ms>
		flash_leds(3);
    96ba:	e7ea      	b.n	9692 <MemManagement_Handler+0x16>
		for (i = 0; i < 5; ++i) {
    96bc:	2805      	cmp	r0, #5
    96be:	d1ed      	bne.n	969c <MemManagement_Handler+0x20>
    96c0:	e7f5      	b.n	96ae <MemManagement_Handler+0x32>
    96c2:	bf00      	nop
    96c4:	0000b84c 	.word	0x0000b84c
    96c8:	e000ed28 	.word	0xe000ed28

000096cc <BusFault_Handler>:
	}
}

void BusFault_Handler(void) {
    96cc:	b530      	push	{r4, r5, lr}
    96ce:	b087      	sub	sp, #28
	int i;
	int offset[6] = { 7, 4, 3, 2, 1, 0 };
    96d0:	466c      	mov	r4, sp
    96d2:	4d11      	ldr	r5, [pc, #68]	; (9718 <BusFault_Handler+0x4c>)
    96d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    96d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    96d8:	e895 0003 	ldmia.w	r5, {r0, r1}
    96dc:	e884 0003 	stmia.w	r4, {r0, r1}
	uint8_t bfsr = SCB_BFSR;
    96e0:	4b0e      	ldr	r3, [pc, #56]	; (971c <BusFault_Handler+0x50>)
    96e2:	781c      	ldrb	r4, [r3, #0]
    96e4:	b2e4      	uxtb	r4, r4

	while (1) {
		flash_leds(4);
    96e6:	2004      	movs	r0, #4
    96e8:	f7ff ff88 	bl	95fc <flash_leds>

		for (i = 0; i < 6; ++i) {
    96ec:	466a      	mov	r2, sp
    96ee:	2000      	movs	r0, #0
			if (bfsr & (1 << offset[i])) {
    96f0:	f852 3b04 	ldr.w	r3, [r2], #4
    96f4:	3001      	adds	r0, #1
    96f6:	fa44 f303 	asr.w	r3, r4, r3
    96fa:	07db      	lsls	r3, r3, #31
    96fc:	d508      	bpl.n	9710 <BusFault_Handler+0x44>
				flash_leds(i+1);
    96fe:	f7ff ff7d 	bl	95fc <flash_leds>
				break;
			}
		}

		delay_30ms();
    9702:	f7ff ff6b 	bl	95dc <delay_30ms>
		delay_30ms();
    9706:	f7ff ff69 	bl	95dc <delay_30ms>
		delay_30ms();
    970a:	f7ff ff67 	bl	95dc <delay_30ms>
		flash_leds(4);
    970e:	e7ea      	b.n	96e6 <BusFault_Handler+0x1a>
		for (i = 0; i < 6; ++i) {
    9710:	2806      	cmp	r0, #6
    9712:	d1ed      	bne.n	96f0 <BusFault_Handler+0x24>
    9714:	e7f5      	b.n	9702 <BusFault_Handler+0x36>
    9716:	bf00      	nop
    9718:	0000b860 	.word	0x0000b860
    971c:	e000ed29 	.word	0xe000ed29

00009720 <UsageFault_Handler>:
	}
}

void UsageFault_Handler(void) {
    9720:	b530      	push	{r4, r5, lr}
    9722:	b087      	sub	sp, #28
	int i;
	int offset[6] = { 9, 8, 3, 2, 1, 0 };
    9724:	466c      	mov	r4, sp
    9726:	4d11      	ldr	r5, [pc, #68]	; (976c <UsageFault_Handler+0x4c>)
    9728:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    972a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    972c:	e895 0003 	ldmia.w	r5, {r0, r1}
	uint16_t ufsr = SCB_UFSR;
    9730:	4b0f      	ldr	r3, [pc, #60]	; (9770 <UsageFault_Handler+0x50>)
	int offset[6] = { 9, 8, 3, 2, 1, 0 };
    9732:	e884 0003 	stmia.w	r4, {r0, r1}
	uint16_t ufsr = SCB_UFSR;
    9736:	881c      	ldrh	r4, [r3, #0]
    9738:	b2a4      	uxth	r4, r4

	while (1) {
		flash_leds(5);
    973a:	2005      	movs	r0, #5
    973c:	f7ff ff5e 	bl	95fc <flash_leds>

		for (i = 0; i < 6; ++i) {
    9740:	466a      	mov	r2, sp
    9742:	2000      	movs	r0, #0
			if (ufsr & (1 << offset[i])) {
    9744:	f852 3b04 	ldr.w	r3, [r2], #4
    9748:	3001      	adds	r0, #1
    974a:	fa44 f303 	asr.w	r3, r4, r3
    974e:	07db      	lsls	r3, r3, #31
    9750:	d508      	bpl.n	9764 <UsageFault_Handler+0x44>
				flash_leds(i+1);
    9752:	f7ff ff53 	bl	95fc <flash_leds>
				break;
			}
		}

		delay_30ms();
    9756:	f7ff ff41 	bl	95dc <delay_30ms>
		delay_30ms();
    975a:	f7ff ff3f 	bl	95dc <delay_30ms>
		delay_30ms();
    975e:	f7ff ff3d 	bl	95dc <delay_30ms>
		flash_leds(5);
    9762:	e7ea      	b.n	973a <UsageFault_Handler+0x1a>
		for (i = 0; i < 6; ++i) {
    9764:	2806      	cmp	r0, #6
    9766:	d1ed      	bne.n	9744 <UsageFault_Handler+0x24>
    9768:	e7f5      	b.n	9756 <UsageFault_Handler+0x36>
    976a:	bf00      	nop
    976c:	0000b878 	.word	0x0000b878
    9770:	e000ed2a 	.word	0xe000ed2a

00009774 <xmas_main>:
	PCONP &= ~PCONP_PCTIM2;
}

#define BLINK (NOW + 400 + (rand() % 1200))

void xmas_main(void) {
    9774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    9778:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    977c:	4a29      	ldr	r2, [pc, #164]	; (9824 <xmas_main+0xb0>)
	PCONP |= PCONP_PCTIM2;
    977e:	4d2a      	ldr	r5, [pc, #168]	; (9828 <xmas_main+0xb4>)
	ISER0 = ISER0_ISE_USB;
    9780:	6013      	str	r3, [r2, #0]
	PCONP |= PCONP_PCTIM2;
    9782:	682b      	ldr	r3, [r5, #0]
	T2PR = 50000-1; // 1 ms
    9784:	f24c 314f 	movw	r1, #49999	; 0xc34f
	PCONP |= PCONP_PCTIM2;
    9788:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    978c:	602b      	str	r3, [r5, #0]
	T2TCR = TCR_Counter_Reset;
    978e:	2302      	movs	r3, #2
    9790:	4e26      	ldr	r6, [pc, #152]	; (982c <xmas_main+0xb8>)

	timer2_start();

	T2MR0 = BLINK;
    9792:	4f27      	ldr	r7, [pc, #156]	; (9830 <xmas_main+0xbc>)
	T2TCR = TCR_Counter_Reset;
    9794:	6033      	str	r3, [r6, #0]
	T2PR = 50000-1; // 1 ms
    9796:	4b27      	ldr	r3, [pc, #156]	; (9834 <xmas_main+0xc0>)
	T2MR0 = BLINK;
    9798:	f44f 6496 	mov.w	r4, #1200	; 0x4b0
	T2PR = 50000-1; // 1 ms
    979c:	6019      	str	r1, [r3, #0]
	T2TCR = TCR_Counter_Enable;
    979e:	2301      	movs	r3, #1
    97a0:	6033      	str	r3, [r6, #0]
	ISER0 = ISER0_ISE_TIMER2;
    97a2:	2308      	movs	r3, #8
    97a4:	6013      	str	r3, [r2, #0]
	T2MR0 = BLINK;
    97a6:	f8d7 8000 	ldr.w	r8, [r7]
    97aa:	f001 f9a5 	bl	aaf8 <rand>
    97ae:	fb90 f3f4 	sdiv	r3, r0, r4
    97b2:	fb03 0314 	mls	r3, r3, r4, r0
    97b6:	4a20      	ldr	r2, [pc, #128]	; (9838 <xmas_main+0xc4>)
    97b8:	f508 78c8 	add.w	r8, r8, #400	; 0x190
    97bc:	4443      	add	r3, r8
    97be:	6013      	str	r3, [r2, #0]
	T2MR1 = BLINK;
    97c0:	f8d7 8000 	ldr.w	r8, [r7]
    97c4:	f001 f998 	bl	aaf8 <rand>
    97c8:	fb90 f3f4 	sdiv	r3, r0, r4
    97cc:	fb03 0314 	mls	r3, r3, r4, r0
    97d0:	4a1a      	ldr	r2, [pc, #104]	; (983c <xmas_main+0xc8>)
    97d2:	f508 78c8 	add.w	r8, r8, #400	; 0x190
    97d6:	4443      	add	r3, r8
    97d8:	6013      	str	r3, [r2, #0]
	T2MR2 = BLINK;
    97da:	683f      	ldr	r7, [r7, #0]
    97dc:	f001 f98c 	bl	aaf8 <rand>
    97e0:	fb90 f3f4 	sdiv	r3, r0, r4
    97e4:	fb03 0414 	mls	r4, r3, r4, r0
    97e8:	f507 77c8 	add.w	r7, r7, #400	; 0x190
    97ec:	4b14      	ldr	r3, [pc, #80]	; (9840 <xmas_main+0xcc>)

	T2MCR |= TMCR_MR0I | TMCR_MR1I | TMCR_MR2I;
    97ee:	4a15      	ldr	r2, [pc, #84]	; (9844 <xmas_main+0xd0>)
	T2MR2 = BLINK;
    97f0:	443c      	add	r4, r7
    97f2:	601c      	str	r4, [r3, #0]
	T2MCR |= TMCR_MR0I | TMCR_MR1I | TMCR_MR2I;
    97f4:	6813      	ldr	r3, [r2, #0]
    97f6:	f043 0349 	orr.w	r3, r3, #73	; 0x49
    97fa:	6013      	str	r3, [r2, #0]

	while (requested_mode == MODE_XMAS)
    97fc:	4a12      	ldr	r2, [pc, #72]	; (9848 <xmas_main+0xd4>)
    97fe:	7813      	ldrb	r3, [r2, #0]
    9800:	2b11      	cmp	r3, #17
    9802:	d00d      	beq.n	9820 <xmas_main+0xac>
	T2TCR = TCR_Counter_Reset;
    9804:	2302      	movs	r3, #2
    9806:	6033      	str	r3, [r6, #0]
	ICER0 = ICER0_ICE_TIMER2;
    9808:	2308      	movs	r3, #8
    980a:	4a10      	ldr	r2, [pc, #64]	; (984c <xmas_main+0xd8>)
    980c:	6013      	str	r3, [r2, #0]
	PCONP &= ~PCONP_PCTIM2;
    980e:	682b      	ldr	r3, [r5, #0]
    9810:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    9814:	602b      	str	r3, [r5, #0]
		asm("WFI"); // wait for interrupt

	timer2_stop();

	// disable USB interrupts
	ICER0 = ICER0_ICE_USB;
    9816:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    981a:	6013      	str	r3, [r2, #0]
}
    981c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		asm("WFI"); // wait for interrupt
    9820:	bf30      	wfi
    9822:	e7ec      	b.n	97fe <xmas_main+0x8a>
    9824:	e000e100 	.word	0xe000e100
    9828:	400fc0c4 	.word	0x400fc0c4
    982c:	40090004 	.word	0x40090004
    9830:	40090008 	.word	0x40090008
    9834:	4009000c 	.word	0x4009000c
    9838:	40090018 	.word	0x40090018
    983c:	4009001c 	.word	0x4009001c
    9840:	40090020 	.word	0x40090020
    9844:	40090014 	.word	0x40090014
    9848:	10000b4e 	.word	0x10000b4e
    984c:	e000e180 	.word	0xe000e180

00009850 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler(void) {
    9850:	b510      	push	{r4, lr}
	if (T2IR & TIR_MR0_Interrupt) {
    9852:	4b2f      	ldr	r3, [pc, #188]	; (9910 <TIMER2_IRQHandler+0xc0>)
    9854:	681a      	ldr	r2, [r3, #0]
    9856:	07d0      	lsls	r0, r2, #31
    9858:	d51a      	bpl.n	9890 <TIMER2_IRQHandler+0x40>
		T2IR = TIR_MR0_Interrupt;
    985a:	2201      	movs	r2, #1
    985c:	601a      	str	r2, [r3, #0]
		if (USRLED) USRLED_CLR; else USRLED_SET;
    985e:	4b2d      	ldr	r3, [pc, #180]	; (9914 <TIMER2_IRQHandler+0xc4>)
    9860:	681b      	ldr	r3, [r3, #0]
    9862:	f013 0f02 	tst.w	r3, #2
    9866:	f04f 0302 	mov.w	r3, #2
    986a:	bf14      	ite	ne
    986c:	4a2a      	ldrne	r2, [pc, #168]	; (9918 <TIMER2_IRQHandler+0xc8>)
    986e:	4a2b      	ldreq	r2, [pc, #172]	; (991c <TIMER2_IRQHandler+0xcc>)
    9870:	6013      	str	r3, [r2, #0]
		T2MR0 = BLINK;
    9872:	4b2b      	ldr	r3, [pc, #172]	; (9920 <TIMER2_IRQHandler+0xd0>)
    9874:	681c      	ldr	r4, [r3, #0]
    9876:	f001 f93f 	bl	aaf8 <rand>
    987a:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
    987e:	fb90 f2f3 	sdiv	r2, r0, r3
    9882:	fb02 0313 	mls	r3, r2, r3, r0
    9886:	f504 74c8 	add.w	r4, r4, #400	; 0x190
    988a:	4a26      	ldr	r2, [pc, #152]	; (9924 <TIMER2_IRQHandler+0xd4>)
    988c:	4423      	add	r3, r4
    988e:	6013      	str	r3, [r2, #0]
	}
	if (T2IR & TIR_MR1_Interrupt) {
    9890:	4b1f      	ldr	r3, [pc, #124]	; (9910 <TIMER2_IRQHandler+0xc0>)
    9892:	681a      	ldr	r2, [r3, #0]
    9894:	0791      	lsls	r1, r2, #30
    9896:	d51a      	bpl.n	98ce <TIMER2_IRQHandler+0x7e>
		T2IR = TIR_MR1_Interrupt;
    9898:	2202      	movs	r2, #2
    989a:	601a      	str	r2, [r3, #0]
		if (RXLED) RXLED_CLR; else RXLED_SET;
    989c:	4b1d      	ldr	r3, [pc, #116]	; (9914 <TIMER2_IRQHandler+0xc4>)
    989e:	681b      	ldr	r3, [r3, #0]
    98a0:	f013 0f10 	tst.w	r3, #16
    98a4:	f04f 0310 	mov.w	r3, #16
    98a8:	bf14      	ite	ne
    98aa:	4a1b      	ldrne	r2, [pc, #108]	; (9918 <TIMER2_IRQHandler+0xc8>)
    98ac:	4a1b      	ldreq	r2, [pc, #108]	; (991c <TIMER2_IRQHandler+0xcc>)
    98ae:	6013      	str	r3, [r2, #0]
		T2MR1 = BLINK;
    98b0:	4b1b      	ldr	r3, [pc, #108]	; (9920 <TIMER2_IRQHandler+0xd0>)
    98b2:	681c      	ldr	r4, [r3, #0]
    98b4:	f001 f920 	bl	aaf8 <rand>
    98b8:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
    98bc:	fb90 f2f3 	sdiv	r2, r0, r3
    98c0:	fb02 0313 	mls	r3, r2, r3, r0
    98c4:	f504 74c8 	add.w	r4, r4, #400	; 0x190
    98c8:	4a17      	ldr	r2, [pc, #92]	; (9928 <TIMER2_IRQHandler+0xd8>)
    98ca:	4423      	add	r3, r4
    98cc:	6013      	str	r3, [r2, #0]
	}
	if (T2IR & TIR_MR2_Interrupt) {
    98ce:	4b10      	ldr	r3, [pc, #64]	; (9910 <TIMER2_IRQHandler+0xc0>)
    98d0:	681a      	ldr	r2, [r3, #0]
    98d2:	0752      	lsls	r2, r2, #29
    98d4:	d51a      	bpl.n	990c <TIMER2_IRQHandler+0xbc>
		T2IR = TIR_MR2_Interrupt;
    98d6:	2204      	movs	r2, #4
    98d8:	601a      	str	r2, [r3, #0]
		if (TXLED) TXLED_CLR; else TXLED_SET;
    98da:	4b0e      	ldr	r3, [pc, #56]	; (9914 <TIMER2_IRQHandler+0xc4>)
    98dc:	681b      	ldr	r3, [r3, #0]
    98de:	f413 7f80 	tst.w	r3, #256	; 0x100
    98e2:	f44f 7380 	mov.w	r3, #256	; 0x100
    98e6:	bf14      	ite	ne
    98e8:	4a0b      	ldrne	r2, [pc, #44]	; (9918 <TIMER2_IRQHandler+0xc8>)
    98ea:	4a0c      	ldreq	r2, [pc, #48]	; (991c <TIMER2_IRQHandler+0xcc>)
    98ec:	6013      	str	r3, [r2, #0]
		T2MR2 = BLINK;
    98ee:	4b0c      	ldr	r3, [pc, #48]	; (9920 <TIMER2_IRQHandler+0xd0>)
    98f0:	681c      	ldr	r4, [r3, #0]
    98f2:	f001 f901 	bl	aaf8 <rand>
    98f6:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
    98fa:	fb90 f2f3 	sdiv	r2, r0, r3
    98fe:	fb02 0313 	mls	r3, r2, r3, r0
    9902:	f504 74c8 	add.w	r4, r4, #400	; 0x190
    9906:	4a09      	ldr	r2, [pc, #36]	; (992c <TIMER2_IRQHandler+0xdc>)
    9908:	4423      	add	r3, r4
    990a:	6013      	str	r3, [r2, #0]
	}
}
    990c:	bd10      	pop	{r4, pc}
    990e:	bf00      	nop
    9910:	40090000 	.word	0x40090000
    9914:	2009c034 	.word	0x2009c034
    9918:	2009c03c 	.word	0x2009c03c
    991c:	2009c038 	.word	0x2009c038
    9920:	40090008 	.word	0x40090008
    9924:	40090018 	.word	0x40090018
    9928:	4009001c 	.word	0x4009001c
    992c:	40090020 	.word	0x40090020

00009930 <USB_IRQHandler>:
	return fifo_get(&rxfifo, &c) ? c : EOF;
}

void USB_IRQHandler()
{
	USBHwISR();
    9930:	f000 bcce 	b.w	a2d0 <USBHwISR>

00009934 <Reset_Handler>:
extern void __libc_init_array(void);
extern int main(void);

/* Reset Handler */
void Reset_Handler(void)
{
    9934:	b508      	push	{r3, lr}
	unsigned long *src, *dest;

	// Copy the data segment initializers from flash to SRAM
	src = &_etext;
	for(dest = &_data; dest < &_edata; )
    9936:	4b0d      	ldr	r3, [pc, #52]	; (996c <Reset_Handler+0x38>)
	src = &_etext;
    9938:	4a0d      	ldr	r2, [pc, #52]	; (9970 <Reset_Handler+0x3c>)
	for(dest = &_data; dest < &_edata; )
    993a:	490e      	ldr	r1, [pc, #56]	; (9974 <Reset_Handler+0x40>)
    993c:	428b      	cmp	r3, r1
    993e:	d30c      	bcc.n	995a <Reset_Handler+0x26>

	// Initialize the .bss segment of memory to zeros
	src = &_bss;
	while (src < &_ebss)
	{
		*src++ = 0;
    9940:	2100      	movs	r1, #0
	src = &_bss;
    9942:	4b0d      	ldr	r3, [pc, #52]	; (9978 <Reset_Handler+0x44>)
	while (src < &_ebss)
    9944:	4a0d      	ldr	r2, [pc, #52]	; (997c <Reset_Handler+0x48>)
    9946:	4293      	cmp	r3, r2
    9948:	d30c      	bcc.n	9964 <Reset_Handler+0x30>
	}

	__libc_init_array();
    994a:	f7fa fc23 	bl	4194 <__libc_init_array>

	// Set the vector table location.
	SCB_VTOR = (uint32_t)&_interrupt_vector_table;
    994e:	4a0c      	ldr	r2, [pc, #48]	; (9980 <Reset_Handler+0x4c>)
    9950:	4b0c      	ldr	r3, [pc, #48]	; (9984 <Reset_Handler+0x50>)
    9952:	601a      	str	r2, [r3, #0]

	main();
    9954:	f7fd f866 	bl	6a24 <main>

	// In case main() fails, have something to breakpoint
	while (1) {;}
    9958:	e7fe      	b.n	9958 <Reset_Handler+0x24>
		*dest++ = *src++;
    995a:	f852 0b04 	ldr.w	r0, [r2], #4
    995e:	f843 0b04 	str.w	r0, [r3], #4
    9962:	e7eb      	b.n	993c <Reset_Handler+0x8>
		*src++ = 0;
    9964:	f843 1b04 	str.w	r1, [r3], #4
    9968:	e7ed      	b.n	9946 <Reset_Handler+0x12>
    996a:	bf00      	nop
    996c:	10000020 	.word	0x10000020
    9970:	0000b8e8 	.word	0x0000b8e8
    9974:	10000b1c 	.word	0x10000b1c
    9978:	10000b20 	.word	0x10000b20
    997c:	10003c48 	.word	0x10003c48
    9980:	00004000 	.word	0x00004000
    9984:	e000ed08 	.word	0xe000ed08

00009988 <ADC_IRQHandler>:
extern unsigned long _StackTop;

extern void Reset_Handler(void);

/* Default interrupt handler */
static void Default_Handler(void) { while(1) {;} }
    9988:	e7fe      	b.n	9988 <ADC_IRQHandler>
    998a:	0000      	movs	r0, r0

0000998c <spi_delay>:
	cc2400_spi(16, out);
}

static volatile u32 delay_counter;
static void spi_delay() {
       delay_counter = 10;
    998c:	220a      	movs	r2, #10
    998e:	4b04      	ldr	r3, [pc, #16]	; (99a0 <spi_delay+0x14>)
    9990:	601a      	str	r2, [r3, #0]
       while (--delay_counter);
    9992:	681a      	ldr	r2, [r3, #0]
    9994:	3a01      	subs	r2, #1
    9996:	601a      	str	r2, [r3, #0]
    9998:	2a00      	cmp	r2, #0
    999a:	d1fa      	bne.n	9992 <spi_delay+0x6>
}
    999c:	4770      	bx	lr
    999e:	bf00      	nop
    99a0:	100012ac 	.word	0x100012ac

000099a4 <rbit>:
  asm("rbit %0, %1" : "=r" (result) : "r" (value));
    99a4:	fa90 f0a0 	rbit	r0, r0
}
    99a8:	4770      	bx	lr
    99aa:	0000      	movs	r0, r0

000099ac <wait_us>:
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
    99ac:	08c3      	lsrs	r3, r0, #3
    99ae:	eb03 0390 	add.w	r3, r3, r0, lsr #2
    99b2:	eb03 1390 	add.w	r3, r3, r0, lsr #6
    99b6:	eb03 13d0 	add.w	r3, r3, r0, lsr #7
    99ba:	eb03 2390 	add.w	r3, r3, r0, lsr #10
    99be:	eb03 20d0 	add.w	r0, r3, r0, lsr #11
	wait_us_counter =
    99c2:	4b04      	ldr	r3, [pc, #16]	; (99d4 <wait_us+0x28>)
    99c4:	6058      	str	r0, [r3, #4]
	while(--wait_us_counter);
    99c6:	685a      	ldr	r2, [r3, #4]
    99c8:	3a01      	subs	r2, #1
    99ca:	605a      	str	r2, [r3, #4]
    99cc:	2a00      	cmp	r2, #0
    99ce:	d1fa      	bne.n	99c6 <wait_us+0x1a>
}
    99d0:	4770      	bx	lr
    99d2:	bf00      	nop
    99d4:	100012ac 	.word	0x100012ac

000099d8 <wait>:
	wait_us(seconds * 1000000);
    99d8:	4b01      	ldr	r3, [pc, #4]	; (99e0 <wait+0x8>)
    99da:	4358      	muls	r0, r3
    99dc:	f7ff bfe6 	b.w	99ac <wait_us>
    99e0:	000f4240 	.word	0x000f4240

000099e4 <all_pins_off>:
	PINSEL0 = 0;
    99e4:	2300      	movs	r3, #0
    99e6:	4a10      	ldr	r2, [pc, #64]	; (9a28 <all_pins_off+0x44>)
    99e8:	6013      	str	r3, [r2, #0]
	PINSEL1 = 0;
    99ea:	6053      	str	r3, [r2, #4]
	PINSEL2 = 0;
    99ec:	6093      	str	r3, [r2, #8]
	PINSEL3 = 0;
    99ee:	60d3      	str	r3, [r2, #12]
	PINSEL4 = 0;
    99f0:	6113      	str	r3, [r2, #16]
	PINSEL7 = 0;
    99f2:	61d3      	str	r3, [r2, #28]
	PINSEL9 = 0;
    99f4:	6253      	str	r3, [r2, #36]	; 0x24
	PINSEL10 = 0;
    99f6:	6293      	str	r3, [r2, #40]	; 0x28
	FIO0DIR = 0;
    99f8:	4a0c      	ldr	r2, [pc, #48]	; (9a2c <all_pins_off+0x48>)
    99fa:	6013      	str	r3, [r2, #0]
	FIO1DIR = 0;
    99fc:	6213      	str	r3, [r2, #32]
	FIO2DIR = 0;
    99fe:	6413      	str	r3, [r2, #64]	; 0x40
	FIO3DIR = 0;
    9a00:	6613      	str	r3, [r2, #96]	; 0x60
	FIO4DIR = 0;
    9a02:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	PINMODE0 = 0;
    9a06:	4a0a      	ldr	r2, [pc, #40]	; (9a30 <all_pins_off+0x4c>)
    9a08:	6013      	str	r3, [r2, #0]
	PINMODE1 = 0;
    9a0a:	6053      	str	r3, [r2, #4]
	PINMODE2 = 0;
    9a0c:	6093      	str	r3, [r2, #8]
	PINMODE3 = 0;
    9a0e:	60d3      	str	r3, [r2, #12]
	PINMODE4 = 0;
    9a10:	6113      	str	r3, [r2, #16]
	PINMODE7 = 0;
    9a12:	61d3      	str	r3, [r2, #28]
	PINMODE9 = 0;
    9a14:	6253      	str	r3, [r2, #36]	; 0x24
	FIO0PIN = 0;
    9a16:	4a07      	ldr	r2, [pc, #28]	; (9a34 <all_pins_off+0x50>)
    9a18:	6013      	str	r3, [r2, #0]
	FIO1PIN = 0;
    9a1a:	6213      	str	r3, [r2, #32]
	FIO2PIN = 0;
    9a1c:	6413      	str	r3, [r2, #64]	; 0x40
	FIO3PIN = 0;
    9a1e:	6613      	str	r3, [r2, #96]	; 0x60
	FIO4PIN = 0;
    9a20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
    9a24:	4770      	bx	lr
    9a26:	bf00      	nop
    9a28:	4002c000 	.word	0x4002c000
    9a2c:	2009c000 	.word	0x2009c000
    9a30:	4002c040 	.word	0x4002c040
    9a34:	2009c014 	.word	0x2009c014

00009a38 <gpio_init>:
{
    9a38:	b508      	push	{r3, lr}
	all_pins_off();
    9a3a:	f7ff ffd3 	bl	99e4 <all_pins_off>
	FIO0DIR = 0;
    9a3e:	2300      	movs	r3, #0
	FIO1DIR = (PIN_USRLED | PIN_RXLED | PIN_TXLED | PIN_CC3V3 |
    9a40:	f24c 7112 	movw	r1, #50962	; 0xc712
	FIO0DIR = 0;
    9a44:	4a08      	ldr	r2, [pc, #32]	; (9a68 <gpio_init+0x30>)
    9a46:	6013      	str	r3, [r2, #0]
	FIO1DIR = (PIN_USRLED | PIN_RXLED | PIN_TXLED | PIN_CC3V3 |
    9a48:	6211      	str	r1, [r2, #32]
	FIO2DIR = (PIN_CSN | PIN_SCLK | PIN_MOSI | PIN_PAEN | PIN_HGM);
    9a4a:	f240 11b1 	movw	r1, #433	; 0x1b1
    9a4e:	6411      	str	r1, [r2, #64]	; 0x40
	FIO4DIR = (PIN_TX | PIN_SSEL1);
    9a50:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
	FIO3DIR = 0;
    9a54:	6613      	str	r3, [r2, #96]	; 0x60
	FIO4DIR = (PIN_TX | PIN_SSEL1);
    9a56:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
	FIO0PIN = 0;
    9a5a:	6153      	str	r3, [r2, #20]
	FIO1PIN = 0;
    9a5c:	6353      	str	r3, [r2, #52]	; 0x34
	FIO2PIN = 0;
    9a5e:	6553      	str	r3, [r2, #84]	; 0x54
	FIO3PIN = 0;
    9a60:	6753      	str	r3, [r2, #116]	; 0x74
	FIO4PIN = 0;
    9a62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
    9a66:	bd08      	pop	{r3, pc}
    9a68:	2009c000 	.word	0x2009c000

00009a6c <dio_ssp_init>:
	PINSEL0 = (PINSEL0 & ~(3 << 14)) | (2 << 14);
    9a6c:	4b11      	ldr	r3, [pc, #68]	; (9ab4 <dio_ssp_init+0x48>)
    9a6e:	681a      	ldr	r2, [r3, #0]
    9a70:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
    9a74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    9a78:	601a      	str	r2, [r3, #0]
	PINSEL0 = (PINSEL0 & ~(3 << 12)) | (2 << 12);
    9a7a:	681a      	ldr	r2, [r3, #0]
    9a7c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    9a80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    9a84:	601a      	str	r2, [r3, #0]
	PINSEL0 = (PINSEL0 & ~(3 << 16)) | (2 << 16);
    9a86:	681a      	ldr	r2, [r3, #0]
    9a88:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    9a8c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    9a90:	601a      	str	r2, [r3, #0]
	PINSEL0 = (PINSEL0 & ~(3 << 18)) | (2 << 18);
    9a92:	681a      	ldr	r2, [r3, #0]
    9a94:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
    9a98:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    9a9c:	601a      	str	r2, [r3, #0]
	DIO_SSEL_SET;
    9a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    9aa2:	4b05      	ldr	r3, [pc, #20]	; (9ab8 <dio_ssp_init+0x4c>)
    9aa4:	601a      	str	r2, [r3, #0]
	DIO_SSP_CR0 = (0x7 /* 8 bit transfer */ | SSPCR0_CPOL | SSPCR0_CPHA);
    9aa6:	22c7      	movs	r2, #199	; 0xc7
    9aa8:	4b04      	ldr	r3, [pc, #16]	; (9abc <dio_ssp_init+0x50>)
    9aaa:	601a      	str	r2, [r3, #0]
	DIO_SSP_CR1 = (SSPCR1_MS | SSPCR1_SOD);
    9aac:	220c      	movs	r2, #12
    9aae:	605a      	str	r2, [r3, #4]
}
    9ab0:	4770      	bx	lr
    9ab2:	bf00      	nop
    9ab4:	4002c000 	.word	0x4002c000
    9ab8:	2009c098 	.word	0x2009c098
    9abc:	40030000 	.word	0x40030000

00009ac0 <atest_init>:
	PINSEL1 &= ~((0x3 << 20) | (0x3 << 18)); // set as GPIO
    9ac0:	4a09      	ldr	r2, [pc, #36]	; (9ae8 <atest_init+0x28>)
    9ac2:	6813      	ldr	r3, [r2, #0]
    9ac4:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
    9ac8:	6013      	str	r3, [r2, #0]
	FIO0DIR &= ~(0x3 << 25); // set as input
    9aca:	4a08      	ldr	r2, [pc, #32]	; (9aec <atest_init+0x2c>)
    9acc:	6813      	ldr	r3, [r2, #0]
    9ace:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
    9ad2:	6013      	str	r3, [r2, #0]
	PINMODE1 |= (0x5 << 19); // no pull-up/pull-down
    9ad4:	4b06      	ldr	r3, [pc, #24]	; (9af0 <atest_init+0x30>)
    9ad6:	681a      	ldr	r2, [r3, #0]
    9ad8:	f442 1220 	orr.w	r2, r2, #2621440	; 0x280000
    9adc:	601a      	str	r2, [r3, #0]
	PINMODE1 &= ~(0x5 << 18); // no pull-up/pull-down
    9ade:	681a      	ldr	r2, [r3, #0]
    9ae0:	f422 12a0 	bic.w	r2, r2, #1310720	; 0x140000
    9ae4:	601a      	str	r2, [r3, #0]
}
    9ae6:	4770      	bx	lr
    9ae8:	4002c004 	.word	0x4002c004
    9aec:	2009c000 	.word	0x2009c000
    9af0:	4002c044 	.word	0x4002c044

00009af4 <cc2400_spi>:
{
    9af4:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32 msb = 1 << (len - 1);
    9af6:	1e45      	subs	r5, r0, #1
{
    9af8:	4603      	mov	r3, r0
	CSN_CLR;
    9afa:	2020      	movs	r0, #32
	u32 msb = 1 << (len - 1);
    9afc:	2401      	movs	r4, #1
		SCLK_SET;
    9afe:	2710      	movs	r7, #16
	CSN_CLR;
    9b00:	4a0d      	ldr	r2, [pc, #52]	; (9b38 <cc2400_spi+0x44>)
		data |= !!MISO;
    9b02:	f8df c03c 	ldr.w	ip, [pc, #60]	; 9b40 <cc2400_spi+0x4c>
	CSN_CLR;
    9b06:	6010      	str	r0, [r2, #0]
	while (len--) {
    9b08:	4608      	mov	r0, r1
    9b0a:	490c      	ldr	r1, [pc, #48]	; (9b3c <cc2400_spi+0x48>)
	u32 msb = 1 << (len - 1);
    9b0c:	fa04 f505 	lsl.w	r5, r4, r5
	while (len--) {
    9b10:	3b01      	subs	r3, #1
    9b12:	b2db      	uxtb	r3, r3
    9b14:	2bff      	cmp	r3, #255	; 0xff
    9b16:	d102      	bne.n	9b1e <cc2400_spi+0x2a>
	CSN_SET;
    9b18:	2320      	movs	r3, #32
    9b1a:	600b      	str	r3, [r1, #0]
}
    9b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (data & msb)
    9b1e:	4228      	tst	r0, r5
			MOSI_SET;
    9b20:	bf14      	ite	ne
    9b22:	600c      	strne	r4, [r1, #0]
			MOSI_CLR;
    9b24:	6014      	streq	r4, [r2, #0]
		SCLK_SET;
    9b26:	600f      	str	r7, [r1, #0]
		data |= !!MISO;
    9b28:	f8dc 6000 	ldr.w	r6, [ip]
		SCLK_CLR;
    9b2c:	6017      	str	r7, [r2, #0]
		data |= !!MISO;
    9b2e:	f3c6 0640 	ubfx	r6, r6, #1, #1
    9b32:	ea46 0040 	orr.w	r0, r6, r0, lsl #1
		SCLK_CLR;
    9b36:	e7eb      	b.n	9b10 <cc2400_spi+0x1c>
    9b38:	2009c05c 	.word	0x2009c05c
    9b3c:	2009c058 	.word	0x2009c058
    9b40:	2009c054 	.word	0x2009c054

00009b44 <cc2400_init>:
{
    9b44:	b508      	push	{r3, lr}
	atest_init();
    9b46:	f7ff ffbb 	bl	9ac0 <atest_init>
	CC1V8_SET;
    9b4a:	f44f 7300 	mov.w	r3, #512	; 0x200
    9b4e:	4908      	ldr	r1, [pc, #32]	; (9b70 <cc2400_init+0x2c>)
	wait_us(50);
    9b50:	2032      	movs	r0, #50	; 0x32
	CC1V8_SET;
    9b52:	600b      	str	r3, [r1, #0]
	wait_us(50);
    9b54:	f7ff ff2a 	bl	99ac <wait_us>
	CSN_SET;
    9b58:	2220      	movs	r2, #32
    9b5a:	4b06      	ldr	r3, [pc, #24]	; (9b74 <cc2400_init+0x30>)
	cc2400_spi(24, out);
    9b5c:	2018      	movs	r0, #24
	CSN_SET;
    9b5e:	601a      	str	r2, [r3, #0]
	CC3V3_SET;
    9b60:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    9b64:	600b      	str	r3, [r1, #0]
	cc2400_spi(24, out);
    9b66:	4904      	ldr	r1, [pc, #16]	; (9b78 <cc2400_init+0x34>)
}
    9b68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	cc2400_spi(24, out);
    9b6c:	f7ff bfc2 	b.w	9af4 <cc2400_spi>
    9b70:	2009c038 	.word	0x2009c038
    9b74:	2009c058 	.word	0x2009c058
    9b78:	000d7fff 	.word	0x000d7fff

00009b7c <cc2400_get>:
{
    9b7c:	b508      	push	{r3, lr}
	u32 out = (reg | 0x80) << 16;
    9b7e:	f040 0180 	orr.w	r1, r0, #128	; 0x80
	in = cc2400_spi(24, out);
    9b82:	0409      	lsls	r1, r1, #16
    9b84:	2018      	movs	r0, #24
    9b86:	f7ff ffb5 	bl	9af4 <cc2400_spi>
}
    9b8a:	b280      	uxth	r0, r0
    9b8c:	bd08      	pop	{r3, pc}

00009b8e <cc2400_set>:
	cc2400_spi(24, out);
    9b8e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    9b92:	2018      	movs	r0, #24
    9b94:	f7ff bfae 	b.w	9af4 <cc2400_spi>

00009b98 <cc2400_get8>:
{
    9b98:	b508      	push	{r3, lr}
	u16 out = (reg | 0x80) << 8;
    9b9a:	f040 0180 	orr.w	r1, r0, #128	; 0x80
	in = cc2400_spi(16, out);
    9b9e:	0209      	lsls	r1, r1, #8
    9ba0:	2010      	movs	r0, #16
    9ba2:	f7ff ffa7 	bl	9af4 <cc2400_spi>
}
    9ba6:	b2c0      	uxtb	r0, r0
    9ba8:	bd08      	pop	{r3, pc}

00009baa <cc2400_set8>:
	cc2400_spi(16, out);
    9baa:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
    9bae:	2010      	movs	r0, #16
    9bb0:	f7ff bfa0 	b.w	9af4 <cc2400_spi>

00009bb4 <cc2400_fifo_write>:


/* write multiple bytes to SPI */
void cc2400_fifo_write(u8 len, u8 *data) {
    9bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u8 msb = 1 << 7;
	u8 reg = FIFOREG;
	u8 i, j, temp;

	/* start transaction by dropping CSN */
	CSN_CLR;
    9bb6:	2220      	movs	r2, #32
    9bb8:	4b1c      	ldr	r3, [pc, #112]	; (9c2c <cc2400_fifo_write+0x78>)
	u8 reg = FIFOREG;
    9bba:	2570      	movs	r5, #112	; 0x70
	CSN_CLR;
    9bbc:	601a      	str	r2, [r3, #0]

	for (i = 0; i < 8; ++i) {
    9bbe:	2701      	movs	r7, #1
	CSN_CLR;
    9bc0:	2208      	movs	r2, #8
		if (reg & msb)
			MOSI_SET;
		else
			MOSI_CLR;
		reg <<= 1;
		SCLK_SET;
    9bc2:	2610      	movs	r6, #16
    9bc4:	4c1a      	ldr	r4, [pc, #104]	; (9c30 <cc2400_fifo_write+0x7c>)
		if (reg & msb)
    9bc6:	f015 0f80 	tst.w	r5, #128	; 0x80
			MOSI_SET;
    9bca:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
    9bce:	bf14      	ite	ne
    9bd0:	6027      	strne	r7, [r4, #0]
			MOSI_CLR;
    9bd2:	601f      	streq	r7, [r3, #0]
		reg <<= 1;
    9bd4:	006d      	lsls	r5, r5, #1
	for (i = 0; i < 8; ++i) {
    9bd6:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		SCLK_SET;
    9bda:	6026      	str	r6, [r4, #0]
		reg <<= 1;
    9bdc:	b2ed      	uxtb	r5, r5
		SCLK_CLR;
    9bde:	601e      	str	r6, [r3, #0]
	for (i = 0; i < 8; ++i) {
    9be0:	d1f1      	bne.n	9bc6 <cc2400_fifo_write+0x12>
    9be2:	2601      	movs	r6, #1
			if (temp & msb)
				MOSI_SET;
			else
				MOSI_CLR;
			temp <<= 1;
			SCLK_SET;
    9be4:	2710      	movs	r7, #16
    9be6:	4408      	add	r0, r1
	for (i = 0; i < len; ++i) {
    9be8:	4288      	cmp	r0, r1
    9bea:	d10c      	bne.n	9c06 <cc2400_fifo_write+0x52>
    9bec:	2208      	movs	r2, #8
		}
	}

	// this is necessary to clock in the last byte
	for (i = 0; i < 8; ++i) {
		SCLK_SET;
    9bee:	2110      	movs	r1, #16
    9bf0:	3a01      	subs	r2, #1
	for (i = 0; i < 8; ++i) {
    9bf2:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		SCLK_SET;
    9bf6:	6021      	str	r1, [r4, #0]
		SCLK_CLR;
    9bf8:	6019      	str	r1, [r3, #0]
	for (i = 0; i < 8; ++i) {
    9bfa:	d1f9      	bne.n	9bf0 <cc2400_fifo_write+0x3c>
	}
	
	spi_delay();
    9bfc:	f7ff fec6 	bl	998c <spi_delay>
	/* end transaction by raising CSN */
	CSN_SET;
    9c00:	2320      	movs	r3, #32
    9c02:	6023      	str	r3, [r4, #0]
}
    9c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		temp = data[i];
    9c06:	2208      	movs	r2, #8
    9c08:	f811 5b01 	ldrb.w	r5, [r1], #1
			if (temp & msb)
    9c0c:	f015 0f80 	tst.w	r5, #128	; 0x80
				MOSI_SET;
    9c10:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
    9c14:	bf14      	ite	ne
    9c16:	6026      	strne	r6, [r4, #0]
				MOSI_CLR;
    9c18:	601e      	streq	r6, [r3, #0]
			temp <<= 1;
    9c1a:	006d      	lsls	r5, r5, #1
		for (j = 0; j < 8; ++j) {
    9c1c:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
			SCLK_SET;
    9c20:	6027      	str	r7, [r4, #0]
			temp <<= 1;
    9c22:	b2ed      	uxtb	r5, r5
			SCLK_CLR;
    9c24:	601f      	str	r7, [r3, #0]
		for (j = 0; j < 8; ++j) {
    9c26:	d1f1      	bne.n	9c0c <cc2400_fifo_write+0x58>
    9c28:	e7de      	b.n	9be8 <cc2400_fifo_write+0x34>
    9c2a:	bf00      	nop
    9c2c:	2009c05c 	.word	0x2009c05c
    9c30:	2009c058 	.word	0x2009c058

00009c34 <cc2400_fifo_read>:

/* read multiple bytes from SPI */
void cc2400_fifo_read(u8 len, u8 *buf) {
    9c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	u8 i, j, temp, reg;
	// Set first bit because it's a read
	reg = 0x80 | FIFOREG;

	/* start transaction by dropping CSN */
	CSN_CLR;
    9c38:	2320      	movs	r3, #32
    9c3a:	4d1e      	ldr	r5, [pc, #120]	; (9cb4 <cc2400_fifo_read+0x80>)
	reg = 0x80 | FIFOREG;
    9c3c:	22f0      	movs	r2, #240	; 0xf0
	CSN_CLR;
    9c3e:	602b      	str	r3, [r5, #0]

	for (i = 0; i < 8; ++i) {
    9c40:	2601      	movs	r6, #1
	CSN_CLR;
    9c42:	2308      	movs	r3, #8
		if (reg & msb)
			MOSI_SET;
		else
			MOSI_CLR;
		reg <<= 1;
		SCLK_SET;
    9c44:	2410      	movs	r4, #16
    9c46:	4f1c      	ldr	r7, [pc, #112]	; (9cb8 <cc2400_fifo_read+0x84>)
		if (reg & msb)
    9c48:	f012 0f80 	tst.w	r2, #128	; 0x80
			MOSI_SET;
    9c4c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    9c50:	bf14      	ite	ne
    9c52:	603e      	strne	r6, [r7, #0]
			MOSI_CLR;
    9c54:	602e      	streq	r6, [r5, #0]
		reg <<= 1;
    9c56:	0052      	lsls	r2, r2, #1
	for (i = 0; i < 8; ++i) {
    9c58:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		SCLK_SET;
    9c5c:	603c      	str	r4, [r7, #0]
		reg <<= 1;
    9c5e:	b2d2      	uxtb	r2, r2
		SCLK_CLR;
    9c60:	602c      	str	r4, [r5, #0]
	for (i = 0; i < 8; ++i) {
    9c62:	d1f1      	bne.n	9c48 <cc2400_fifo_read+0x14>

	for (i = 0; i < len; ++i) {
		temp = 0;
		for (j = 0; j < 8; ++j) {
			spi_delay();
			SCLK_SET;
    9c64:	f04f 0810 	mov.w	r8, #16
			temp <<= 1;
			if (MISO)
    9c68:	f8df 9050 	ldr.w	r9, [pc, #80]	; 9cbc <cc2400_fifo_read+0x88>
    9c6c:	4408      	add	r0, r1
	for (i = 0; i < len; ++i) {
    9c6e:	4281      	cmp	r1, r0
    9c70:	d105      	bne.n	9c7e <cc2400_fifo_read+0x4a>
		}
		buf[i] = temp;
	}

	/* end transaction by raising CSN */
	spi_delay();
    9c72:	f7ff fe8b 	bl	998c <spi_delay>
	CSN_SET;
    9c76:	2320      	movs	r3, #32
    9c78:	603b      	str	r3, [r7, #0]
}
    9c7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		temp = 0;
    9c7e:	2400      	movs	r4, #0
    9c80:	2608      	movs	r6, #8
			spi_delay();
    9c82:	f7ff fe83 	bl	998c <spi_delay>
			SCLK_SET;
    9c86:	f8c7 8000 	str.w	r8, [r7]
			if (MISO)
    9c8a:	f8d9 3000 	ldr.w	r3, [r9]
			temp <<= 1;
    9c8e:	0064      	lsls	r4, r4, #1
			if (MISO)
    9c90:	079b      	lsls	r3, r3, #30
			temp <<= 1;
    9c92:	b2e4      	uxtb	r4, r4
				temp |= 1;
    9c94:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
    9c98:	bf48      	it	mi
    9c9a:	f044 0401 	orrmi.w	r4, r4, #1
			spi_delay();
    9c9e:	f7ff fe75 	bl	998c <spi_delay>
		for (j = 0; j < 8; ++j) {
    9ca2:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
			SCLK_CLR;
    9ca6:	f8c5 8000 	str.w	r8, [r5]
		for (j = 0; j < 8; ++j) {
    9caa:	d1ea      	bne.n	9c82 <cc2400_fifo_read+0x4e>
		buf[i] = temp;
    9cac:	f801 4b01 	strb.w	r4, [r1], #1
	for (i = 0; i < len; ++i) {
    9cb0:	e7dd      	b.n	9c6e <cc2400_fifo_read+0x3a>
    9cb2:	bf00      	nop
    9cb4:	2009c05c 	.word	0x2009c05c
    9cb8:	2009c058 	.word	0x2009c058
    9cbc:	2009c054 	.word	0x2009c054

00009cc0 <cc2400_status>:

/* get the status */
u8 cc2400_status()
{
    9cc0:	b508      	push	{r3, lr}
	return cc2400_spi(8, 0);
    9cc2:	2100      	movs	r1, #0
    9cc4:	2008      	movs	r0, #8
    9cc6:	f7ff ff15 	bl	9af4 <cc2400_spi>
}
    9cca:	b2c0      	uxtb	r0, r0
    9ccc:	bd08      	pop	{r3, pc}

00009cce <cc2400_strobe>:

/* strobe register, return status */
u8 cc2400_strobe(u8 reg)
{
    9cce:	b508      	push	{r3, lr}
    9cd0:	4601      	mov	r1, r0
	return cc2400_spi(8, reg);
    9cd2:	2008      	movs	r0, #8
    9cd4:	f7ff ff0e 	bl	9af4 <cc2400_spi>
}
    9cd8:	b2c0      	uxtb	r0, r0
    9cda:	bd08      	pop	{r3, pc}

00009cdc <cc2400_reset>:
/*
 * Warning: This should only be called when running on the internal oscillator.
 * Otherwise use clock_start().
 */
void cc2400_reset()
{
    9cdc:	b508      	push	{r3, lr}
	cc2400_spi(24, out);
    9cde:	2100      	movs	r1, #0
    9ce0:	2018      	movs	r0, #24
    9ce2:	f7ff ff07 	bl	9af4 <cc2400_spi>
	cc2400_set(MAIN, 0x0000);
	while (cc2400_get(MAIN) != 0x0000);
    9ce6:	2000      	movs	r0, #0
    9ce8:	f7ff ff48 	bl	9b7c <cc2400_get>
    9cec:	2800      	cmp	r0, #0
    9cee:	d1fa      	bne.n	9ce6 <cc2400_reset+0xa>
	cc2400_spi(24, out);
    9cf0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    9cf4:	2018      	movs	r0, #24
    9cf6:	f7ff fefd 	bl	9af4 <cc2400_spi>
	cc2400_set(MAIN, 0x8000);
	while (cc2400_get(MAIN) != 0x8000);
    9cfa:	2000      	movs	r0, #0
    9cfc:	f7ff ff3e 	bl	9b7c <cc2400_get>
    9d00:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    9d04:	d1f9      	bne.n	9cfa <cc2400_reset+0x1e>
}
    9d06:	bd08      	pop	{r3, pc}

00009d08 <clock_start>:

/* activate the CC2400's 16 MHz oscillator and sync LPC175x to it */
void clock_start()
{
    9d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* configure flash accelerator for higher clock rate */
	FLASHCFG = (0x03A | (FLASHTIM << 12));
    9d0c:	f244 023a 	movw	r2, #16442	; 0x403a
    9d10:	4b40      	ldr	r3, [pc, #256]	; (9e14 <clock_start+0x10c>)

	/* switch to the internal oscillator if necessary */
	CLKSRCSEL = 0;
    9d12:	4e41      	ldr	r6, [pc, #260]	; (9e18 <clock_start+0x110>)
	FLASHCFG = (0x03A | (FLASHTIM << 12));
    9d14:	601a      	str	r2, [r3, #0]
	CLKSRCSEL = 0;
    9d16:	2300      	movs	r3, #0

	/* disconnect PLL0 */
	PLL0CON &= ~PLL0CON_PLLC0;
    9d18:	4d40      	ldr	r5, [pc, #256]	; (9e1c <clock_start+0x114>)
	CLKSRCSEL = 0;
    9d1a:	6033      	str	r3, [r6, #0]
	PLL0CON &= ~PLL0CON_PLLC0;
    9d1c:	682b      	ldr	r3, [r5, #0]
	PLL0FEED_SEQUENCE;
    9d1e:	4c40      	ldr	r4, [pc, #256]	; (9e20 <clock_start+0x118>)
	PLL0CON &= ~PLL0CON_PLLC0;
    9d20:	f023 0302 	bic.w	r3, r3, #2
    9d24:	602b      	str	r3, [r5, #0]
	PLL0FEED_SEQUENCE;
    9d26:	23aa      	movs	r3, #170	; 0xaa
    9d28:	6023      	str	r3, [r4, #0]
    9d2a:	2355      	movs	r3, #85	; 0x55
    9d2c:	6023      	str	r3, [r4, #0]
	while (PLL0STAT & PLL0STAT_PLLC0_STAT);
    9d2e:	4b3d      	ldr	r3, [pc, #244]	; (9e24 <clock_start+0x11c>)
    9d30:	461f      	mov	r7, r3
    9d32:	681a      	ldr	r2, [r3, #0]
    9d34:	0190      	lsls	r0, r2, #6
    9d36:	d4fc      	bmi.n	9d32 <clock_start+0x2a>

	/* turn off PLL0 */
	PLL0CON &= ~PLL0CON_PLLE0;
    9d38:	682b      	ldr	r3, [r5, #0]
    9d3a:	f023 0301 	bic.w	r3, r3, #1
    9d3e:	602b      	str	r3, [r5, #0]
	PLL0FEED_SEQUENCE;
    9d40:	23aa      	movs	r3, #170	; 0xaa
    9d42:	6023      	str	r3, [r4, #0]
    9d44:	2355      	movs	r3, #85	; 0x55
    9d46:	6023      	str	r3, [r4, #0]
	while (PLL0STAT & PLL0STAT_PLLE0_STAT);
    9d48:	683b      	ldr	r3, [r7, #0]
    9d4a:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
    9d4e:	d1fb      	bne.n	9d48 <clock_start+0x40>

	/* temporarily set CPU clock divider to 1 */
	CCLKCFG = 0;
    9d50:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 9e48 <clock_start+0x140>
    9d54:	f8c8 3000 	str.w	r3, [r8]

	/* configure CC2400 oscillator, output carrier sense on GIO6 */
	cc2400_reset();
    9d58:	f7ff ffc0 	bl	9cdc <cc2400_reset>
	cc2400_spi(24, out);
    9d5c:	2018      	movs	r0, #24
    9d5e:	4932      	ldr	r1, [pc, #200]	; (9e28 <clock_start+0x120>)
    9d60:	f7ff fec8 	bl	9af4 <cc2400_spi>
	cc2400_set(IOCFG, (GIO_CARRIER_SENSE_N << 9) | (GIO_CLK_16M << 3));
	cc2400_strobe(SXOSCON);
    9d64:	2060      	movs	r0, #96	; 0x60
    9d66:	f7ff ffb2 	bl	9cce <cc2400_strobe>
	while (!(cc2400_status() & XOSC16M_STABLE));
    9d6a:	f7ff ffa9 	bl	9cc0 <cc2400_status>
    9d6e:	0641      	lsls	r1, r0, #25
    9d70:	d5fb      	bpl.n	9d6a <clock_start+0x62>

	/* activate main oscillator */
	SCS = SCS_OSCEN;
    9d72:	2220      	movs	r2, #32
    9d74:	4b2d      	ldr	r3, [pc, #180]	; (9e2c <clock_start+0x124>)
    9d76:	601a      	str	r2, [r3, #0]
	while (!(SCS & SCS_OSCSTAT));
    9d78:	681a      	ldr	r2, [r3, #0]
    9d7a:	0652      	lsls	r2, r2, #25
    9d7c:	d5fc      	bpl.n	9d78 <clock_start+0x70>
#ifdef TC13BADGE
	PCLKSEL0  = (1 << 2); /* TIMER0 at cclk (30 MHz) */
	PCLKSEL1  = 0;
#else
        // XXX here
	PCLKSEL0  = (2 << 2) | (2 << 4); /* TIMER0 and TIMER1 at cclk/2 (50 MHz) */
    9d7e:	2228      	movs	r2, #40	; 0x28
    9d80:	4b2b      	ldr	r3, [pc, #172]	; (9e30 <clock_start+0x128>)
	/* switch to main oscillator */
	CLKSRCSEL = 1;

	/* configure PLL0 */
	PLL0CFG = (MSEL0 << 0) | (NSEL0 << 16);
	PLL0FEED_SEQUENCE;
    9d82:	21aa      	movs	r1, #170	; 0xaa
	PCLKSEL0  = (2 << 2) | (2 << 4); /* TIMER0 and TIMER1 at cclk/2 (50 MHz) */
    9d84:	601a      	str	r2, [r3, #0]
	PCLKSEL1  = (2 << 12); /* TIMER2 at cclk/2 (50 MHz) */
    9d86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    9d8a:	605a      	str	r2, [r3, #4]
	CLKSRCSEL = 1;
    9d8c:	2301      	movs	r3, #1
	PLL0CFG = (MSEL0 << 0) | (NSEL0 << 16);
    9d8e:	4a29      	ldr	r2, [pc, #164]	; (9e34 <clock_start+0x12c>)
	CLKSRCSEL = 1;
    9d90:	6033      	str	r3, [r6, #0]
	PLL0CFG = (MSEL0 << 0) | (NSEL0 << 16);
    9d92:	4b29      	ldr	r3, [pc, #164]	; (9e38 <clock_start+0x130>)
    9d94:	601a      	str	r2, [r3, #0]
	PLL0FEED_SEQUENCE;
    9d96:	2255      	movs	r2, #85	; 0x55
    9d98:	6021      	str	r1, [r4, #0]
    9d9a:	6022      	str	r2, [r4, #0]

	/* turn on PLL0 */
	PLL0CON |= PLL0CON_PLLE0;
    9d9c:	682b      	ldr	r3, [r5, #0]
    9d9e:	f043 0301 	orr.w	r3, r3, #1
    9da2:	602b      	str	r3, [r5, #0]
	PLL0FEED_SEQUENCE;
    9da4:	6021      	str	r1, [r4, #0]
    9da6:	6022      	str	r2, [r4, #0]
	while (!(PLL0STAT & PLL0STAT_PLLE0_STAT));
    9da8:	683b      	ldr	r3, [r7, #0]
    9daa:	01de      	lsls	r6, r3, #7
    9dac:	d5fc      	bpl.n	9da8 <clock_start+0xa0>

	/* set CPU clock divider */
	CCLKCFG = CCLKSEL;
    9dae:	2303      	movs	r3, #3
    9db0:	f8c8 3000 	str.w	r3, [r8]

	/* connect PLL0 */
	PLL0CON |= PLL0CON_PLLC0;
    9db4:	682b      	ldr	r3, [r5, #0]
    9db6:	f043 0302 	orr.w	r3, r3, #2
    9dba:	602b      	str	r3, [r5, #0]
	PLL0FEED_SEQUENCE;
    9dbc:	23aa      	movs	r3, #170	; 0xaa
    9dbe:	6023      	str	r3, [r4, #0]
    9dc0:	2355      	movs	r3, #85	; 0x55
    9dc2:	6023      	str	r3, [r4, #0]
	while (!(PLL0STAT & PLL0STAT_PLLC0_STAT));
    9dc4:	683b      	ldr	r3, [r7, #0]
    9dc6:	019d      	lsls	r5, r3, #6
    9dc8:	d5fc      	bpl.n	9dc4 <clock_start+0xbc>

	/* configure PLL1 */
	PLL1CFG = (MSEL1 << 0) | (PSEL1 << 5);
    9dca:	2222      	movs	r2, #34	; 0x22
	PLL1FEED_SEQUENCE;
    9dcc:	2055      	movs	r0, #85	; 0x55
    9dce:	24aa      	movs	r4, #170	; 0xaa
	PLL1CFG = (MSEL1 << 0) | (PSEL1 << 5);
    9dd0:	4b1a      	ldr	r3, [pc, #104]	; (9e3c <clock_start+0x134>)
    9dd2:	601a      	str	r2, [r3, #0]

	/* turn on PLL1 */
	PLL1CON |= PLL1CON_PLLE1;
    9dd4:	4a1a      	ldr	r2, [pc, #104]	; (9e40 <clock_start+0x138>)
	PLL1FEED_SEQUENCE;
    9dd6:	609c      	str	r4, [r3, #8]
    9dd8:	6098      	str	r0, [r3, #8]
	PLL1CON |= PLL1CON_PLLE1;
    9dda:	6811      	ldr	r1, [r2, #0]
	PLL1FEED_SEQUENCE;
    9ddc:	3308      	adds	r3, #8
	PLL1CON |= PLL1CON_PLLE1;
    9dde:	f041 0101 	orr.w	r1, r1, #1
    9de2:	6011      	str	r1, [r2, #0]
	PLL1FEED_SEQUENCE;
	while (!(PLL1STAT & PLL1STAT_PLLE1_STAT));
    9de4:	4917      	ldr	r1, [pc, #92]	; (9e44 <clock_start+0x13c>)
	PLL1FEED_SEQUENCE;
    9de6:	601c      	str	r4, [r3, #0]
    9de8:	6018      	str	r0, [r3, #0]
	while (!(PLL1STAT & PLL1STAT_PLLE1_STAT));
    9dea:	4608      	mov	r0, r1
    9dec:	680c      	ldr	r4, [r1, #0]
    9dee:	05e4      	lsls	r4, r4, #23
    9df0:	d5fc      	bpl.n	9dec <clock_start+0xe4>
	while (!(PLL1STAT & PLL1STAT_PLOCK1));
    9df2:	6801      	ldr	r1, [r0, #0]
    9df4:	0549      	lsls	r1, r1, #21
    9df6:	d5fc      	bpl.n	9df2 <clock_start+0xea>

	/* connect PLL1 */
	PLL1CON |= PLL1CON_PLLC1;
    9df8:	6811      	ldr	r1, [r2, #0]
    9dfa:	f041 0102 	orr.w	r1, r1, #2
    9dfe:	6011      	str	r1, [r2, #0]
	PLL1FEED_SEQUENCE;
    9e00:	22aa      	movs	r2, #170	; 0xaa
    9e02:	601a      	str	r2, [r3, #0]
    9e04:	2255      	movs	r2, #85	; 0x55
    9e06:	601a      	str	r2, [r3, #0]
	while (!(PLL1STAT & PLL1STAT_PLLC1_STAT));
    9e08:	6803      	ldr	r3, [r0, #0]
    9e0a:	059b      	lsls	r3, r3, #22
    9e0c:	d5fc      	bpl.n	9e08 <clock_start+0x100>
}
    9e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9e12:	bf00      	nop
    9e14:	400fc000 	.word	0x400fc000
    9e18:	400fc10c 	.word	0x400fc10c
    9e1c:	400fc080 	.word	0x400fc080
    9e20:	400fc08c 	.word	0x400fc08c
    9e24:	400fc088 	.word	0x400fc088
    9e28:	00081570 	.word	0x00081570
    9e2c:	400fc1a0 	.word	0x400fc1a0
    9e30:	400fc1a8 	.word	0x400fc1a8
    9e34:	00010018 	.word	0x00010018
    9e38:	400fc084 	.word	0x400fc084
    9e3c:	400fc0a4 	.word	0x400fc0a4
    9e40:	400fc0a0 	.word	0x400fc0a0
    9e44:	400fc0a8 	.word	0x400fc0a8
    9e48:	400fc104 	.word	0x400fc104

00009e4c <ubertooth_init>:
{
    9e4c:	b508      	push	{r3, lr}
	gpio_init();
    9e4e:	f7ff fdf3 	bl	9a38 <gpio_init>
	cc2400_init();
    9e52:	f7ff fe77 	bl	9b44 <cc2400_init>
}
    9e56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	clock_start();
    9e5a:	f7ff bf55 	b.w	9d08 <clock_start>
    9e5e:	0000      	movs	r0, r0

00009e60 <reset>:

/* reset the LPC17xx, the cc2400 will be handled by the boot code */
void reset()
{
    9e60:	b508      	push	{r3, lr}
	all_pins_off();
    9e62:	f7ff fdbf 	bl	99e4 <all_pins_off>

	/* Enable the watchdog with reset enabled */
	USRLED_CLR;
    9e66:	2202      	movs	r2, #2
    9e68:	4b08      	ldr	r3, [pc, #32]	; (9e8c <reset+0x2c>)
	wait_us(seconds * 1000000);
    9e6a:	4809      	ldr	r0, [pc, #36]	; (9e90 <reset+0x30>)
	USRLED_CLR;
    9e6c:	601a      	str	r2, [r3, #0]
	WDMOD |= WDMOD_WDEN | WDMOD_WDRESET;
    9e6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    9e72:	6813      	ldr	r3, [r2, #0]
    9e74:	f043 0303 	orr.w	r3, r3, #3
    9e78:	6013      	str	r3, [r2, #0]
	WDFEED_SEQUENCE;
    9e7a:	22aa      	movs	r2, #170	; 0xaa
    9e7c:	4b05      	ldr	r3, [pc, #20]	; (9e94 <reset+0x34>)
    9e7e:	601a      	str	r2, [r3, #0]
    9e80:	2255      	movs	r2, #85	; 0x55
    9e82:	601a      	str	r2, [r3, #0]
	
	/* Set watchdog timeout to 256us (minimum) */
	
	/* sleep for 1s (minimum) */
	wait(1);
}
    9e84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	wait_us(seconds * 1000000);
    9e88:	f7ff bd90 	b.w	99ac <wait_us>
    9e8c:	2009c03c 	.word	0x2009c03c
    9e90:	000f4240 	.word	0x000f4240
    9e94:	40000008 	.word	0x40000008

00009e98 <get_part_num>:
	while (!(cc2400_status() & FS_LOCK));
	cc2400_strobe(SRX);
}

void get_part_num(uint8_t *buffer, int *len)
{
    9e98:	b530      	push	{r4, r5, lr}
    9e9a:	b08b      	sub	sp, #44	; 0x2c
	u32 command[5];
	u32 result[5];
	command[0] = 54; /* read part number */
    9e9c:	2336      	movs	r3, #54	; 0x36
{
    9e9e:	4604      	mov	r4, r0
    9ea0:	460d      	mov	r5, r1
	command[0] = 54; /* read part number */
    9ea2:	9300      	str	r3, [sp, #0]
	iap_entry(command, result);
    9ea4:	4668      	mov	r0, sp
    9ea6:	4b08      	ldr	r3, [pc, #32]	; (9ec8 <get_part_num+0x30>)
    9ea8:	a905      	add	r1, sp, #20
    9eaa:	4798      	blx	r3
	buffer[0] = result[0] & 0xFF; /* status */
    9eac:	9b05      	ldr	r3, [sp, #20]
    9eae:	7023      	strb	r3, [r4, #0]
	buffer[1] = result[1] & 0xFF;
    9eb0:	9b06      	ldr	r3, [sp, #24]
	buffer[2] = (result[1] >> 8) & 0xFF;
    9eb2:	0a1a      	lsrs	r2, r3, #8
	buffer[1] = result[1] & 0xFF;
    9eb4:	7063      	strb	r3, [r4, #1]
	buffer[2] = (result[1] >> 8) & 0xFF;
    9eb6:	70a2      	strb	r2, [r4, #2]
	buffer[3] = (result[1] >> 16) & 0xFF;
    9eb8:	0c1a      	lsrs	r2, r3, #16
	buffer[4] = (result[1] >> 24) & 0xFF;
    9eba:	0e1b      	lsrs	r3, r3, #24
    9ebc:	7123      	strb	r3, [r4, #4]
	*len = 5;
    9ebe:	2305      	movs	r3, #5
	buffer[3] = (result[1] >> 16) & 0xFF;
    9ec0:	70e2      	strb	r2, [r4, #3]
	*len = 5;
    9ec2:	602b      	str	r3, [r5, #0]
	
}
    9ec4:	b00b      	add	sp, #44	; 0x2c
    9ec6:	bd30      	pop	{r4, r5, pc}
    9ec8:	1fff1ff1 	.word	0x1fff1ff1

00009ecc <get_device_serial>:

void get_device_serial(uint8_t *buffer, int *len)
{
    9ecc:	b530      	push	{r4, r5, lr}
    9ece:	b08b      	sub	sp, #44	; 0x2c
	u32 command[5];
	u32 result[5];
	command[0] = 58; /* read device serial number */
    9ed0:	233a      	movs	r3, #58	; 0x3a
{
    9ed2:	4604      	mov	r4, r0
    9ed4:	460d      	mov	r5, r1
	command[0] = 58; /* read device serial number */
    9ed6:	9300      	str	r3, [sp, #0]
	iap_entry(command, result);
    9ed8:	4668      	mov	r0, sp
    9eda:	4b14      	ldr	r3, [pc, #80]	; (9f2c <get_device_serial+0x60>)
    9edc:	a905      	add	r1, sp, #20
    9ede:	4798      	blx	r3
	buffer[0] = result[0] & 0xFF; /* status */
    9ee0:	9b05      	ldr	r3, [sp, #20]
    9ee2:	7023      	strb	r3, [r4, #0]
	buffer[1] = result[1] & 0xFF;
    9ee4:	9b06      	ldr	r3, [sp, #24]
	buffer[2] = (result[1] >> 8) & 0xFF;
    9ee6:	0a1a      	lsrs	r2, r3, #8
	buffer[1] = result[1] & 0xFF;
    9ee8:	7063      	strb	r3, [r4, #1]
	buffer[2] = (result[1] >> 8) & 0xFF;
    9eea:	70a2      	strb	r2, [r4, #2]
	buffer[3] = (result[1] >> 16) & 0xFF;
    9eec:	0c1a      	lsrs	r2, r3, #16
	buffer[4] = (result[1] >> 24) & 0xFF;
    9eee:	0e1b      	lsrs	r3, r3, #24
    9ef0:	7123      	strb	r3, [r4, #4]
	buffer[5] = result[2] & 0xFF;
    9ef2:	9b07      	ldr	r3, [sp, #28]
	buffer[3] = (result[1] >> 16) & 0xFF;
    9ef4:	70e2      	strb	r2, [r4, #3]
	buffer[6] = (result[2] >> 8) & 0xFF;
    9ef6:	0a1a      	lsrs	r2, r3, #8
	buffer[5] = result[2] & 0xFF;
    9ef8:	7163      	strb	r3, [r4, #5]
	buffer[6] = (result[2] >> 8) & 0xFF;
    9efa:	71a2      	strb	r2, [r4, #6]
	buffer[7] = (result[2] >> 16) & 0xFF;
    9efc:	0c1a      	lsrs	r2, r3, #16
	buffer[8] = (result[2] >> 24) & 0xFF;
    9efe:	0e1b      	lsrs	r3, r3, #24
    9f00:	7223      	strb	r3, [r4, #8]
	buffer[9] = result[3] & 0xFF;
    9f02:	9b08      	ldr	r3, [sp, #32]
	buffer[7] = (result[2] >> 16) & 0xFF;
    9f04:	71e2      	strb	r2, [r4, #7]
	buffer[10] = (result[3] >> 8) & 0xFF;
    9f06:	0a1a      	lsrs	r2, r3, #8
	buffer[9] = result[3] & 0xFF;
    9f08:	7263      	strb	r3, [r4, #9]
	buffer[10] = (result[3] >> 8) & 0xFF;
    9f0a:	72a2      	strb	r2, [r4, #10]
	buffer[11] = (result[3] >> 16) & 0xFF;
    9f0c:	0c1a      	lsrs	r2, r3, #16
	buffer[12] = (result[3] >> 24) & 0xFF;
    9f0e:	0e1b      	lsrs	r3, r3, #24
    9f10:	7323      	strb	r3, [r4, #12]
	buffer[13] = result[4] & 0xFF;
    9f12:	9b09      	ldr	r3, [sp, #36]	; 0x24
	buffer[11] = (result[3] >> 16) & 0xFF;
    9f14:	72e2      	strb	r2, [r4, #11]
	buffer[14] = (result[4] >> 8) & 0xFF;
    9f16:	0a1a      	lsrs	r2, r3, #8
	buffer[13] = result[4] & 0xFF;
    9f18:	7363      	strb	r3, [r4, #13]
	buffer[14] = (result[4] >> 8) & 0xFF;
    9f1a:	73a2      	strb	r2, [r4, #14]
	buffer[15] = (result[4] >> 16) & 0xFF;
    9f1c:	0c1a      	lsrs	r2, r3, #16
	buffer[16] = (result[4] >> 24) & 0xFF;
    9f1e:	0e1b      	lsrs	r3, r3, #24
    9f20:	7423      	strb	r3, [r4, #16]
	*len = 17;
    9f22:	2311      	movs	r3, #17
	buffer[15] = (result[4] >> 16) & 0xFF;
    9f24:	73e2      	strb	r2, [r4, #15]
	*len = 17;
    9f26:	602b      	str	r3, [r5, #0]
}
    9f28:	b00b      	add	sp, #44	; 0x2c
    9f2a:	bd30      	pop	{r4, r5, pc}
    9f2c:	1fff1ff1 	.word	0x1fff1ff1

00009f30 <set_isp>:

void set_isp(void)
{
    9f30:	b500      	push	{lr}
    9f32:	b08b      	sub	sp, #44	; 0x2c
	u32 command[5];
	u32 result[5];
	command[0] = 57;
    9f34:	2339      	movs	r3, #57	; 0x39
	iap_entry(command, result);
    9f36:	4668      	mov	r0, sp
	command[0] = 57;
    9f38:	9300      	str	r3, [sp, #0]
	iap_entry(command, result);
    9f3a:	a905      	add	r1, sp, #20
    9f3c:	4b02      	ldr	r3, [pc, #8]	; (9f48 <set_isp+0x18>)
    9f3e:	4798      	blx	r3
}
    9f40:	b00b      	add	sp, #44	; 0x2c
    9f42:	f85d fb04 	ldr.w	pc, [sp], #4
    9f46:	bf00      	nop
    9f48:	1fff1ff1 	.word	0x1fff1ff1

00009f4c <DataIn>:

/**
	Sends next chunk of data (possibly 0 bytes) to host
 */
static void DataIn(void)
{
    9f4c:	b538      	push	{r3, r4, r5, lr}
	int iChunk;

	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
    9f4e:	4c08      	ldr	r4, [pc, #32]	; (9f70 <DataIn+0x24>)
	USBHwEPWrite(0x80, pbData, iChunk);
    9f50:	2080      	movs	r0, #128	; 0x80
	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
    9f52:	6825      	ldr	r5, [r4, #0]
	USBHwEPWrite(0x80, pbData, iChunk);
    9f54:	6861      	ldr	r1, [r4, #4]
	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
    9f56:	2d40      	cmp	r5, #64	; 0x40
    9f58:	bfa8      	it	ge
    9f5a:	2540      	movge	r5, #64	; 0x40
	USBHwEPWrite(0x80, pbData, iChunk);
    9f5c:	462a      	mov	r2, r5
    9f5e:	f000 f951 	bl	a204 <USBHwEPWrite>
	pbData += iChunk;
    9f62:	6863      	ldr	r3, [r4, #4]
	iResidue -= iChunk;
    9f64:	6822      	ldr	r2, [r4, #0]
	pbData += iChunk;
    9f66:	442b      	add	r3, r5
	iResidue -= iChunk;
    9f68:	1b52      	subs	r2, r2, r5
	pbData += iChunk;
    9f6a:	6063      	str	r3, [r4, #4]
	iResidue -= iChunk;
    9f6c:	6022      	str	r2, [r4, #0]
}
    9f6e:	bd38      	pop	{r3, r4, r5, pc}
    9f70:	100012b4 	.word	0x100012b4

00009f74 <_HandleRequest.constprop.0>:
static BOOL _HandleRequest(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
    9f74:	b537      	push	{r0, r1, r2, r4, r5, lr}
	iType = REQTYPE_GET_TYPE(pSetup->bmRequestType);
    9f76:	4810      	ldr	r0, [pc, #64]	; (9fb8 <_HandleRequest.constprop.0+0x44>)
    9f78:	7a04      	ldrb	r4, [r0, #8]
    9f7a:	4605      	mov	r5, r0
    9f7c:	f3c4 1441 	ubfx	r4, r4, #5, #2
	if(iType == REQTYPE_TYPE_VENDOR) {
    9f80:	2c02      	cmp	r4, #2
    9f82:	d10c      	bne.n	9f9e <_HandleRequest.constprop.0+0x2a>
		BOOL fFilterStatus = FALSE;
    9f84:	2300      	movs	r3, #0
		if(USBFilterOsVendorMessage(pSetup, &fFilterStatus, piLen, ppbData)) {
    9f86:	f100 0210 	add.w	r2, r0, #16
		BOOL fFilterStatus = FALSE;
    9f8a:	9301      	str	r3, [sp, #4]
		if(USBFilterOsVendorMessage(pSetup, &fFilterStatus, piLen, ppbData)) {
    9f8c:	a901      	add	r1, sp, #4
    9f8e:	1d03      	adds	r3, r0, #4
    9f90:	3008      	adds	r0, #8
    9f92:	f000 fa5d 	bl	a450 <USBFilterOsVendorMessage>
    9f96:	b110      	cbz	r0, 9f9e <_HandleRequest.constprop.0+0x2a>
			return fFilterStatus;
    9f98:	9801      	ldr	r0, [sp, #4]
}
    9f9a:	b003      	add	sp, #12
    9f9c:	bd30      	pop	{r4, r5, pc}
	pfnHandler = apfnReqHandlers[iType];
    9f9e:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    9fa2:	6963      	ldr	r3, [r4, #20]
	if (pfnHandler == NULL) {
    9fa4:	b12b      	cbz	r3, 9fb2 <_HandleRequest.constprop.0+0x3e>
	return pfnHandler(pSetup, piLen, ppbData);
    9fa6:	4a05      	ldr	r2, [pc, #20]	; (9fbc <_HandleRequest.constprop.0+0x48>)
    9fa8:	f102 010c 	add.w	r1, r2, #12
    9fac:	1d10      	adds	r0, r2, #4
    9fae:	4798      	blx	r3
    9fb0:	e7f3      	b.n	9f9a <_HandleRequest.constprop.0+0x26>
		return FALSE;
    9fb2:	4618      	mov	r0, r3
    9fb4:	e7f1      	b.n	9f9a <_HandleRequest.constprop.0+0x26>
    9fb6:	bf00      	nop
    9fb8:	100012b4 	.word	0x100012b4
    9fbc:	100012b8 	.word	0x100012b8

00009fc0 <USBHandleControlTransfer>:
 *
 *	@param [in]	bEP		Endpoint address
 *	@param [in]	bEPStat	Endpoint status
 */
void USBHandleControlTransfer(U8 bEP, U8 bEPStat)
{
    9fc0:	b510      	push	{r4, lr}
	int iChunk, iType;

	if (bEP == 0x00) {
    9fc2:	2800      	cmp	r0, #0
    9fc4:	d147      	bne.n	a056 <USBHandleControlTransfer+0x96>
		// OUT transfer
		if (bEPStat & EP_STATUS_SETUP) {
    9fc6:	f011 0104 	ands.w	r1, r1, #4
    9fca:	4c24      	ldr	r4, [pc, #144]	; (a05c <USBHandleControlTransfer+0x9c>)
    9fcc:	d023      	beq.n	a016 <USBHandleControlTransfer+0x56>
			// setup packet, reset request message state machine
			USBHwEPRead(0x00, (U8 *)&Setup, sizeof(Setup));
    9fce:	2208      	movs	r2, #8
    9fd0:	18a1      	adds	r1, r4, r2
    9fd2:	f000 f93f 	bl	a254 <USBHwEPRead>
			DBG("S%x", Setup.bRequest);

			// defaults for data pointer and residue
			iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
    9fd6:	7a22      	ldrb	r2, [r4, #8]
    9fd8:	f3c2 1341 	ubfx	r3, r2, #5, #2
			pbData = apbDataStore[iType];
    9fdc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    9fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9fe2:	6063      	str	r3, [r4, #4]
			iResidue = Setup.wLength;
    9fe4:	89e3      	ldrh	r3, [r4, #14]
    9fe6:	6023      	str	r3, [r4, #0]
			iLen = Setup.wLength;
    9fe8:	6123      	str	r3, [r4, #16]

			if ((Setup.wLength == 0) ||
    9fea:	b10b      	cbz	r3, 9ff0 <USBHandleControlTransfer+0x30>
    9fec:	09d3      	lsrs	r3, r2, #7
    9fee:	d034      	beq.n	a05a <USBHandleControlTransfer+0x9a>
				(REQTYPE_GET_DIR(Setup.bmRequestType) == REQTYPE_DIR_TO_HOST)) {
				// ask installed handler to process request
				if (!_HandleRequest(&Setup, &iLen, &pbData)) {
    9ff0:	f7ff ffc0 	bl	9f74 <_HandleRequest.constprop.0>
    9ff4:	b928      	cbnz	r0, a002 <USBHandleControlTransfer+0x42>
		DataIn();
	}
	else {
		ASSERT(FALSE);
	}
}
    9ff6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	USBHwEPStall(0x80, TRUE);
    9ffa:	2101      	movs	r1, #1
    9ffc:	2080      	movs	r0, #128	; 0x80
    9ffe:	f000 b8f5 	b.w	a1ec <USBHwEPStall>
				iResidue = MIN(iLen, Setup.wLength);
    a002:	89e2      	ldrh	r2, [r4, #14]
    a004:	6923      	ldr	r3, [r4, #16]
    a006:	429a      	cmp	r2, r3
    a008:	bfd4      	ite	le
    a00a:	6022      	strle	r2, [r4, #0]
    a00c:	6023      	strgt	r3, [r4, #0]
}
    a00e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					DataIn();
    a012:	f7ff bf9b 	b.w	9f4c <DataIn>
			if (iResidue > 0) {
    a016:	6822      	ldr	r2, [r4, #0]
    a018:	2a00      	cmp	r2, #0
    a01a:	dd17      	ble.n	a04c <USBHandleControlTransfer+0x8c>
				iChunk = USBHwEPRead(0x00, pbData, iResidue);
    a01c:	6861      	ldr	r1, [r4, #4]
    a01e:	f000 f919 	bl	a254 <USBHwEPRead>
				if (iChunk < 0) {
    a022:	2800      	cmp	r0, #0
    a024:	dbe7      	blt.n	9ff6 <USBHandleControlTransfer+0x36>
				pbData += iChunk;
    a026:	6863      	ldr	r3, [r4, #4]
    a028:	4403      	add	r3, r0
    a02a:	6063      	str	r3, [r4, #4]
				iResidue -= iChunk;
    a02c:	6823      	ldr	r3, [r4, #0]
    a02e:	1a18      	subs	r0, r3, r0
    a030:	6020      	str	r0, [r4, #0]
				if (iResidue == 0) {
    a032:	b990      	cbnz	r0, a05a <USBHandleControlTransfer+0x9a>
					iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
    a034:	7a23      	ldrb	r3, [r4, #8]
    a036:	f3c3 1341 	ubfx	r3, r3, #5, #2
					pbData = apbDataStore[iType];
    a03a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    a03e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a040:	6063      	str	r3, [r4, #4]
					if (!_HandleRequest(&Setup, &iLen, &pbData)) {
    a042:	f7ff ff97 	bl	9f74 <_HandleRequest.constprop.0>
    a046:	2800      	cmp	r0, #0
    a048:	d1e1      	bne.n	a00e <USBHandleControlTransfer+0x4e>
    a04a:	e7d4      	b.n	9ff6 <USBHandleControlTransfer+0x36>
				iChunk = USBHwEPRead(0x00, NULL, 0);
    a04c:	460a      	mov	r2, r1
}
    a04e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				iChunk = USBHwEPRead(0x00, NULL, 0);
    a052:	f000 b8ff 	b.w	a254 <USBHwEPRead>
	else if (bEP == 0x80) {
    a056:	2880      	cmp	r0, #128	; 0x80
    a058:	d0d9      	beq.n	a00e <USBHandleControlTransfer+0x4e>
}
    a05a:	bd10      	pop	{r4, pc}
    a05c:	100012b4 	.word	0x100012b4

0000a060 <USBRegisterRequestHandler>:
 */
void USBRegisterRequestHandler(int iType, TFnHandleRequest *pfnHandler, U8 *pbDataStore)
{
	ASSERT(iType >= 0);
	ASSERT(iType < 4);
	apfnReqHandlers[iType] = pfnHandler;
    a060:	4b02      	ldr	r3, [pc, #8]	; (a06c <USBRegisterRequestHandler+0xc>)
    a062:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a066:	6141      	str	r1, [r0, #20]
	apbDataStore[iType] = pbDataStore;
    a068:	6242      	str	r2, [r0, #36]	; 0x24
}
    a06a:	4770      	bx	lr
    a06c:	100012b4 	.word	0x100012b4

0000a070 <HandleUsbReset>:
static void HandleUsbReset(U8 bDevStatus)
{
	if (bDevStatus & DEV_STATUS_RESET) {
		DBG("\n!");
	}
}
    a070:	4770      	bx	lr
    a072:	0000      	movs	r0, r0

0000a074 <USBInit>:
	installing default callbacks.
	
	@return TRUE if initialisation was successful
 */
BOOL USBInit(void)
{
    a074:	b510      	push	{r4, lr}
	
	// register bus reset handler
	USBHwRegisterDevIntHandler(HandleUsbReset);
	
	// register control transfer handler on EP0
	USBHwRegisterEPIntHandler(0x00, USBHandleControlTransfer);
    a076:	4c0e      	ldr	r4, [pc, #56]	; (a0b0 <USBInit+0x3c>)
	USBHwInit();
    a078:	f000 f990 	bl	a39c <USBHwInit>
	USBHwRegisterDevIntHandler(HandleUsbReset);
    a07c:	480d      	ldr	r0, [pc, #52]	; (a0b4 <USBInit+0x40>)
    a07e:	f000 f87f 	bl	a180 <USBHwRegisterDevIntHandler>
	USBHwRegisterEPIntHandler(0x00, USBHandleControlTransfer);
    a082:	4621      	mov	r1, r4
    a084:	2000      	movs	r0, #0
    a086:	f000 f861 	bl	a14c <USBHwRegisterEPIntHandler>
	USBHwRegisterEPIntHandler(0x80, USBHandleControlTransfer);
    a08a:	4621      	mov	r1, r4
    a08c:	2080      	movs	r0, #128	; 0x80
    a08e:	f000 f85d 	bl	a14c <USBHwRegisterEPIntHandler>
	
	// setup control endpoints
	USBHwEPConfig(0x00, MAX_PACKET_SIZE0);
    a092:	2140      	movs	r1, #64	; 0x40
    a094:	2000      	movs	r0, #0
    a096:	f000 f83b 	bl	a110 <USBHwEPConfig>
	USBHwEPConfig(0x80, MAX_PACKET_SIZE0);
    a09a:	2140      	movs	r1, #64	; 0x40
    a09c:	2080      	movs	r0, #128	; 0x80
    a09e:	f000 f837 	bl	a110 <USBHwEPConfig>
	
	// register standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_STANDARD, USBHandleStandardRequest, abStdReqData);
    a0a2:	2000      	movs	r0, #0
    a0a4:	4a04      	ldr	r2, [pc, #16]	; (a0b8 <USBInit+0x44>)
    a0a6:	4905      	ldr	r1, [pc, #20]	; (a0bc <USBInit+0x48>)
    a0a8:	f7ff ffda 	bl	a060 <USBRegisterRequestHandler>

	return TRUE;
}
    a0ac:	2001      	movs	r0, #1
    a0ae:	bd10      	pop	{r4, pc}
    a0b0:	00009fc1 	.word	0x00009fc1
    a0b4:	0000a071 	.word	0x0000a071
    a0b8:	100012e8 	.word	0x100012e8
    a0bc:	0000a545 	.word	0x0000a545

0000a0c0 <Wait4DevInt>:
    @param [in] dwIntr      Bitmask of interrupts to wait for   
 */
static void Wait4DevInt(U32 dwIntr)
{
    // wait for specific interrupt
    while ((USBDevIntSt & dwIntr) != dwIntr);
    a0c0:	4a03      	ldr	r2, [pc, #12]	; (a0d0 <Wait4DevInt+0x10>)
    a0c2:	6813      	ldr	r3, [r2, #0]
    a0c4:	ea30 0303 	bics.w	r3, r0, r3
    a0c8:	d1fb      	bne.n	a0c2 <Wait4DevInt+0x2>
    // clear the interrupt bits
    USBDevIntClr = dwIntr;
    a0ca:	4b02      	ldr	r3, [pc, #8]	; (a0d4 <Wait4DevInt+0x14>)
    a0cc:	6018      	str	r0, [r3, #0]
}
    a0ce:	4770      	bx	lr
    a0d0:	5000c200 	.word	0x5000c200
    a0d4:	5000c208 	.word	0x5000c208

0000a0d8 <USBHwCmd>:
    @param [in] bCmd        Command to send
 */
static void USBHwCmd(U8 bCmd)
{
    // clear CDFULL/CCEMTY
    USBDevIntClr = CDFULL | CCEMTY;
    a0d8:	2230      	movs	r2, #48	; 0x30
    a0da:	4b04      	ldr	r3, [pc, #16]	; (a0ec <USBHwCmd+0x14>)
    // write command code
    USBCmdCode = 0x00000500 | (bCmd << 16);
    a0dc:	0400      	lsls	r0, r0, #16
    a0de:	f440 60a0 	orr.w	r0, r0, #1280	; 0x500
    USBDevIntClr = CDFULL | CCEMTY;
    a0e2:	601a      	str	r2, [r3, #0]
    USBCmdCode = 0x00000500 | (bCmd << 16);
    a0e4:	6098      	str	r0, [r3, #8]
    Wait4DevInt(CCEMTY);
    a0e6:	2010      	movs	r0, #16
    a0e8:	f7ff bfea 	b.w	a0c0 <Wait4DevInt>
    a0ec:	5000c208 	.word	0x5000c208

0000a0f0 <USBHwCmdWrite>:
        
    @param [in] bCmd        Command to send
    @param [in] bData       Data to send
 */
static void USBHwCmdWrite(U8 bCmd, U16 bData)
{
    a0f0:	b508      	push	{r3, lr}
    // write command code
    USBHwCmd(bCmd);
    a0f2:	f7ff fff1 	bl	a0d8 <USBHwCmd>

    // write command data
    USBCmdCode = 0x00000100 | (bData << 16);
    a0f6:	4b05      	ldr	r3, [pc, #20]	; (a10c <USBHwCmdWrite+0x1c>)
    a0f8:	0409      	lsls	r1, r1, #16
    a0fa:	f441 7180 	orr.w	r1, r1, #256	; 0x100
    a0fe:	6019      	str	r1, [r3, #0]
    Wait4DevInt(CCEMTY);
    a100:	2010      	movs	r0, #16
}
    a102:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Wait4DevInt(CCEMTY);
    a106:	f7ff bfdb 	b.w	a0c0 <Wait4DevInt>
    a10a:	bf00      	nop
    a10c:	5000c210 	.word	0x5000c210

0000a110 <USBHwEPConfig>:
        
    @param [in] bEP             Endpoint number
    @param [in] wMaxPacketSize  Maximum packet size for this EP
 */
void USBHwEPConfig(U8 bEP, U16 wMaxPacketSize)
{
    a110:	b510      	push	{r4, lr}
    USBReEp |= (1 << idx);
    a112:	2301      	movs	r3, #1
    a114:	4a0b      	ldr	r2, [pc, #44]	; (a144 <USBHwEPConfig+0x34>)
    int idx;
    
    idx = EP2IDX(bEP);
    a116:	0044      	lsls	r4, r0, #1
    a118:	f004 041e 	and.w	r4, r4, #30
    a11c:	ea44 14d0 	orr.w	r4, r4, r0, lsr #7
    USBReEp |= (1 << idx);
    a120:	6810      	ldr	r0, [r2, #0]
    a122:	40a3      	lsls	r3, r4
    a124:	4303      	orrs	r3, r0
    a126:	6013      	str	r3, [r2, #0]
    USBEpIn = idx;
    a128:	4b07      	ldr	r3, [pc, #28]	; (a148 <USBHwEPConfig+0x38>)
    Wait4DevInt(EP_RLZED);
    a12a:	f44f 7080 	mov.w	r0, #256	; 0x100
    USBEpIn = idx;
    a12e:	601c      	str	r4, [r3, #0]
    USBMaxPSize = wMaxPSize;
    a130:	6059      	str	r1, [r3, #4]
    Wait4DevInt(EP_RLZED);
    a132:	f7ff ffc5 	bl	a0c0 <Wait4DevInt>
    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fEnable ? 0 : EP_DA);
    a136:	f044 0040 	orr.w	r0, r4, #64	; 0x40
    a13a:	2100      	movs	r1, #0
    // realise EP
    USBHwEPRealize(idx, wMaxPacketSize);

    // enable EP
    USBHwEPEnable(idx, TRUE);
}
    a13c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fEnable ? 0 : EP_DA);
    a140:	f7ff bfd6 	b.w	a0f0 <USBHwCmdWrite>
    a144:	5000c244 	.word	0x5000c244
    a148:	5000c248 	.word	0x5000c248

0000a14c <USBHwRegisterEPIntHandler>:
    idx = EP2IDX(bEP);

    ASSERT(idx<32);

    /* add handler to list of EP handlers */
    _apfnEPIntHandlers[idx / 2] = pfnHandler;
    a14c:	4a0a      	ldr	r2, [pc, #40]	; (a178 <USBHwRegisterEPIntHandler+0x2c>)
    idx = EP2IDX(bEP);
    a14e:	0043      	lsls	r3, r0, #1
    a150:	f003 031e 	and.w	r3, r3, #30
    _apfnEPIntHandlers[idx / 2] = pfnHandler;
    a154:	f842 1013 	str.w	r1, [r2, r3, lsl #1]
    idx = EP2IDX(bEP);
    a158:	ea43 10d0 	orr.w	r0, r3, r0, lsr #7
    
    /* enable EP interrupt */
    USBEpIntEn |= (1 << idx);
    a15c:	2301      	movs	r3, #1
    a15e:	4a07      	ldr	r2, [pc, #28]	; (a17c <USBHwRegisterEPIntHandler+0x30>)
    a160:	fa03 f000 	lsl.w	r0, r3, r0
    a164:	6811      	ldr	r1, [r2, #0]
    a166:	4308      	orrs	r0, r1
    a168:	6010      	str	r0, [r2, #0]
    USBDevIntEn |= EP_SLOW;
    a16a:	f852 3c30 	ldr.w	r3, [r2, #-48]
    a16e:	f043 0304 	orr.w	r3, r3, #4
    a172:	f842 3c30 	str.w	r3, [r2, #-48]
    
    DBG("Registered handler for EP 0x%x\n", bEP);
}
    a176:	4770      	bx	lr
    a178:	100012f0 	.word	0x100012f0
    a17c:	5000c234 	.word	0x5000c234

0000a180 <USBHwRegisterDevIntHandler>:
        
    @param [in] pfnHandler  Callback function
 */
void USBHwRegisterDevIntHandler(TFnDevIntHandler *pfnHandler)
{
    _pfnDevIntHandler = pfnHandler;
    a180:	4b03      	ldr	r3, [pc, #12]	; (a190 <USBHwRegisterDevIntHandler+0x10>)
    
    // enable device interrupt
    USBDevIntEn |= DEV_STAT;
    a182:	4a04      	ldr	r2, [pc, #16]	; (a194 <USBHwRegisterDevIntHandler+0x14>)
    _pfnDevIntHandler = pfnHandler;
    a184:	6418      	str	r0, [r3, #64]	; 0x40
    USBDevIntEn |= DEV_STAT;
    a186:	6813      	ldr	r3, [r2, #0]
    a188:	f043 0308 	orr.w	r3, r3, #8
    a18c:	6013      	str	r3, [r2, #0]

    DBG("Registered handler for device status\n");
}
    a18e:	4770      	bx	lr
    a190:	100012f0 	.word	0x100012f0
    a194:	5000c204 	.word	0x5000c204

0000a198 <USBHwSetAddress>:
        
    @param [in] bAddr       Device address to set
 */
void USBHwSetAddress(U8 bAddr)
{
    USBHwCmdWrite(CMD_DEV_SET_ADDRESS, DEV_EN | bAddr);
    a198:	f040 0180 	orr.w	r1, r0, #128	; 0x80
    a19c:	20d0      	movs	r0, #208	; 0xd0
    a19e:	f7ff bfa7 	b.w	a0f0 <USBHwCmdWrite>

0000a1a2 <USBHwConnect>:
    FIO0CLR = (1<<14);
  else
    FIO0SET = (1<<14);
#endif
#endif
    USBHwCmdWrite(CMD_DEV_STATUS, fConnect ? CON : 0);
    a1a2:	1e01      	subs	r1, r0, #0
    a1a4:	bf18      	it	ne
    a1a6:	2101      	movne	r1, #1
    a1a8:	20fe      	movs	r0, #254	; 0xfe
    a1aa:	f7ff bfa1 	b.w	a0f0 <USBHwCmdWrite>

0000a1ae <USBHwNakIntEnable>:
    from NAK interrupt by checking the bits in their bEPStatus argument.
    
    @param [in] bIntBits    Bitmap indicating which NAK interrupts to enable
 */
void USBHwNakIntEnable(U8 bIntBits)
{
    a1ae:	4601      	mov	r1, r0
    USBHwCmdWrite(CMD_DEV_SET_MODE, bIntBits);
    a1b0:	20f3      	movs	r0, #243	; 0xf3
    a1b2:	f7ff bf9d 	b.w	a0f0 <USBHwCmdWrite>
    a1b6:	0000      	movs	r0, r0

0000a1b8 <USBHwEPGetStatus>:
        
    @param [in] bEP     Endpoint number
    @return Endpoint status byte (containing EP_STATUS_xxx bits)
 */
U8  USBHwEPGetStatus(U8 bEP)
{
    a1b8:	b508      	push	{r3, lr}
    int idx = EP2IDX(bEP);
    a1ba:	0043      	lsls	r3, r0, #1
    a1bc:	f003 031e 	and.w	r3, r3, #30
    a1c0:	ea43 11d0 	orr.w	r1, r3, r0, lsr #7
    USBHwCmd(bCmd);
    a1c4:	4608      	mov	r0, r1
    a1c6:	f7ff ff87 	bl	a0d8 <USBHwCmd>
    USBCmdCode = 0x00000200 | (bCmd << 16);
    a1ca:	4b06      	ldr	r3, [pc, #24]	; (a1e4 <USBHwEPGetStatus+0x2c>)
    a1cc:	0409      	lsls	r1, r1, #16
    a1ce:	f441 7100 	orr.w	r1, r1, #512	; 0x200
    a1d2:	6019      	str	r1, [r3, #0]
    Wait4DevInt(CDFULL);
    a1d4:	2020      	movs	r0, #32
    a1d6:	f7ff ff73 	bl	a0c0 <Wait4DevInt>
    return USBCmdData;
    a1da:	4b03      	ldr	r3, [pc, #12]	; (a1e8 <USBHwEPGetStatus+0x30>)
    a1dc:	6818      	ldr	r0, [r3, #0]

    return USBHwCmdRead(CMD_EP_SELECT | idx);
}
    a1de:	b2c0      	uxtb	r0, r0
    a1e0:	bd08      	pop	{r3, pc}
    a1e2:	bf00      	nop
    a1e4:	5000c210 	.word	0x5000c210
    a1e8:	5000c214 	.word	0x5000c214

0000a1ec <USBHwEPStall>:
    @param [in] bEP     Endpoint number
    @param [in] fStall  TRUE to stall, FALSE to unstall
 */
void USBHwEPStall(U8 bEP, BOOL fStall)
{
    int idx = EP2IDX(bEP);
    a1ec:	0043      	lsls	r3, r0, #1
    a1ee:	f003 031e 	and.w	r3, r3, #30
    a1f2:	ea43 10d0 	orr.w	r0, r3, r0, lsr #7

    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fStall ? EP_ST : 0);
    a1f6:	3900      	subs	r1, #0
    a1f8:	bf18      	it	ne
    a1fa:	2101      	movne	r1, #1
    a1fc:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    a200:	f7ff bf76 	b.w	a0f0 <USBHwCmdWrite>

0000a204 <USBHwEPWrite>:
    @param [in] iLen    Number of bytes to write
            
    @return number of bytes written into the endpoint buffer
*/
int USBHwEPWrite(U8 bEP, U8 *pbBuf, U32 iLen)
{
    a204:	b538      	push	{r3, r4, r5, lr}
    a206:	4603      	mov	r3, r0
    a208:	4615      	mov	r5, r2
    U32 idx;
    
    idx = EP2IDX(bEP);
    a20a:	0040      	lsls	r0, r0, #1
    a20c:	f000 001e 	and.w	r0, r0, #30
    a210:	ea40 10d3 	orr.w	r0, r0, r3, lsr #7
    
    // set write enable for specific endpoint
    USBCtrl = WR_EN | ((bEP & 0xF) << 2);
    a214:	009b      	lsls	r3, r3, #2
    a216:	4c0d      	ldr	r4, [pc, #52]	; (a24c <USBHwEPWrite+0x48>)
    a218:	f003 033c 	and.w	r3, r3, #60	; 0x3c
    a21c:	f043 0302 	orr.w	r3, r3, #2
    a220:	6023      	str	r3, [r4, #0]
    
    // set packet length
    USBTxPLen = iLen;
    a222:	4b0b      	ldr	r3, [pc, #44]	; (a250 <USBHwEPWrite+0x4c>)
    a224:	601a      	str	r2, [r3, #0]
    
    // write data
    while (USBCtrl & WR_EN) {
    a226:	4623      	mov	r3, r4
        USBTxData = (pbBuf[3] << 24) | (pbBuf[2] << 16) | (pbBuf[1] << 8) | pbBuf[0];
    a228:	3c0c      	subs	r4, #12
    while (USBCtrl & WR_EN) {
    a22a:	681a      	ldr	r2, [r3, #0]
    a22c:	f012 0202 	ands.w	r2, r2, #2
    a230:	d107      	bne.n	a242 <USBHwEPWrite+0x3e>
        pbBuf += 4;
    }

    USBCtrl = 0;
    a232:	601a      	str	r2, [r3, #0]

    // select endpoint and validate buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    a234:	f7ff ff50 	bl	a0d8 <USBHwCmd>
    USBHwCmd(CMD_EP_VALIDATE_BUFFER);
    a238:	20fa      	movs	r0, #250	; 0xfa
    a23a:	f7ff ff4d 	bl	a0d8 <USBHwCmd>
    
    return iLen;
}
    a23e:	4628      	mov	r0, r5
    a240:	bd38      	pop	{r3, r4, r5, pc}
        USBTxData = (pbBuf[3] << 24) | (pbBuf[2] << 16) | (pbBuf[1] << 8) | pbBuf[0];
    a242:	f851 2b04 	ldr.w	r2, [r1], #4
    a246:	6022      	str	r2, [r4, #0]
        pbBuf += 4;
    a248:	e7ef      	b.n	a22a <USBHwEPWrite+0x26>
    a24a:	bf00      	nop
    a24c:	5000c228 	.word	0x5000c228
    a250:	5000c224 	.word	0x5000c224

0000a254 <USBHwEPRead>:
            
    @return the number of bytes available in the EP (possibly more than iMaxLen),
    or <0 in case of error.
 */
int USBHwEPRead(U8 bEP, U8 *pbBuf, U32 iMaxLen)
{
    a254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a256:	4603      	mov	r3, r0
    U32 i, idx;
    U32 dwData, dwLen;
    
    idx = EP2IDX(bEP);
    a258:	0040      	lsls	r0, r0, #1
    a25a:	f000 001e 	and.w	r0, r0, #30
    a25e:	ea40 10d3 	orr.w	r0, r0, r3, lsr #7
    
    // set read enable bit for specific endpoint
    USBCtrl = RD_EN | ((bEP & 0xF) << 2);
    a262:	009b      	lsls	r3, r3, #2
    a264:	4e14      	ldr	r6, [pc, #80]	; (a2b8 <USBHwEPRead+0x64>)
    a266:	f003 033c 	and.w	r3, r3, #60	; 0x3c
    a26a:	f043 0301 	orr.w	r3, r3, #1
    
    // wait for PKT_RDY
    do {
        dwLen = USBRxPLen;
    a26e:	4c13      	ldr	r4, [pc, #76]	; (a2bc <USBHwEPRead+0x68>)
    USBCtrl = RD_EN | ((bEP & 0xF) << 2);
    a270:	6033      	str	r3, [r6, #0]
        dwLen = USBRxPLen;
    a272:	6823      	ldr	r3, [r4, #0]
    } while ((dwLen & PKT_RDY) == 0);
    a274:	051d      	lsls	r5, r3, #20
    a276:	d5fc      	bpl.n	a272 <USBHwEPRead+0x1e>
    
    // packet valid?
    if ((dwLen & DV) == 0) {
    a278:	055c      	lsls	r4, r3, #21
    a27a:	d51a      	bpl.n	a2b2 <USBHwEPRead+0x5e>
    
    // get length
    dwLen &= PKT_LNGTH_MASK;
    
    // get data
    dwData = 0;
    a27c:	2500      	movs	r5, #0
    for (i = 0; i < dwLen; i++) {
    a27e:	462c      	mov	r4, r5
        if ((i % 4) == 0) {
            dwData = USBRxData;
    a280:	4f0f      	ldr	r7, [pc, #60]	; (a2c0 <USBHwEPRead+0x6c>)
    dwLen &= PKT_LNGTH_MASK;
    a282:	f3c3 0309 	ubfx	r3, r3, #0, #10
    for (i = 0; i < dwLen; i++) {
    a286:	429c      	cmp	r4, r3
    a288:	d108      	bne.n	a29c <USBHwEPRead+0x48>
        }
        dwData >>= 8;
    }

    // make sure RD_EN is clear
    USBCtrl = 0;
    a28a:	2300      	movs	r3, #0
    a28c:	6033      	str	r3, [r6, #0]

    // select endpoint and clear buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    a28e:	f7ff ff23 	bl	a0d8 <USBHwCmd>
    USBHwCmd(CMD_EP_CLEAR_BUFFER);
    a292:	20f2      	movs	r0, #242	; 0xf2
    a294:	f7ff ff20 	bl	a0d8 <USBHwCmd>
    
    return dwLen;
    a298:	4620      	mov	r0, r4
}
    a29a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((i % 4) == 0) {
    a29c:	f014 0f03 	tst.w	r4, #3
            dwData = USBRxData;
    a2a0:	bf08      	it	eq
    a2a2:	683d      	ldreq	r5, [r7, #0]
        if ((pbBuf != NULL) && (i < iMaxLen)) {
    a2a4:	b111      	cbz	r1, a2ac <USBHwEPRead+0x58>
    a2a6:	4294      	cmp	r4, r2
            pbBuf[i] = dwData & 0xFF;
    a2a8:	bf38      	it	cc
    a2aa:	550d      	strbcc	r5, [r1, r4]
        dwData >>= 8;
    a2ac:	0a2d      	lsrs	r5, r5, #8
    for (i = 0; i < dwLen; i++) {
    a2ae:	3401      	adds	r4, #1
    a2b0:	e7e9      	b.n	a286 <USBHwEPRead+0x32>
        return -1;
    a2b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a2b6:	e7f0      	b.n	a29a <USBHwEPRead+0x46>
    a2b8:	5000c228 	.word	0x5000c228
    a2bc:	5000c220 	.word	0x5000c220
    a2c0:	5000c218 	.word	0x5000c218

0000a2c4 <USBHwConfigDevice>:
    @param [in] fConfigured If TRUE, configure device, else unconfigure
 */
void USBHwConfigDevice(BOOL fConfigured)
{
    // set configured bit
    USBHwCmdWrite(CMD_DEV_CONFIG, fConfigured ? CONF_DEVICE : 0);
    a2c4:	1e01      	subs	r1, r0, #0
    a2c6:	bf18      	it	ne
    a2c8:	2101      	movne	r1, #1
    a2ca:	20d8      	movs	r0, #216	; 0xd8
    a2cc:	f7ff bf10 	b.w	a0f0 <USBHwCmdWrite>

0000a2d0 <USBHwISR>:
    @todo Get all 11 bits of frame number instead of just 8

    Endpoint interrupts are mapped to the slow interrupt
 */
void USBHwISR(void)
{
    a2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

// LED9 monitors total time in interrupt routine
DEBUG_LED_ON(9);

    // handle device interrupts
    dwStatus = USBDevIntSt;
    a2d2:	4b29      	ldr	r3, [pc, #164]	; (a378 <USBHwISR+0xa8>)
    a2d4:	681c      	ldr	r4, [r3, #0]
    
    // frame interrupt
    if (dwStatus & FRAME) {
    a2d6:	07e1      	lsls	r1, r4, #31
    a2d8:	d511      	bpl.n	a2fe <USBHwISR+0x2e>
        // clear int
        USBDevIntClr = FRAME;
    a2da:	2201      	movs	r2, #1
    a2dc:	609a      	str	r2, [r3, #8]
        // call handler
        if (_pfnFrameHandler != NULL) {
    a2de:	4b27      	ldr	r3, [pc, #156]	; (a37c <USBHwISR+0xac>)
    a2e0:	6c59      	ldr	r1, [r3, #68]	; 0x44
    a2e2:	b161      	cbz	r1, a2fe <USBHwISR+0x2e>
    USBHwCmd(bCmd);
    a2e4:	20f5      	movs	r0, #245	; 0xf5
    a2e6:	f7ff fef7 	bl	a0d8 <USBHwCmd>
    USBCmdCode = 0x00000200 | (bCmd << 16);
    a2ea:	4b25      	ldr	r3, [pc, #148]	; (a380 <USBHwISR+0xb0>)
    a2ec:	4a25      	ldr	r2, [pc, #148]	; (a384 <USBHwISR+0xb4>)
    Wait4DevInt(CDFULL);
    a2ee:	2020      	movs	r0, #32
    USBCmdCode = 0x00000200 | (bCmd << 16);
    a2f0:	601a      	str	r2, [r3, #0]
    Wait4DevInt(CDFULL);
    a2f2:	f7ff fee5 	bl	a0c0 <Wait4DevInt>
    return USBCmdData;
    a2f6:	4b24      	ldr	r3, [pc, #144]	; (a388 <USBHwISR+0xb8>)
    a2f8:	6818      	ldr	r0, [r3, #0]
            wFrame = USBHwCmdRead(CMD_DEV_READ_CUR_FRAME_NR);
            _pfnFrameHandler(wFrame);
    a2fa:	b2c0      	uxtb	r0, r0
    a2fc:	4788      	blx	r1
        }
    }
    
    // device status interrupt
    if (dwStatus & DEV_STAT) {
    a2fe:	0722      	lsls	r2, r4, #28
    a300:	d517      	bpl.n	a332 <USBHwISR+0x62>
        /*  Clear DEV_STAT interrupt before reading DEV_STAT register.
            This prevents corrupted device status reads, see
            LPC2148 User manual revision 2, 25 july 2006.
        */
        USBDevIntClr = DEV_STAT;
    a302:	2208      	movs	r2, #8
    a304:	4b21      	ldr	r3, [pc, #132]	; (a38c <USBHwISR+0xbc>)
    USBHwCmd(bCmd);
    a306:	20fe      	movs	r0, #254	; 0xfe
        USBDevIntClr = DEV_STAT;
    a308:	601a      	str	r2, [r3, #0]
    USBHwCmd(bCmd);
    a30a:	f7ff fee5 	bl	a0d8 <USBHwCmd>
    USBCmdCode = 0x00000200 | (bCmd << 16);
    a30e:	4b1c      	ldr	r3, [pc, #112]	; (a380 <USBHwISR+0xb0>)
    a310:	4a1f      	ldr	r2, [pc, #124]	; (a390 <USBHwISR+0xc0>)
    Wait4DevInt(CDFULL);
    a312:	2020      	movs	r0, #32
    USBCmdCode = 0x00000200 | (bCmd << 16);
    a314:	601a      	str	r2, [r3, #0]
    Wait4DevInt(CDFULL);
    a316:	f7ff fed3 	bl	a0c0 <Wait4DevInt>
    return USBCmdData;
    a31a:	4b1b      	ldr	r3, [pc, #108]	; (a388 <USBHwISR+0xb8>)
    a31c:	681b      	ldr	r3, [r3, #0]
        bDevStat = USBHwCmdRead(CMD_DEV_STATUS);
        if (bDevStat & (CON_CH | SUS_CH | RST)) {
    a31e:	f013 0f1a 	tst.w	r3, #26
    return USBCmdData;
    a322:	b2d8      	uxtb	r0, r3
        if (bDevStat & (CON_CH | SUS_CH | RST)) {
    a324:	d005      	beq.n	a332 <USBHwISR+0x62>
            // convert device status into something HW independent
            bStat = ((bDevStat & CON) ? DEV_STATUS_CONNECT : 0) |
                    ((bDevStat & SUS) ? DEV_STATUS_SUSPEND : 0) |
                    ((bDevStat & RST) ? DEV_STATUS_RESET : 0);
            // call handler
            if (_pfnDevIntHandler != NULL) {
    a326:	4b15      	ldr	r3, [pc, #84]	; (a37c <USBHwISR+0xac>)
    a328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    a32a:	b113      	cbz	r3, a332 <USBHwISR+0x62>
DEBUG_LED_ON(8);        
                _pfnDevIntHandler(bStat);
    a32c:	f000 0015 	and.w	r0, r0, #21
    a330:	4798      	blx	r3
            }
        }
    }
    
    // endpoint interrupt
    if (dwStatus & EP_SLOW) {
    a332:	0763      	lsls	r3, r4, #29
    a334:	d51e      	bpl.n	a374 <USBHwISR+0xa4>
        // clear EP_SLOW
        USBDevIntClr = EP_SLOW;
    a336:	2204      	movs	r2, #4
        // check all endpoints
        for (i = 0; i < 32; i++) {
    a338:	2400      	movs	r4, #0
        USBDevIntClr = EP_SLOW;
    a33a:	4b14      	ldr	r3, [pc, #80]	; (a38c <USBHwISR+0xbc>)
            dwIntBit = (1 << i);
            if (USBEpIntSt & dwIntBit) {
    a33c:	4d15      	ldr	r5, [pc, #84]	; (a394 <USBHwISR+0xc4>)
                // clear int (and retrieve status)
                USBEpIntClr = dwIntBit;
    a33e:	4e16      	ldr	r6, [pc, #88]	; (a398 <USBHwISR+0xc8>)
                Wait4DevInt(CDFULL);
                bEPStat = USBCmdData;
    a340:	4f11      	ldr	r7, [pc, #68]	; (a388 <USBHwISR+0xb8>)
        USBDevIntClr = EP_SLOW;
    a342:	601a      	str	r2, [r3, #0]
            dwIntBit = (1 << i);
    a344:	2301      	movs	r3, #1
            if (USBEpIntSt & dwIntBit) {
    a346:	682a      	ldr	r2, [r5, #0]
            dwIntBit = (1 << i);
    a348:	40a3      	lsls	r3, r4
            if (USBEpIntSt & dwIntBit) {
    a34a:	421a      	tst	r2, r3
    a34c:	d00f      	beq.n	a36e <USBHwISR+0x9e>
                Wait4DevInt(CDFULL);
    a34e:	2020      	movs	r0, #32
                USBEpIntClr = dwIntBit;
    a350:	6033      	str	r3, [r6, #0]
                Wait4DevInt(CDFULL);
    a352:	f7ff feb5 	bl	a0c0 <Wait4DevInt>
                        ((bEPStat & EPSTAT_ST) ? EP_STATUS_STALLED : 0) |
                        ((bEPStat & EPSTAT_STP) ? EP_STATUS_SETUP : 0) |
                        ((bEPStat & EPSTAT_EPN) ? EP_STATUS_NACKED : 0) |
                        ((bEPStat & EPSTAT_PO) ? EP_STATUS_ERROR : 0);
                // call handler
                if (_apfnEPIntHandlers[i / 2] != NULL) {
    a356:	4b09      	ldr	r3, [pc, #36]	; (a37c <USBHwISR+0xac>)
    a358:	1060      	asrs	r0, r4, #1
    a35a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
                bEPStat = USBCmdData;
    a35e:	6839      	ldr	r1, [r7, #0]
                if (_apfnEPIntHandlers[i / 2] != NULL) {
    a360:	b12b      	cbz	r3, a36e <USBHwISR+0x9e>
DEBUG_LED_ON(10);       
                    _apfnEPIntHandlers[i / 2](IDX2EP(i), bStat);
    a362:	ea40 10c4 	orr.w	r0, r0, r4, lsl #7
    a366:	f001 011f 	and.w	r1, r1, #31
    a36a:	b2c0      	uxtb	r0, r0
    a36c:	4798      	blx	r3
        for (i = 0; i < 32; i++) {
    a36e:	3401      	adds	r4, #1
    a370:	2c20      	cmp	r4, #32
    a372:	d1e7      	bne.n	a344 <USBHwISR+0x74>
            }
        }
    }
    
DEBUG_LED_OFF(9);       
}
    a374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a376:	bf00      	nop
    a378:	5000c200 	.word	0x5000c200
    a37c:	100012f0 	.word	0x100012f0
    a380:	5000c210 	.word	0x5000c210
    a384:	00f50200 	.word	0x00f50200
    a388:	5000c214 	.word	0x5000c214
    a38c:	5000c208 	.word	0x5000c208
    a390:	00fe0200 	.word	0x00fe0200
    a394:	5000c230 	.word	0x5000c230
    a398:	5000c238 	.word	0x5000c238

0000a39c <USBHwInit>:
    acts as a pull-up and so prevents detection of USB disconnect.
        
    @return TRUE if the hardware was successfully initialised
 */
BOOL USBHwInit(void)
{
    a39c:	b508      	push	{r3, lr}
#ifdef LPC17xx
	// P2.9 is USB_CONNECT
    PINSEL4 = (PINSEL4 & ~(3 << 18)) | (1 << 18);
    a39e:	4a26      	ldr	r2, [pc, #152]	; (a438 <USBHwInit+0x9c>)
    a3a0:	6813      	ldr	r3, [r2, #0]
    a3a2:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
    a3a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    a3aa:	6013      	str	r3, [r2, #0]

	// P1.18 is USB_UP_LED
    PINSEL3 = (PINSEL3 & ~(3 << 4)) | (1 << 4);
    a3ac:	f852 3c04 	ldr.w	r3, [r2, #-4]
    a3b0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    a3b4:	f043 0310 	orr.w	r3, r3, #16
    a3b8:	f842 3c04 	str.w	r3, [r2, #-4]

	// P1.30 is VBUS
    PINSEL3 = (PINSEL3 & ~(3 << 28)) | (2 << 28);
    a3bc:	f852 3c04 	ldr.w	r3, [r2, #-4]
    a3c0:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
    a3c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    a3c8:	f842 3c04 	str.w	r3, [r2, #-4]

	// P0.29 is USB_D+
    PINSEL1 = (PINSEL1 & ~(3 << 26)) | (1 << 26);
    a3cc:	f852 3c0c 	ldr.w	r3, [r2, #-12]
    a3d0:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
    a3d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    a3d8:	f842 3c0c 	str.w	r3, [r2, #-12]

	// P0.30 is USB_D-
    PINSEL1 = (PINSEL1 & ~(3 << 28)) | (1 << 28);
    a3dc:	f852 3c0c 	ldr.w	r3, [r2, #-12]
    a3e0:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
    a3e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    a3e8:	f842 3c0c 	str.w	r3, [r2, #-12]

	// enable PUSB
	PCONP |= PCONP_PCUSB;
    a3ec:	f502 2250 	add.w	r2, r2, #851968	; 0xd0000
    a3f0:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
    a3f4:	32b4      	adds	r2, #180	; 0xb4
    a3f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    a3fa:	6013      	str	r3, [r2, #0]

	/* enable the USB controller clocks */
    USBClkCtrl |= (USBClkCtrl_DEV_CLK_EN | USBClkCtrl_AHB_CLK_EN);
    a3fc:	4a0f      	ldr	r2, [pc, #60]	; (a43c <USBHwInit+0xa0>)
    a3fe:	6813      	ldr	r3, [r2, #0]
    a400:	f043 0312 	orr.w	r3, r3, #18
    a404:	6013      	str	r3, [r2, #0]
    while (!(USBClkSt & USBClkSt_DEV_CLK_ON));
    a406:	4b0e      	ldr	r3, [pc, #56]	; (a440 <USBHwInit+0xa4>)
    a408:	461a      	mov	r2, r3
    a40a:	6819      	ldr	r1, [r3, #0]
    a40c:	0789      	lsls	r1, r1, #30
    a40e:	d5fc      	bpl.n	a40a <USBHwInit+0x6e>
    while (!(USBClkSt & USBClkSt_AHB_CLK_ON));
    a410:	6813      	ldr	r3, [r2, #0]
    a412:	06db      	lsls	r3, r3, #27
    a414:	d5fc      	bpl.n	a410 <USBHwInit+0x74>
#endif

#endif
    
    // disable/clear all interrupts for now
    USBDevIntEn = 0;
    a416:	2000      	movs	r0, #0
    a418:	4b0a      	ldr	r3, [pc, #40]	; (a444 <USBHwInit+0xa8>)
    USBDevIntClr = 0xFFFFFFFF;
    a41a:	4a0b      	ldr	r2, [pc, #44]	; (a448 <USBHwInit+0xac>)
    USBDevIntEn = 0;
    a41c:	6018      	str	r0, [r3, #0]
    USBDevIntClr = 0xFFFFFFFF;
    a41e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a422:	6013      	str	r3, [r2, #0]
    USBDevIntPri = 0;
    a424:	6250      	str	r0, [r2, #36]	; 0x24

    USBEpIntEn = 0;
    a426:	62d0      	str	r0, [r2, #44]	; 0x2c
    USBEpIntClr = 0xFFFFFFFF;
    a428:	6313      	str	r3, [r2, #48]	; 0x30
    USBEpIntPri = 0;
    a42a:	4b08      	ldr	r3, [pc, #32]	; (a44c <USBHwInit+0xb0>)
    a42c:	6018      	str	r0, [r3, #0]

    // by default, only ACKs generate interrupts
    USBHwNakIntEnable(0);
    a42e:	f7ff febe 	bl	a1ae <USBHwNakIntEnable>
    DEBUG_LED_INIT(8);
    DEBUG_LED_INIT(9);
    DEBUG_LED_INIT(10);

    return TRUE;
}
    a432:	2001      	movs	r0, #1
    a434:	bd08      	pop	{r3, pc}
    a436:	bf00      	nop
    a438:	4002c010 	.word	0x4002c010
    a43c:	5000cff4 	.word	0x5000cff4
    a440:	5000cff8 	.word	0x5000cff8
    a444:	5000c204 	.word	0x5000c204
    a448:	5000c208 	.word	0x5000c208
    a44c:	5000c240 	.word	0x5000c240

0000a450 <USBFilterOsVendorMessage>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the request was handled by this filter, FALSE otherwise
 */
BOOL USBFilterOsVendorMessage(TSetupPacket *pSetup, BOOL *pfSuccess, int *piLen, U8 **ppbData)
{
    a450:	b570      	push	{r4, r5, r6, lr}
    a452:	4604      	mov	r4, r0
	if(bMsVendorIndex == 0)	{
    a454:	4815      	ldr	r0, [pc, #84]	; (a4ac <USBFilterOsVendorMessage+0x5c>)
    a456:	7805      	ldrb	r5, [r0, #0]
    a458:	2000      	movs	r0, #0
    a45a:	b32d      	cbz	r5, a4a8 <USBFilterOsVendorMessage+0x58>
		// Feature is disabled.
		return FALSE;
	}
	
	if(pSetup->bRequest == bMsVendorIndex) {
    a45c:	7866      	ldrb	r6, [r4, #1]
    a45e:	42ae      	cmp	r6, r5
    a460:	d11d      	bne.n	a49e <USBFilterOsVendorMessage+0x4e>
		// Fail unless we make it to the end.
		*pfSuccess = FALSE;
	
		int iRequestLength = pSetup->wLength;
    a462:	88e6      	ldrh	r6, [r4, #6]
		*pfSuccess = FALSE;
    a464:	6008      	str	r0, [r1, #0]
		U8 bInterfaceNumber = GET_OS_DESC_INTERFACE(pSetup->wValue);
    a466:	8860      	ldrh	r0, [r4, #2]
		U8 bPageNumber = GET_OS_DESC_PAGE(pSetup->wValue);
	
		switch (pSetup->wIndex) {
    a468:	88a4      	ldrh	r4, [r4, #4]
    a46a:	2c04      	cmp	r4, #4
    a46c:	d003      	beq.n	a476 <USBFilterOsVendorMessage+0x26>
    a46e:	2c05      	cmp	r4, #5
    a470:	d016      	beq.n	a4a0 <USBFilterOsVendorMessage+0x50>
		
		// Decide what portion of the descriptor to return.
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
		if (*piLen < iPageOffset) {
			// Not enough data for the requested offset.
			return TRUE;
    a472:	2001      	movs	r0, #1
    a474:	e013      	b.n	a49e <USBFilterOsVendorMessage+0x4e>
			*ppbData = (U8*)abExtendedOsFeatureDescriptor;
    a476:	4c0e      	ldr	r4, [pc, #56]	; (a4b0 <USBFilterOsVendorMessage+0x60>)
    a478:	601c      	str	r4, [r3, #0]
			*piLen = sizeof(abExtendedOsFeatureDescriptor);
    a47a:	2428      	movs	r4, #40	; 0x28
			*piLen = sizeof(abExtendedPropertiesFeatureDescriptor);			
    a47c:	6014      	str	r4, [r2, #0]
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
    a47e:	0a04      	lsrs	r4, r0, #8
		if (*piLen < iPageOffset) {
    a480:	6810      	ldr	r0, [r2, #0]
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
    a482:	0425      	lsls	r5, r4, #16
		if (*piLen < iPageOffset) {
    a484:	ebb0 4f04 	cmp.w	r0, r4, lsl #16
    a488:	dbf3      	blt.n	a472 <USBFilterOsVendorMessage+0x22>
		}
		*ppbData += iPageOffset;
    a48a:	681c      	ldr	r4, [r3, #0]
		*piLen -= iPageOffset;
    a48c:	1b40      	subs	r0, r0, r5
		*ppbData += iPageOffset;
    a48e:	442c      	add	r4, r5
    a490:	601c      	str	r4, [r3, #0]
		
		if (*piLen > iRequestLength) {
    a492:	42b0      	cmp	r0, r6
    a494:	bfd4      	ite	le
    a496:	6010      	strle	r0, [r2, #0]
    a498:	6016      	strgt	r6, [r2, #0]
			// Clip data longer than the requested length
			*piLen = iRequestLength;
		}
	
		*pfSuccess = TRUE;
    a49a:	2001      	movs	r0, #1
    a49c:	6008      	str	r0, [r1, #0]
		return TRUE;
	}
	
	// These are not the requests you are looking for
	return FALSE;
}
    a49e:	bd70      	pop	{r4, r5, r6, pc}
			*ppbData = abExtendedPropertiesFeatureDescriptor;
    a4a0:	4c04      	ldr	r4, [pc, #16]	; (a4b4 <USBFilterOsVendorMessage+0x64>)
    a4a2:	601c      	str	r4, [r3, #0]
			*piLen = sizeof(abExtendedPropertiesFeatureDescriptor);			
    a4a4:	2492      	movs	r4, #146	; 0x92
    a4a6:	e7e9      	b.n	a47c <USBFilterOsVendorMessage+0x2c>
		return FALSE;
    a4a8:	4628      	mov	r0, r5
    a4aa:	e7f8      	b.n	a49e <USBFilterOsVendorMessage+0x4e>
    a4ac:	10001338 	.word	0x10001338
    a4b0:	0000b894 	.word	0x0000b894
    a4b4:	10000a78 	.word	0x10000a78

0000a4b8 <USBRegisterWinusbInterface>:
												Windows will use this as a 
												Device Interface GUID
 */
void USBRegisterWinusbInterface(U8 bVendorRequestIndex, const char* pcInterfaceGuid)
{
	bMsVendorIndex = bVendorRequestIndex;
    a4b8:	4b08      	ldr	r3, [pc, #32]	; (a4dc <USBRegisterWinusbInterface+0x24>)
    a4ba:	7018      	strb	r0, [r3, #0]
	
	if(!pcInterfaceGuid) {
    a4bc:	b161      	cbz	r1, a4d8 <USBRegisterWinusbInterface+0x20>
		return; // Trust that caller is actually specifying this with nonzero RequestIndex.
	}
	
	// Copy GUID into Extended Properties feature descriptor.
	// Trust that the caller did the right thing, but ensure double null termination if string terminates early.
	U8* pbWriteCursor = abExtendedPropertiesFeatureDescriptor + EXTENDEDPROPERTIESFEATURE_GUIDSTRINGOFFSET;
    a4be:	4b08      	ldr	r3, [pc, #32]	; (a4e0 <USBRegisterWinusbInterface+0x28>)
    a4c0:	1e4a      	subs	r2, r1, #1
    a4c2:	3125      	adds	r1, #37	; 0x25
	const int ciMaxLength = 38;
	
	for(int i = 0; i < ciMaxLength; i++) {
		if(!pcInterfaceGuid[i]) break;
    a4c4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
    a4c8:	b118      	cbz	r0, a4d2 <USBRegisterWinusbInterface+0x1a>
	for(int i = 0; i < ciMaxLength; i++) {
    a4ca:	428a      	cmp	r2, r1
		pbWriteCursor[0] = (U8) pcInterfaceGuid[i];
    a4cc:	f803 0b02 	strb.w	r0, [r3], #2
	for(int i = 0; i < ciMaxLength; i++) {
    a4d0:	d1f8      	bne.n	a4c4 <USBRegisterWinusbInterface+0xc>
		pbWriteCursor += 2;
	}
	// Double terminate
	pbWriteCursor[0] = 0;
    a4d2:	2200      	movs	r2, #0
    a4d4:	701a      	strb	r2, [r3, #0]
	pbWriteCursor[2] = 0;
    a4d6:	709a      	strb	r2, [r3, #2]
	
}
    a4d8:	4770      	bx	lr
    a4da:	bf00      	nop
    a4dc:	10001338 	.word	0x10001338
    a4e0:	10000aba 	.word	0x10000aba

0000a4e4 <USBRegisterDescriptors>:

	@param [in]	pabDescriptors	The descriptor byte array
 */
void USBRegisterDescriptors(U8 *pabDescriptors)
{
	pabDescrip = pabDescriptors;
    a4e4:	4b01      	ldr	r3, [pc, #4]	; (a4ec <USBRegisterDescriptors+0x8>)
    a4e6:	6058      	str	r0, [r3, #4]
}
    a4e8:	4770      	bx	lr
    a4ea:	bf00      	nop
    a4ec:	10001338 	.word	0x10001338

0000a4f0 <USBGetDescriptor>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetDescriptor(U16 wTypeIndex, U16 wLangID, int *piLen, U8 **ppbData)
{
    a4f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	U8	*pab;
	int iCurIndex;
	
	ASSERT(pabDescrip != NULL);

	bType = GET_DESC_TYPE(wTypeIndex);
    a4f2:	0a04      	lsrs	r4, r0, #8
	bIndex = GET_DESC_INDEX(wTypeIndex);
	
    if (bType == DESC_STRING &&
    a4f4:	2c03      	cmp	r4, #3
	bIndex = GET_DESC_INDEX(wTypeIndex);
    a4f6:	b2c1      	uxtb	r1, r0
	bType = GET_DESC_TYPE(wTypeIndex);
    a4f8:	4626      	mov	r6, r4
    if (bType == DESC_STRING &&
    a4fa:	4810      	ldr	r0, [pc, #64]	; (a53c <USBGetDescriptor+0x4c>)
    a4fc:	d10a      	bne.n	a514 <USBGetDescriptor+0x24>
    a4fe:	29ee      	cmp	r1, #238	; 0xee
    a500:	d108      	bne.n	a514 <USBGetDescriptor+0x24>
	abOsStringDescriptor[sizeof(abOsStringDescriptor)-2] = bMsVendorIndex;
    a502:	490f      	ldr	r1, [pc, #60]	; (a540 <USBGetDescriptor+0x50>)
    a504:	7800      	ldrb	r0, [r0, #0]
	*ppbData = abOsStringDescriptor;
    a506:	3192      	adds	r1, #146	; 0x92
	abOsStringDescriptor[sizeof(abOsStringDescriptor)-2] = bMsVendorIndex;
    a508:	7408      	strb	r0, [r1, #16]
	*ppbData = abOsStringDescriptor;
    a50a:	6019      	str	r1, [r3, #0]
	*piLen = sizeof(abOsStringDescriptor);
    a50c:	2312      	movs	r3, #18
				}
				else {
					// normally length is at offset 0
					*piLen = pab[DESC_bLength];
				}
				return TRUE;
    a50e:	2001      	movs	r0, #1
					*piLen = pab[DESC_bLength];
    a510:	6013      	str	r3, [r2, #0]
		pab += pab[DESC_bLength];
	}
	// nothing found
	DBG("Desc %x not found!\n", wTypeIndex);
	return FALSE;
}
    a512:	bdf0      	pop	{r4, r5, r6, r7, pc}
	iCurIndex = 0;
    a514:	2500      	movs	r5, #0
	pab = (U8 *)pabDescrip;
    a516:	6844      	ldr	r4, [r0, #4]
	while (pab[DESC_bLength] != 0) {
    a518:	7820      	ldrb	r0, [r4, #0]
    a51a:	2800      	cmp	r0, #0
    a51c:	d0f9      	beq.n	a512 <USBGetDescriptor+0x22>
		if (pab[DESC_bDescriptorType] == bType) {
    a51e:	7867      	ldrb	r7, [r4, #1]
    a520:	42b7      	cmp	r7, r6
    a522:	d108      	bne.n	a536 <USBGetDescriptor+0x46>
			if (iCurIndex == bIndex) {
    a524:	42a9      	cmp	r1, r5
    a526:	d105      	bne.n	a534 <USBGetDescriptor+0x44>
				*ppbData = pab;
    a528:	601c      	str	r4, [r3, #0]
				if (bType == DESC_CONFIGURATION) {
    a52a:	2e02      	cmp	r6, #2
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
    a52c:	bf0c      	ite	eq
    a52e:	8863      	ldrheq	r3, [r4, #2]
					*piLen = pab[DESC_bLength];
    a530:	7823      	ldrbne	r3, [r4, #0]
    a532:	e7ec      	b.n	a50e <USBGetDescriptor+0x1e>
			iCurIndex++;
    a534:	3501      	adds	r5, #1
		pab += pab[DESC_bLength];
    a536:	4404      	add	r4, r0
    a538:	e7ee      	b.n	a518 <USBGetDescriptor+0x28>
    a53a:	bf00      	nop
    a53c:	10001338 	.word	0x10001338
    a540:	10000a78 	.word	0x10000a78

0000a544 <USBHandleStandardRequest>:
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    a544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    a548:	4c55      	ldr	r4, [pc, #340]	; (a6a0 <USBHandleStandardRequest+0x15c>)
{
    a54a:	4605      	mov	r5, r0
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    a54c:	68a3      	ldr	r3, [r4, #8]
{
    a54e:	460f      	mov	r7, r1
    a550:	4690      	mov	r8, r2
    a552:	46a1      	mov	r9, r4
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    a554:	b94b      	cbnz	r3, a56a <USBHandleStandardRequest+0x26>
		return TRUE;
	}
	
	switch (REQTYPE_GET_RECIP(pSetup->bmRequestType)) {
    a556:	7828      	ldrb	r0, [r5, #0]
    a558:	f000 061f 	and.w	r6, r0, #31
    a55c:	2e01      	cmp	r6, #1
    a55e:	d069      	beq.n	a634 <USBHandleStandardRequest+0xf0>
    a560:	2e02      	cmp	r6, #2
    a562:	d07b      	beq.n	a65c <USBHandleStandardRequest+0x118>
    a564:	b136      	cbz	r6, a574 <USBHandleStandardRequest+0x30>
			return FALSE;
    a566:	2000      	movs	r0, #0
    a568:	e037      	b.n	a5da <USBHandleStandardRequest+0x96>
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    a56a:	4798      	blx	r3
    a56c:	2800      	cmp	r0, #0
    a56e:	d0f2      	beq.n	a556 <USBHandleStandardRequest+0x12>
		return TRUE;
    a570:	2001      	movs	r0, #1
    a572:	e032      	b.n	a5da <USBHandleStandardRequest+0x96>
	U8	*pbData = *ppbData;
    a574:	786a      	ldrb	r2, [r5, #1]
    a576:	f8d8 3000 	ldr.w	r3, [r8]
	switch (pSetup->bRequest) {
    a57a:	2a09      	cmp	r2, #9
    a57c:	d8f3      	bhi.n	a566 <USBHandleStandardRequest+0x22>
    a57e:	a101      	add	r1, pc, #4	; (adr r1, a584 <USBHandleStandardRequest+0x40>)
    a580:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    a584:	0000a5ad 	.word	0x0000a5ad
    a588:	0000a567 	.word	0x0000a567
    a58c:	0000a567 	.word	0x0000a567
    a590:	0000a567 	.word	0x0000a567
    a594:	0000a567 	.word	0x0000a567
    a598:	0000a5b9 	.word	0x0000a5b9
    a59c:	0000a5c1 	.word	0x0000a5c1
    a5a0:	0000a567 	.word	0x0000a567
    a5a4:	0000a5d1 	.word	0x0000a5d1
    a5a8:	0000a5df 	.word	0x0000a5df
		pbData[0] = 0;
    a5ac:	2200      	movs	r2, #0
    a5ae:	701a      	strb	r2, [r3, #0]
		pbData[1] = 0;
    a5b0:	705a      	strb	r2, [r3, #1]
		*piLen = 2;
    a5b2:	2302      	movs	r3, #2
		*piLen = 0;
    a5b4:	603b      	str	r3, [r7, #0]
		break;
    a5b6:	e7db      	b.n	a570 <USBHandleStandardRequest+0x2c>
		USBHwSetAddress(pSetup->wValue);
    a5b8:	78a8      	ldrb	r0, [r5, #2]
    a5ba:	f7ff fded 	bl	a198 <USBHwSetAddress>
		break;
    a5be:	e7d7      	b.n	a570 <USBHandleStandardRequest+0x2c>
		return USBGetDescriptor(pSetup->wValue, pSetup->wIndex, piLen, ppbData);
    a5c0:	4643      	mov	r3, r8
    a5c2:	463a      	mov	r2, r7
    a5c4:	88a9      	ldrh	r1, [r5, #4]
    a5c6:	8868      	ldrh	r0, [r5, #2]
	case REQTYPE_RECIP_DEVICE:		return HandleStdDeviceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_INTERFACE:	return HandleStdInterfaceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_ENDPOINT: 	return HandleStdEndPointReq(pSetup, piLen, ppbData);
	default: 						return FALSE;
	}
}
    a5c8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return USBGetDescriptor(pSetup->wValue, pSetup->wIndex, piLen, ppbData);
    a5cc:	f7ff bf90 	b.w	a4f0 <USBGetDescriptor>
		*piLen = 1;
    a5d0:	2001      	movs	r0, #1
		pbData[0] = bConfiguration;
    a5d2:	f899 200c 	ldrb.w	r2, [r9, #12]
    a5d6:	701a      	strb	r2, [r3, #0]
		*piLen = 1;
    a5d8:	6038      	str	r0, [r7, #0]
}
    a5da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!USBSetConfiguration(pSetup->wValue & 0xFF, 0)) {
    a5de:	78ae      	ldrb	r6, [r5, #2]
	if (bConfigIndex == 0) {
    a5e0:	b936      	cbnz	r6, a5f0 <USBHandleStandardRequest+0xac>
		USBHwConfigDevice(FALSE);
    a5e2:	4630      	mov	r0, r6
		USBHwConfigDevice(TRUE);
    a5e4:	f7ff fe6e 	bl	a2c4 <USBHwConfigDevice>
		bConfiguration = pSetup->wValue & 0xFF;	
    a5e8:	886b      	ldrh	r3, [r5, #2]
    a5ea:	f889 300c 	strb.w	r3, [r9, #12]
		break;
    a5ee:	e7bf      	b.n	a570 <USBHandleStandardRequest+0x2c>
		bCurAltSetting = 0xFF;
    a5f0:	27ff      	movs	r7, #255	; 0xff
		bCurConfig = 0xFF;
    a5f2:	46b8      	mov	r8, r7
		pab = (U8 *)pabDescrip;
    a5f4:	f8d9 4004 	ldr.w	r4, [r9, #4]
		while (pab[DESC_bLength] != 0) {
    a5f8:	7823      	ldrb	r3, [r4, #0]
    a5fa:	b90b      	cbnz	r3, a600 <USBHandleStandardRequest+0xbc>
		USBHwConfigDevice(TRUE);
    a5fc:	2001      	movs	r0, #1
    a5fe:	e7f1      	b.n	a5e4 <USBHandleStandardRequest+0xa0>
			switch (pab[DESC_bDescriptorType]) {
    a600:	7863      	ldrb	r3, [r4, #1]
    a602:	2b04      	cmp	r3, #4
    a604:	d008      	beq.n	a618 <USBHandleStandardRequest+0xd4>
    a606:	2b05      	cmp	r3, #5
    a608:	d008      	beq.n	a61c <USBHandleStandardRequest+0xd8>
    a60a:	2b02      	cmp	r3, #2
    a60c:	d101      	bne.n	a612 <USBHandleStandardRequest+0xce>
				bCurConfig = pab[CONF_DESC_bConfigurationValue];
    a60e:	f894 8005 	ldrb.w	r8, [r4, #5]
			pab += pab[DESC_bLength];
    a612:	7823      	ldrb	r3, [r4, #0]
    a614:	441c      	add	r4, r3
    a616:	e7ef      	b.n	a5f8 <USBHandleStandardRequest+0xb4>
				bCurAltSetting = pab[INTF_DESC_bAlternateSetting];
    a618:	78e7      	ldrb	r7, [r4, #3]
				break;
    a61a:	e7fa      	b.n	a612 <USBHandleStandardRequest+0xce>
				if ((bCurConfig == bConfigIndex) &&
    a61c:	4546      	cmp	r6, r8
    a61e:	d1f8      	bne.n	a612 <USBHandleStandardRequest+0xce>
    a620:	2f00      	cmp	r7, #0
    a622:	d1f6      	bne.n	a612 <USBHandleStandardRequest+0xce>
									(pab[ENDP_DESC_wMaxPacketSize + 1] << 8);
    a624:	7961      	ldrb	r1, [r4, #5]
					wMaxPktSize = 	(pab[ENDP_DESC_wMaxPacketSize]) |
    a626:	7923      	ldrb	r3, [r4, #4]
					USBHwEPConfig(bEP, wMaxPktSize);
    a628:	78a0      	ldrb	r0, [r4, #2]
    a62a:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
    a62e:	f7ff fd6f 	bl	a110 <USBHwEPConfig>
    a632:	e7ee      	b.n	a612 <USBHandleStandardRequest+0xce>
	switch (pSetup->bRequest) {
    a634:	786b      	ldrb	r3, [r5, #1]
	case REQTYPE_RECIP_INTERFACE:	return HandleStdInterfaceReq(pSetup, piLen, ppbData);
    a636:	f8d8 2000 	ldr.w	r2, [r8]
	switch (pSetup->bRequest) {
    a63a:	2b0a      	cmp	r3, #10
    a63c:	d006      	beq.n	a64c <USBHandleStandardRequest+0x108>
    a63e:	2b0b      	cmp	r3, #11
    a640:	d008      	beq.n	a654 <USBHandleStandardRequest+0x110>
    a642:	2b00      	cmp	r3, #0
    a644:	d18f      	bne.n	a566 <USBHandleStandardRequest+0x22>
		pbData[0] = 0;
    a646:	7013      	strb	r3, [r2, #0]
		pbData[1] = 0;
    a648:	7053      	strb	r3, [r2, #1]
    a64a:	e7b2      	b.n	a5b2 <USBHandleStandardRequest+0x6e>
		pbData[0] = 0;
    a64c:	2300      	movs	r3, #0
    a64e:	7013      	strb	r3, [r2, #0]
		*piLen = 2;
    a650:	603e      	str	r6, [r7, #0]
		break;
    a652:	e78d      	b.n	a570 <USBHandleStandardRequest+0x2c>
		if (pSetup->wValue != 0) {
    a654:	886b      	ldrh	r3, [r5, #2]
    a656:	2b00      	cmp	r3, #0
    a658:	d0ac      	beq.n	a5b4 <USBHandleStandardRequest+0x70>
    a65a:	e784      	b.n	a566 <USBHandleStandardRequest+0x22>
	switch (pSetup->bRequest) {
    a65c:	786c      	ldrb	r4, [r5, #1]
    a65e:	2c01      	cmp	r4, #1
    a660:	d010      	beq.n	a684 <USBHandleStandardRequest+0x140>
    a662:	2c03      	cmp	r4, #3
    a664:	d016      	beq.n	a694 <USBHandleStandardRequest+0x150>
    a666:	2c00      	cmp	r4, #0
    a668:	f47f af7d 	bne.w	a566 <USBHandleStandardRequest+0x22>
		pbData[0] = (USBHwEPGetStatus(pSetup->wIndex) & EP_STATUS_STALLED) ? 1 : 0;
    a66c:	7928      	ldrb	r0, [r5, #4]
	case REQTYPE_RECIP_ENDPOINT: 	return HandleStdEndPointReq(pSetup, piLen, ppbData);
    a66e:	f8d8 8000 	ldr.w	r8, [r8]
		pbData[0] = (USBHwEPGetStatus(pSetup->wIndex) & EP_STATUS_STALLED) ? 1 : 0;
    a672:	f7ff fda1 	bl	a1b8 <USBHwEPGetStatus>
    a676:	f3c0 0040 	ubfx	r0, r0, #1, #1
    a67a:	f888 0000 	strb.w	r0, [r8]
		pbData[1] = 0;
    a67e:	f888 4001 	strb.w	r4, [r8, #1]
    a682:	e7e5      	b.n	a650 <USBHandleStandardRequest+0x10c>
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
    a684:	8869      	ldrh	r1, [r5, #2]
    a686:	2900      	cmp	r1, #0
    a688:	f47f af6d 	bne.w	a566 <USBHandleStandardRequest+0x22>
			USBHwEPStall(pSetup->wIndex, TRUE);
    a68c:	7928      	ldrb	r0, [r5, #4]
    a68e:	f7ff fdad 	bl	a1ec <USBHwEPStall>
			break;
    a692:	e76d      	b.n	a570 <USBHandleStandardRequest+0x2c>
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
    a694:	886b      	ldrh	r3, [r5, #2]
    a696:	2b00      	cmp	r3, #0
    a698:	f47f af65 	bne.w	a566 <USBHandleStandardRequest+0x22>
			USBHwEPStall(pSetup->wIndex, TRUE);
    a69c:	2101      	movs	r1, #1
    a69e:	e7f5      	b.n	a68c <USBHandleStandardRequest+0x148>
    a6a0:	10001338 	.word	0x10001338

0000a6a4 <__aeabi_uldivmod>:
    a6a4:	b953      	cbnz	r3, a6bc <__aeabi_uldivmod+0x18>
    a6a6:	b94a      	cbnz	r2, a6bc <__aeabi_uldivmod+0x18>
    a6a8:	2900      	cmp	r1, #0
    a6aa:	bf08      	it	eq
    a6ac:	2800      	cmpeq	r0, #0
    a6ae:	bf1c      	itt	ne
    a6b0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    a6b4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    a6b8:	f000 b96e 	b.w	a998 <__aeabi_idiv0>
    a6bc:	f1ad 0c08 	sub.w	ip, sp, #8
    a6c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    a6c4:	f000 f806 	bl	a6d4 <__udivmoddi4>
    a6c8:	f8dd e004 	ldr.w	lr, [sp, #4]
    a6cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    a6d0:	b004      	add	sp, #16
    a6d2:	4770      	bx	lr

0000a6d4 <__udivmoddi4>:
    a6d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a6d8:	9e08      	ldr	r6, [sp, #32]
    a6da:	460d      	mov	r5, r1
    a6dc:	4604      	mov	r4, r0
    a6de:	468e      	mov	lr, r1
    a6e0:	2b00      	cmp	r3, #0
    a6e2:	f040 8083 	bne.w	a7ec <__udivmoddi4+0x118>
    a6e6:	428a      	cmp	r2, r1
    a6e8:	4617      	mov	r7, r2
    a6ea:	d947      	bls.n	a77c <__udivmoddi4+0xa8>
    a6ec:	fab2 f382 	clz	r3, r2
    a6f0:	b14b      	cbz	r3, a706 <__udivmoddi4+0x32>
    a6f2:	f1c3 0120 	rsb	r1, r3, #32
    a6f6:	fa05 fe03 	lsl.w	lr, r5, r3
    a6fa:	fa20 f101 	lsr.w	r1, r0, r1
    a6fe:	409f      	lsls	r7, r3
    a700:	ea41 0e0e 	orr.w	lr, r1, lr
    a704:	409c      	lsls	r4, r3
    a706:	ea4f 4817 	mov.w	r8, r7, lsr #16
    a70a:	fbbe fcf8 	udiv	ip, lr, r8
    a70e:	fa1f f987 	uxth.w	r9, r7
    a712:	fb08 e21c 	mls	r2, r8, ip, lr
    a716:	fb0c f009 	mul.w	r0, ip, r9
    a71a:	0c21      	lsrs	r1, r4, #16
    a71c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
    a720:	4290      	cmp	r0, r2
    a722:	d90a      	bls.n	a73a <__udivmoddi4+0x66>
    a724:	18ba      	adds	r2, r7, r2
    a726:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
    a72a:	f080 8118 	bcs.w	a95e <__udivmoddi4+0x28a>
    a72e:	4290      	cmp	r0, r2
    a730:	f240 8115 	bls.w	a95e <__udivmoddi4+0x28a>
    a734:	f1ac 0c02 	sub.w	ip, ip, #2
    a738:	443a      	add	r2, r7
    a73a:	1a12      	subs	r2, r2, r0
    a73c:	fbb2 f0f8 	udiv	r0, r2, r8
    a740:	fb08 2210 	mls	r2, r8, r0, r2
    a744:	fb00 f109 	mul.w	r1, r0, r9
    a748:	b2a4      	uxth	r4, r4
    a74a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    a74e:	42a1      	cmp	r1, r4
    a750:	d909      	bls.n	a766 <__udivmoddi4+0x92>
    a752:	193c      	adds	r4, r7, r4
    a754:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
    a758:	f080 8103 	bcs.w	a962 <__udivmoddi4+0x28e>
    a75c:	42a1      	cmp	r1, r4
    a75e:	f240 8100 	bls.w	a962 <__udivmoddi4+0x28e>
    a762:	3802      	subs	r0, #2
    a764:	443c      	add	r4, r7
    a766:	1a64      	subs	r4, r4, r1
    a768:	2100      	movs	r1, #0
    a76a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    a76e:	b11e      	cbz	r6, a778 <__udivmoddi4+0xa4>
    a770:	2200      	movs	r2, #0
    a772:	40dc      	lsrs	r4, r3
    a774:	e9c6 4200 	strd	r4, r2, [r6]
    a778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a77c:	b902      	cbnz	r2, a780 <__udivmoddi4+0xac>
    a77e:	deff      	udf	#255	; 0xff
    a780:	fab2 f382 	clz	r3, r2
    a784:	2b00      	cmp	r3, #0
    a786:	d14f      	bne.n	a828 <__udivmoddi4+0x154>
    a788:	1a8d      	subs	r5, r1, r2
    a78a:	2101      	movs	r1, #1
    a78c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    a790:	fa1f f882 	uxth.w	r8, r2
    a794:	fbb5 fcfe 	udiv	ip, r5, lr
    a798:	fb0e 551c 	mls	r5, lr, ip, r5
    a79c:	fb08 f00c 	mul.w	r0, r8, ip
    a7a0:	0c22      	lsrs	r2, r4, #16
    a7a2:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
    a7a6:	42a8      	cmp	r0, r5
    a7a8:	d907      	bls.n	a7ba <__udivmoddi4+0xe6>
    a7aa:	197d      	adds	r5, r7, r5
    a7ac:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
    a7b0:	d202      	bcs.n	a7b8 <__udivmoddi4+0xe4>
    a7b2:	42a8      	cmp	r0, r5
    a7b4:	f200 80e9 	bhi.w	a98a <__udivmoddi4+0x2b6>
    a7b8:	4694      	mov	ip, r2
    a7ba:	1a2d      	subs	r5, r5, r0
    a7bc:	fbb5 f0fe 	udiv	r0, r5, lr
    a7c0:	fb0e 5510 	mls	r5, lr, r0, r5
    a7c4:	fb08 f800 	mul.w	r8, r8, r0
    a7c8:	b2a4      	uxth	r4, r4
    a7ca:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    a7ce:	45a0      	cmp	r8, r4
    a7d0:	d907      	bls.n	a7e2 <__udivmoddi4+0x10e>
    a7d2:	193c      	adds	r4, r7, r4
    a7d4:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
    a7d8:	d202      	bcs.n	a7e0 <__udivmoddi4+0x10c>
    a7da:	45a0      	cmp	r8, r4
    a7dc:	f200 80d9 	bhi.w	a992 <__udivmoddi4+0x2be>
    a7e0:	4610      	mov	r0, r2
    a7e2:	eba4 0408 	sub.w	r4, r4, r8
    a7e6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    a7ea:	e7c0      	b.n	a76e <__udivmoddi4+0x9a>
    a7ec:	428b      	cmp	r3, r1
    a7ee:	d908      	bls.n	a802 <__udivmoddi4+0x12e>
    a7f0:	2e00      	cmp	r6, #0
    a7f2:	f000 80b1 	beq.w	a958 <__udivmoddi4+0x284>
    a7f6:	2100      	movs	r1, #0
    a7f8:	e9c6 0500 	strd	r0, r5, [r6]
    a7fc:	4608      	mov	r0, r1
    a7fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a802:	fab3 f183 	clz	r1, r3
    a806:	2900      	cmp	r1, #0
    a808:	d14b      	bne.n	a8a2 <__udivmoddi4+0x1ce>
    a80a:	42ab      	cmp	r3, r5
    a80c:	d302      	bcc.n	a814 <__udivmoddi4+0x140>
    a80e:	4282      	cmp	r2, r0
    a810:	f200 80b9 	bhi.w	a986 <__udivmoddi4+0x2b2>
    a814:	1a84      	subs	r4, r0, r2
    a816:	eb65 0303 	sbc.w	r3, r5, r3
    a81a:	2001      	movs	r0, #1
    a81c:	469e      	mov	lr, r3
    a81e:	2e00      	cmp	r6, #0
    a820:	d0aa      	beq.n	a778 <__udivmoddi4+0xa4>
    a822:	e9c6 4e00 	strd	r4, lr, [r6]
    a826:	e7a7      	b.n	a778 <__udivmoddi4+0xa4>
    a828:	409f      	lsls	r7, r3
    a82a:	f1c3 0220 	rsb	r2, r3, #32
    a82e:	40d1      	lsrs	r1, r2
    a830:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    a834:	fbb1 f0fe 	udiv	r0, r1, lr
    a838:	fa1f f887 	uxth.w	r8, r7
    a83c:	fb0e 1110 	mls	r1, lr, r0, r1
    a840:	fa24 f202 	lsr.w	r2, r4, r2
    a844:	409d      	lsls	r5, r3
    a846:	fb00 fc08 	mul.w	ip, r0, r8
    a84a:	432a      	orrs	r2, r5
    a84c:	0c15      	lsrs	r5, r2, #16
    a84e:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
    a852:	45ac      	cmp	ip, r5
    a854:	fa04 f403 	lsl.w	r4, r4, r3
    a858:	d909      	bls.n	a86e <__udivmoddi4+0x19a>
    a85a:	197d      	adds	r5, r7, r5
    a85c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
    a860:	f080 808f 	bcs.w	a982 <__udivmoddi4+0x2ae>
    a864:	45ac      	cmp	ip, r5
    a866:	f240 808c 	bls.w	a982 <__udivmoddi4+0x2ae>
    a86a:	3802      	subs	r0, #2
    a86c:	443d      	add	r5, r7
    a86e:	eba5 050c 	sub.w	r5, r5, ip
    a872:	fbb5 f1fe 	udiv	r1, r5, lr
    a876:	fb0e 5c11 	mls	ip, lr, r1, r5
    a87a:	fb01 f908 	mul.w	r9, r1, r8
    a87e:	b295      	uxth	r5, r2
    a880:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
    a884:	45a9      	cmp	r9, r5
    a886:	d907      	bls.n	a898 <__udivmoddi4+0x1c4>
    a888:	197d      	adds	r5, r7, r5
    a88a:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
    a88e:	d274      	bcs.n	a97a <__udivmoddi4+0x2a6>
    a890:	45a9      	cmp	r9, r5
    a892:	d972      	bls.n	a97a <__udivmoddi4+0x2a6>
    a894:	3902      	subs	r1, #2
    a896:	443d      	add	r5, r7
    a898:	eba5 0509 	sub.w	r5, r5, r9
    a89c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    a8a0:	e778      	b.n	a794 <__udivmoddi4+0xc0>
    a8a2:	f1c1 0720 	rsb	r7, r1, #32
    a8a6:	408b      	lsls	r3, r1
    a8a8:	fa22 fc07 	lsr.w	ip, r2, r7
    a8ac:	ea4c 0c03 	orr.w	ip, ip, r3
    a8b0:	fa25 f407 	lsr.w	r4, r5, r7
    a8b4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    a8b8:	fbb4 f9fe 	udiv	r9, r4, lr
    a8bc:	fa1f f88c 	uxth.w	r8, ip
    a8c0:	fb0e 4419 	mls	r4, lr, r9, r4
    a8c4:	fa20 f307 	lsr.w	r3, r0, r7
    a8c8:	fb09 fa08 	mul.w	sl, r9, r8
    a8cc:	408d      	lsls	r5, r1
    a8ce:	431d      	orrs	r5, r3
    a8d0:	0c2b      	lsrs	r3, r5, #16
    a8d2:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
    a8d6:	45a2      	cmp	sl, r4
    a8d8:	fa02 f201 	lsl.w	r2, r2, r1
    a8dc:	fa00 f301 	lsl.w	r3, r0, r1
    a8e0:	d909      	bls.n	a8f6 <__udivmoddi4+0x222>
    a8e2:	eb1c 0404 	adds.w	r4, ip, r4
    a8e6:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    a8ea:	d248      	bcs.n	a97e <__udivmoddi4+0x2aa>
    a8ec:	45a2      	cmp	sl, r4
    a8ee:	d946      	bls.n	a97e <__udivmoddi4+0x2aa>
    a8f0:	f1a9 0902 	sub.w	r9, r9, #2
    a8f4:	4464      	add	r4, ip
    a8f6:	eba4 040a 	sub.w	r4, r4, sl
    a8fa:	fbb4 f0fe 	udiv	r0, r4, lr
    a8fe:	fb0e 4410 	mls	r4, lr, r0, r4
    a902:	fb00 fa08 	mul.w	sl, r0, r8
    a906:	b2ad      	uxth	r5, r5
    a908:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
    a90c:	45a2      	cmp	sl, r4
    a90e:	d908      	bls.n	a922 <__udivmoddi4+0x24e>
    a910:	eb1c 0404 	adds.w	r4, ip, r4
    a914:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
    a918:	d22d      	bcs.n	a976 <__udivmoddi4+0x2a2>
    a91a:	45a2      	cmp	sl, r4
    a91c:	d92b      	bls.n	a976 <__udivmoddi4+0x2a2>
    a91e:	3802      	subs	r0, #2
    a920:	4464      	add	r4, ip
    a922:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    a926:	fba0 8902 	umull	r8, r9, r0, r2
    a92a:	eba4 040a 	sub.w	r4, r4, sl
    a92e:	454c      	cmp	r4, r9
    a930:	46c6      	mov	lr, r8
    a932:	464d      	mov	r5, r9
    a934:	d319      	bcc.n	a96a <__udivmoddi4+0x296>
    a936:	d016      	beq.n	a966 <__udivmoddi4+0x292>
    a938:	b15e      	cbz	r6, a952 <__udivmoddi4+0x27e>
    a93a:	ebb3 020e 	subs.w	r2, r3, lr
    a93e:	eb64 0405 	sbc.w	r4, r4, r5
    a942:	fa04 f707 	lsl.w	r7, r4, r7
    a946:	fa22 f301 	lsr.w	r3, r2, r1
    a94a:	431f      	orrs	r7, r3
    a94c:	40cc      	lsrs	r4, r1
    a94e:	e9c6 7400 	strd	r7, r4, [r6]
    a952:	2100      	movs	r1, #0
    a954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a958:	4631      	mov	r1, r6
    a95a:	4630      	mov	r0, r6
    a95c:	e70c      	b.n	a778 <__udivmoddi4+0xa4>
    a95e:	468c      	mov	ip, r1
    a960:	e6eb      	b.n	a73a <__udivmoddi4+0x66>
    a962:	4610      	mov	r0, r2
    a964:	e6ff      	b.n	a766 <__udivmoddi4+0x92>
    a966:	4543      	cmp	r3, r8
    a968:	d2e6      	bcs.n	a938 <__udivmoddi4+0x264>
    a96a:	ebb8 0e02 	subs.w	lr, r8, r2
    a96e:	eb69 050c 	sbc.w	r5, r9, ip
    a972:	3801      	subs	r0, #1
    a974:	e7e0      	b.n	a938 <__udivmoddi4+0x264>
    a976:	4628      	mov	r0, r5
    a978:	e7d3      	b.n	a922 <__udivmoddi4+0x24e>
    a97a:	4611      	mov	r1, r2
    a97c:	e78c      	b.n	a898 <__udivmoddi4+0x1c4>
    a97e:	4681      	mov	r9, r0
    a980:	e7b9      	b.n	a8f6 <__udivmoddi4+0x222>
    a982:	4608      	mov	r0, r1
    a984:	e773      	b.n	a86e <__udivmoddi4+0x19a>
    a986:	4608      	mov	r0, r1
    a988:	e749      	b.n	a81e <__udivmoddi4+0x14a>
    a98a:	f1ac 0c02 	sub.w	ip, ip, #2
    a98e:	443d      	add	r5, r7
    a990:	e713      	b.n	a7ba <__udivmoddi4+0xe6>
    a992:	3802      	subs	r0, #2
    a994:	443c      	add	r4, r7
    a996:	e724      	b.n	a7e2 <__udivmoddi4+0x10e>

0000a998 <__aeabi_idiv0>:
    a998:	4770      	bx	lr
    a99a:	bf00      	nop

0000a99c <memcmp>:
    a99c:	2a03      	cmp	r2, #3
    a99e:	b470      	push	{r4, r5, r6}
    a9a0:	d912      	bls.n	a9c8 <memcmp+0x2c>
    a9a2:	ea40 0501 	orr.w	r5, r0, r1
    a9a6:	07ad      	lsls	r5, r5, #30
    a9a8:	4604      	mov	r4, r0
    a9aa:	460b      	mov	r3, r1
    a9ac:	d120      	bne.n	a9f0 <memcmp+0x54>
    a9ae:	4619      	mov	r1, r3
    a9b0:	4620      	mov	r0, r4
    a9b2:	f853 5b04 	ldr.w	r5, [r3], #4
    a9b6:	f854 6b04 	ldr.w	r6, [r4], #4
    a9ba:	42ae      	cmp	r6, r5
    a9bc:	d118      	bne.n	a9f0 <memcmp+0x54>
    a9be:	3a04      	subs	r2, #4
    a9c0:	2a03      	cmp	r2, #3
    a9c2:	4620      	mov	r0, r4
    a9c4:	4619      	mov	r1, r3
    a9c6:	d8f2      	bhi.n	a9ae <memcmp+0x12>
    a9c8:	1e54      	subs	r4, r2, #1
    a9ca:	b172      	cbz	r2, a9ea <memcmp+0x4e>
    a9cc:	7803      	ldrb	r3, [r0, #0]
    a9ce:	780a      	ldrb	r2, [r1, #0]
    a9d0:	429a      	cmp	r2, r3
    a9d2:	bf08      	it	eq
    a9d4:	1824      	addeq	r4, r4, r0
    a9d6:	d006      	beq.n	a9e6 <memcmp+0x4a>
    a9d8:	e00c      	b.n	a9f4 <memcmp+0x58>
    a9da:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    a9de:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    a9e2:	4293      	cmp	r3, r2
    a9e4:	d106      	bne.n	a9f4 <memcmp+0x58>
    a9e6:	42a0      	cmp	r0, r4
    a9e8:	d1f7      	bne.n	a9da <memcmp+0x3e>
    a9ea:	2000      	movs	r0, #0
    a9ec:	bc70      	pop	{r4, r5, r6}
    a9ee:	4770      	bx	lr
    a9f0:	1e54      	subs	r4, r2, #1
    a9f2:	e7eb      	b.n	a9cc <memcmp+0x30>
    a9f4:	1a98      	subs	r0, r3, r2
    a9f6:	bc70      	pop	{r4, r5, r6}
    a9f8:	4770      	bx	lr
    a9fa:	bf00      	nop

0000a9fc <memcpy>:
    a9fc:	4684      	mov	ip, r0
    a9fe:	ea41 0300 	orr.w	r3, r1, r0
    aa02:	f013 0303 	ands.w	r3, r3, #3
    aa06:	d149      	bne.n	aa9c <memcpy+0xa0>
    aa08:	3a40      	subs	r2, #64	; 0x40
    aa0a:	d323      	bcc.n	aa54 <memcpy+0x58>
    aa0c:	680b      	ldr	r3, [r1, #0]
    aa0e:	6003      	str	r3, [r0, #0]
    aa10:	684b      	ldr	r3, [r1, #4]
    aa12:	6043      	str	r3, [r0, #4]
    aa14:	688b      	ldr	r3, [r1, #8]
    aa16:	6083      	str	r3, [r0, #8]
    aa18:	68cb      	ldr	r3, [r1, #12]
    aa1a:	60c3      	str	r3, [r0, #12]
    aa1c:	690b      	ldr	r3, [r1, #16]
    aa1e:	6103      	str	r3, [r0, #16]
    aa20:	694b      	ldr	r3, [r1, #20]
    aa22:	6143      	str	r3, [r0, #20]
    aa24:	698b      	ldr	r3, [r1, #24]
    aa26:	6183      	str	r3, [r0, #24]
    aa28:	69cb      	ldr	r3, [r1, #28]
    aa2a:	61c3      	str	r3, [r0, #28]
    aa2c:	6a0b      	ldr	r3, [r1, #32]
    aa2e:	6203      	str	r3, [r0, #32]
    aa30:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    aa32:	6243      	str	r3, [r0, #36]	; 0x24
    aa34:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    aa36:	6283      	str	r3, [r0, #40]	; 0x28
    aa38:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    aa3a:	62c3      	str	r3, [r0, #44]	; 0x2c
    aa3c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    aa3e:	6303      	str	r3, [r0, #48]	; 0x30
    aa40:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    aa42:	6343      	str	r3, [r0, #52]	; 0x34
    aa44:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    aa46:	6383      	str	r3, [r0, #56]	; 0x38
    aa48:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    aa4a:	63c3      	str	r3, [r0, #60]	; 0x3c
    aa4c:	3040      	adds	r0, #64	; 0x40
    aa4e:	3140      	adds	r1, #64	; 0x40
    aa50:	3a40      	subs	r2, #64	; 0x40
    aa52:	d2db      	bcs.n	aa0c <memcpy+0x10>
    aa54:	3230      	adds	r2, #48	; 0x30
    aa56:	d30b      	bcc.n	aa70 <memcpy+0x74>
    aa58:	680b      	ldr	r3, [r1, #0]
    aa5a:	6003      	str	r3, [r0, #0]
    aa5c:	684b      	ldr	r3, [r1, #4]
    aa5e:	6043      	str	r3, [r0, #4]
    aa60:	688b      	ldr	r3, [r1, #8]
    aa62:	6083      	str	r3, [r0, #8]
    aa64:	68cb      	ldr	r3, [r1, #12]
    aa66:	60c3      	str	r3, [r0, #12]
    aa68:	3010      	adds	r0, #16
    aa6a:	3110      	adds	r1, #16
    aa6c:	3a10      	subs	r2, #16
    aa6e:	d2f3      	bcs.n	aa58 <memcpy+0x5c>
    aa70:	320c      	adds	r2, #12
    aa72:	d305      	bcc.n	aa80 <memcpy+0x84>
    aa74:	f851 3b04 	ldr.w	r3, [r1], #4
    aa78:	f840 3b04 	str.w	r3, [r0], #4
    aa7c:	3a04      	subs	r2, #4
    aa7e:	d2f9      	bcs.n	aa74 <memcpy+0x78>
    aa80:	3204      	adds	r2, #4
    aa82:	d008      	beq.n	aa96 <memcpy+0x9a>
    aa84:	07d2      	lsls	r2, r2, #31
    aa86:	bf1c      	itt	ne
    aa88:	f811 3b01 	ldrbne.w	r3, [r1], #1
    aa8c:	f800 3b01 	strbne.w	r3, [r0], #1
    aa90:	d301      	bcc.n	aa96 <memcpy+0x9a>
    aa92:	880b      	ldrh	r3, [r1, #0]
    aa94:	8003      	strh	r3, [r0, #0]
    aa96:	4660      	mov	r0, ip
    aa98:	4770      	bx	lr
    aa9a:	bf00      	nop
    aa9c:	2a08      	cmp	r2, #8
    aa9e:	d313      	bcc.n	aac8 <memcpy+0xcc>
    aaa0:	078b      	lsls	r3, r1, #30
    aaa2:	d0b1      	beq.n	aa08 <memcpy+0xc>
    aaa4:	f010 0303 	ands.w	r3, r0, #3
    aaa8:	d0ae      	beq.n	aa08 <memcpy+0xc>
    aaaa:	f1c3 0304 	rsb	r3, r3, #4
    aaae:	1ad2      	subs	r2, r2, r3
    aab0:	07db      	lsls	r3, r3, #31
    aab2:	bf1c      	itt	ne
    aab4:	f811 3b01 	ldrbne.w	r3, [r1], #1
    aab8:	f800 3b01 	strbne.w	r3, [r0], #1
    aabc:	d3a4      	bcc.n	aa08 <memcpy+0xc>
    aabe:	f831 3b02 	ldrh.w	r3, [r1], #2
    aac2:	f820 3b02 	strh.w	r3, [r0], #2
    aac6:	e79f      	b.n	aa08 <memcpy+0xc>
    aac8:	3a04      	subs	r2, #4
    aaca:	d3d9      	bcc.n	aa80 <memcpy+0x84>
    aacc:	3a01      	subs	r2, #1
    aace:	f811 3b01 	ldrb.w	r3, [r1], #1
    aad2:	f800 3b01 	strb.w	r3, [r0], #1
    aad6:	d2f9      	bcs.n	aacc <memcpy+0xd0>
    aad8:	780b      	ldrb	r3, [r1, #0]
    aada:	7003      	strb	r3, [r0, #0]
    aadc:	784b      	ldrb	r3, [r1, #1]
    aade:	7043      	strb	r3, [r0, #1]
    aae0:	788b      	ldrb	r3, [r1, #2]
    aae2:	7083      	strb	r3, [r0, #2]
    aae4:	4660      	mov	r0, ip
    aae6:	4770      	bx	lr

0000aae8 <srand>:
    aae8:	2200      	movs	r2, #0
    aaea:	4b02      	ldr	r3, [pc, #8]	; (aaf4 <srand+0xc>)
    aaec:	681b      	ldr	r3, [r3, #0]
    aaee:	e9c3 022a 	strd	r0, r2, [r3, #168]	; 0xa8
    aaf2:	4770      	bx	lr
    aaf4:	10000020 	.word	0x10000020

0000aaf8 <rand>:
    aaf8:	4b0b      	ldr	r3, [pc, #44]	; (ab28 <rand+0x30>)
    aafa:	480c      	ldr	r0, [pc, #48]	; (ab2c <rand+0x34>)
    aafc:	6819      	ldr	r1, [r3, #0]
    aafe:	b410      	push	{r4}
    ab00:	e9d1 232a 	ldrd	r2, r3, [r1, #168]	; 0xa8
    ab04:	fb00 f002 	mul.w	r0, r0, r2
    ab08:	4c09      	ldr	r4, [pc, #36]	; (ab30 <rand+0x38>)
    ab0a:	fb04 0003 	mla	r0, r4, r3, r0
    ab0e:	fba2 3404 	umull	r3, r4, r2, r4
    ab12:	4404      	add	r4, r0
    ab14:	1c5a      	adds	r2, r3, #1
    ab16:	f144 0000 	adc.w	r0, r4, #0
    ab1a:	e9c1 202a 	strd	r2, r0, [r1, #168]	; 0xa8
    ab1e:	bc10      	pop	{r4}
    ab20:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
    ab24:	4770      	bx	lr
    ab26:	bf00      	nop
    ab28:	10000020 	.word	0x10000020
    ab2c:	5851f42d 	.word	0x5851f42d
    ab30:	4c957f2d 	.word	0x4c957f2d

0000ab34 <strlen>:
    ab34:	f020 0103 	bic.w	r1, r0, #3
    ab38:	f010 0003 	ands.w	r0, r0, #3
    ab3c:	f1c0 0000 	rsb	r0, r0, #0
    ab40:	f851 3b04 	ldr.w	r3, [r1], #4
    ab44:	f100 0c04 	add.w	ip, r0, #4
    ab48:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    ab4c:	f06f 0200 	mvn.w	r2, #0
    ab50:	bf1c      	itt	ne
    ab52:	fa22 f20c 	lsrne.w	r2, r2, ip
    ab56:	4313      	orrne	r3, r2
    ab58:	f04f 0c01 	mov.w	ip, #1
    ab5c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
    ab60:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
    ab64:	eba3 020c 	sub.w	r2, r3, ip
    ab68:	ea22 0203 	bic.w	r2, r2, r3
    ab6c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
    ab70:	bf04      	itt	eq
    ab72:	f851 3b04 	ldreq.w	r3, [r1], #4
    ab76:	3004      	addeq	r0, #4
    ab78:	d0f4      	beq.n	ab64 <strlen+0x30>
    ab7a:	f1c2 0100 	rsb	r1, r2, #0
    ab7e:	ea02 0201 	and.w	r2, r2, r1
    ab82:	fab2 f282 	clz	r2, r2
    ab86:	f1c2 021f 	rsb	r2, r2, #31
    ab8a:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    ab8e:	4770      	bx	lr

0000ab90 <_global_impure_ptr>:
    ab90:	0028 1000 3032 3032 312d 2d32 3152 0a00     (...2020-12-R1..
    aba0:	2a0a 2a2a 552a 4542 5452 4f4f 4854 4220     .****UBERTOOTH B
    abb0:	4f4f 2a54 2a2a 0a2a 7325 000a               OOT****.%s..

0000abbc <whitening_index>:
    abbc:	3e46 6f78 2e4d 650f 2742 1a1f 5350 597d     F>xoM..eB'..PS}Y
    abcc:	230a 3608 117a 0021 733a 5e06 3156 1434     .#.6z.!.:s.^V14.
    abdc:	1b28 5a54 703f 662f                         (.TZ?p/f

0000abe4 <whitening>:
    abe4:	0101 0101 0100 0100 0100 0000 0000 0001     ................
    abf4:	0101 0100 0101 0001 0100 0101 0000 0001     ................
    ac04:	0001 0101 0000 0101 0000 0000 0100 0001     ................
    ac14:	0101 0100 0100 0101 0100 0000 0100 0001     ................
    ac24:	0100 0000 0100 0000 0000 0000 0001 0100     ................
    ac34:	0000 0101 0100 0000 0101 0101 0100 0101     ................
    ac44:	0000 0000 0101 0101 0101 0001 0000 0101     ................
    ac54:	0001 0101 0000 0100 0100 0000 0001           ...............

0000ac63 <compile_info>:
    ac63:	6275 7265 6f74 746f 2068 3032 3032 312d     ubertooth 2020-1
    ac73:	2d32 3152 2820 7762 4062 7762 2d62 6564     2-R1 (bwb@bwb-de
    ac83:	6b73 6f74 2970 5320 6e75 3020 2032 614a     sktop) Sun 02 Ja
    ac93:	206e 3032 3232 3020 3a38 3332 303a 2031     n 2022 08:23:01 
    aca3:	4d50 4520 5453 0000                          PM EST...

0000acac <whitening_word>:
    acac:	b240 c3bc 371f 5f4a f685 9a9c d6c1 44c5     @....7J_.......D
    acbc:	5920 e1de 1b8f afa5 7b42 cd4e eb60 2262      Y......B{N.`.b"
    accc:	2c90 f0ef 8dc7 57d2 3da1 66a7 75b0 1131     .,.....W.=.f.u1.
    acdc:	4089 bcb2 1fc3 4a37 855f 9cf6 c19a c5d6     .@....7J_.......
    acec:	2044 de59 8fe1 a51b 42af 4e7b 60cd 62eb     D Y......B{N.`.b
    acfc:	9022 ef2c c7f0 d28d a157 a73d b066 3175     ".,.....W.=.f.u1
    ad0c:	57d2 3da1 66a7 75b0 1131 9648 f877 46e3     .W.=.f.u1.H.w..F
    ad1c:	abe9 9ed0 3353 bad8 0898 cb24 fc3b a371     ....S3....$.;.q.
    ad2c:	55f4 cf68 19a9 5d6c 044c e592 fe1d 51b8     .Uh...l]L......Q
    ad3c:	a51b 42af 4e7b 60cd 62eb 9022 ef2c c7f0     ...B{N.`.b".,...
    ad4c:	d28d a157 a73d b066 3175 4811 7796 e3f8     ..W.=.f.u1.H.w..
    ad5c:	e946 d0ab 539e d833 98ba 2408 3bcb 71fc     F....S3....$.;.q
    ad6c:	7964 3f87 946e 0abe 39ed 8335 8bad 4089     dy.?n....95....@
    ad7c:	bcb2 1fc3 4a37 855f 9cf6 c19a c5d6 2044     ....7J_.......D 
    ad8c:	de59 8fe1 a51b 42af 4e7b 60cd 62eb 9022     Y......B{N.`.b".
    ad9c:	8bad 4089 bcb2 1fc3 4a37 855f 9cf6 c19a     ...@....7J_.....
    adac:	c5d6 2044 de59 8fe1 a51b 42af 4e7b 60cd     ..D Y......B{N.`
    adbc:	62eb 9022 ef2c c7f0 d28d a157 a73d b066     .b".,.....W.=.f.
    adcc:	9cf6 c19a c5d6 2044 de59 8fe1 a51b 42af     ......D Y......B
    addc:	4e7b 60cd 62eb 9022 ef2c c7f0 d28d a157     {N.`.b".,.....W.
    adec:	a73d b066 3175 4811 7796 e3f8 e946 d0ab     =.f.u1.H.w..F...
    adfc:	6e3f be94 ed0a 3539 ad83 898b b240 c3bc     ?n....95....@...
    ae0c:	371f 5f4a f685 9a9c d6c1 44c5 5920 e1de     .7J_.......D Y..
    ae1c:	1b8f afa5 7b42 cd4e eb60 2262 2c90 f0ef     ....B{N.`.b".,..
    ae2c:	2408 3bcb 71fc f4a3 6855 a9cf 6c19 4c5d     .$.;.q..Uh...l]L
    ae3c:	9204 1de5 b8fe fa51 b42a d4e7 b60c 262e     ......Q.*......&
    ae4c:	c902 0ef2 dc7f 7d28 da15 6a73 5b06 1317     ......(}..sj.[..
    ae5c:	d6c1 44c5 5920 e1de 1b8f afa5 7b42 cd4e     ...D Y......B{N.
    ae6c:	eb60 2262 2c90 f0ef 8dc7 57d2 3da1 66a7     `.b".,.....W.=.f
    ae7c:	75b0 1131 9648 f877 46e3 abe9 9ed0 3353     .u1.H.w..F....S3
    ae8c:	c19a c5d6 2044 de59 8fe1 a51b 42af 4e7b     ....D Y......B{N
    ae9c:	60cd 62eb 9022 ef2c c7f0 d28d a157 a73d     .`.b".,.....W.=.
    aeac:	b066 3175 4811 7796 e3f8 e946 d0ab 539e     f.u1.H.w..F....S
    aebc:	3353 bad8 0898 cb24 fc3b a371 55f4 cf68     S3....$.;.q..Uh.
    aecc:	19a9 5d6c 044c e592 fe1d 51b8 2afa e7b4     ..l]L......Q.*..
    aedc:	0cd4 2eb6 0226 f2c9 7f0e 28dc 157d 73da     ....&......(}..s
    aeec:	ef2c c7f0 d28d a157 a73d b066 3175 4811     ,.....W.=.f.u1.H
    aefc:	7796 e3f8 e946 d0ab 539e d833 98ba 2408     .w..F....S3....$
    af0c:	3bcb 71fc f4a3 6855 a9cf 6c19 4c5d 9204     .;.q..Uh...l]L..
    af1c:	1de5 b8fe fa51 b42a d4e7 b60c 262e c902     ....Q.*......&..
    af2c:	0ef2 dc7f 7d28 da15 6a73 5b06 1317 6481     ....(}..sj.[...d
    af3c:	8779 6e3f be94 ed0a 3539 ad83 898b b240     y.?n....95....@.
    af4c:	0abe 39ed 8335 8bad 4089 bcb2 1fc3 4a37     ...95....@....7J
    af5c:	855f 9cf6 c19a c5d6 2044 de59 8fe1 a51b     _.......D Y.....
    af6c:	42af 4e7b 60cd 62eb 9022 ef2c c7f0 d28d     .B{N.`.b".,.....
    af7c:	f877 46e3 abe9 9ed0 3353 bad8 0898 cb24     w..F....S3....$.
    af8c:	fc3b a371 55f4 cf68 19a9 5d6c 044c e592     ;.q..Uh...l]L...
    af9c:	fe1d 51b8 2afa e7b4 0cd4 2eb6 0226 f2c9     ...Q.*......&...
    afac:	9ed0 3353 bad8 0898 cb24 fc3b a371 55f4     ..S3....$.;.q..U
    afbc:	cf68 19a9 5d6c 044c e592 fe1d 51b8 2afa     h...l]L......Q.*
    afcc:	e7b4 0cd4 2eb6 0226 f2c9 7f0e 28dc 157d     ......&......(}.
    afdc:	6c19 4c5d 9204 1de5 b8fe fa51 b42a d4e7     .l]L......Q.*...
    afec:	b60c 262e c902 0ef2 dc7f 7d28 da15 6a73     ...&......(}..sj
    affc:	5b06 1317 6481 8779 6e3f be94 ed0a 3539     .[...dy.?n....95
    b00c:	7b42 cd4e eb60 2262 2c90 f0ef 8dc7 57d2     B{N.`.b".,.....W
    b01c:	3da1 66a7 75b0 1131 9648 f877 46e3 abe9     .=.f.u1.H.w..F..
    b02c:	9ed0 3353 bad8 0898 cb24 fc3b a371 55f4     ..S3....$.;.q..U
    b03c:	898b b240 c3bc 371f 5f4a f685 9a9c d6c1     ..@....7J_......
    b04c:	44c5 5920 e1de 1b8f afa5 7b42 cd4e eb60     .D Y......B{N.`.
    b05c:	2262 2c90 f0ef 8dc7 57d2 3da1 66a7 75b0     b".,.....W.=.f.u
    b06c:	55f4 cf68 19a9 5d6c 044c e592 fe1d 51b8     .Uh...l]L......Q
    b07c:	2afa e7b4 0cd4 2eb6 0226 f2c9 7f0e 28dc     .*......&......(
    b08c:	157d 73da 066a 175b 8113 7964 3f87 946e     }..sj.[...dy.?n.
    b09c:	a73d b066 3175 4811 7796 e3f8 e946 d0ab     =.f.u1.H.w..F...
    b0ac:	539e d833 98ba 2408 3bcb 71fc f4a3 6855     .S3....$.;.q..Uh
    b0bc:	a9cf 6c19 4c5d 9204 1de5 b8fe fa51 b42a     ...l]L......Q.*.
    b0cc:	b066 3175 4811 7796 e3f8 e946 d0ab 539e     f.u1.H.w..F....S
    b0dc:	d833 98ba 2408 3bcb 71fc f4a3 6855 a9cf     3....$.;.q..Uh..
    b0ec:	6c19 4c5d 9204 1de5 b8fe fa51 b42a d4e7     .l]L......Q.*...
    b0fc:	42af 4e7b 60cd 62eb 9022 ef2c c7f0 d28d     .B{N.`.b".,.....
    b10c:	a157 a73d b066 3175 4811 7796 e3f8 e946     W.=.f.u1.H.w..F.
    b11c:	d0ab 539e d833 98ba 2408 3bcb 71fc f4a3     ...S3....$.;.q..
    b12c:	0898 cb24 fc3b a371 55f4 cf68 19a9 5d6c     ..$.;.q..Uh...l]
    b13c:	044c e592 fe1d 51b8 2afa e7b4 0cd4 2eb6     L......Q.*......
    b14c:	0226 f2c9 7f0e 28dc 157d 73da 066a 175b     &......(}..sj.[.
    b15c:	fa51 b42a d4e7 b60c 262e c902 0ef2 dc7f     Q.*......&......
    b16c:	7d28 da15 6a73 5b06 1317 6481 8779 6e3f     (}..sj.[...dy.?n
    b17c:	be94 ed0a 3539 ad83 898b b240 c3bc 371f     ....95....@....7
    b18c:	ed0a 3539 ad83 898b b240 c3bc 371f 5f4a     ..95....@....7J_
    b19c:	f685 9a9c d6c1 44c5 5920 e1de 1b8f afa5     .......D Y......
    b1ac:	7b42 cd4e eb60 2262 2c90 f0ef 8dc7 57d2     B{N.`.b".,.....W
    b1bc:	1fc3 4a37 855f 9cf6 c19a c5d6 2044 de59     ..7J_.......D Y.
    b1cc:	8fe1 a51b 42af 4e7b 60cd 62eb 9022 ef2c     .....B{N.`.b".,.
    b1dc:	c7f0 d28d a157 a73d b066 3175 4811 7796     ....W.=.f.u1.H.w
    b1ec:	c3bc 371f 5f4a f685 9a9c d6c1 44c5 5920     ...7J_.......D Y
    b1fc:	e1de 1b8f afa5 7b42 cd4e eb60 2262 2c90     ......B{N.`.b".,
    b20c:	f0ef 8dc7 57d2 3da1 66a7 75b0 1131 9648     .....W.=.f.u1.H.
    b21c:	3175 4811 7796 e3f8 e946 d0ab 539e d833     u1.H.w..F....S3.
    b22c:	98ba 2408 3bcb 71fc f4a3 6855 a9cf 6c19     ...$.;.q..Uh...l
    b23c:	4c5d 9204 1de5 b8fe fa51 b42a d4e7 b60c     ]L......Q.*.....
    b24c:	262e c902 0ef2 dc7f 7d28 da15 6a73 5b06     .&......(}..sj.[
    b25c:	1317 6481 8779 6e3f be94 ed0a 3539 ad83     ...dy.?n....95..
    b26c:	898b b240 c3bc 371f 5f4a f685 9a9c d6c1     ..@....7J_......
    b27c:	d4e7 b60c 262e c902 0ef2 dc7f 7d28 da15     .....&......(}..
    b28c:	6a73 5b06 1317 6481 8779 6e3f be94 ed0a     sj.[...dy.?n....
    b29c:	3539 ad83 898b b240 c3bc 371f 5f4a f685     95....@....7J_..
    b2ac:	eb60 2262 2c90 f0ef 8dc7 57d2 3da1 66a7     `.b".,.....W.=.f
    b2bc:	75b0 1131 9648 f877 46e3 abe9 9ed0 3353     .u1.H.w..F....S3
    b2cc:	bad8 0898 cb24 fc3b a371 55f4 cf68 19a9     ....$.;.q..Uh...
    b2dc:	19a9 5d6c 044c e592 fe1d 51b8 2afa e7b4     ..l]L......Q.*..
    b2ec:	0cd4 2eb6 0226 f2c9 7f0e 28dc 157d 73da     ....&......(}..s
    b2fc:	066a 175b 8113 7964 3f87 946e 0abe 39ed     j.[...dy.?n....9
    b30c:	0ef2 dc7f 7d28 da15 6a73 5b06 1317 6481     ....(}..sj.[...d
    b31c:	8779 6e3f be94 ed0a 3539 ad83 898b b240     y.?n....95....@.
    b32c:	c3bc 371f 5f4a f685 9a9c d6c1 44c5 5920     ...7J_.......D Y
    b33c:	fc3b a371 55f4 cf68 19a9 5d6c 044c e592     ;.q..Uh...l]L...
    b34c:	fe1d 51b8 2afa e7b4 0cd4 2eb6 0226 f2c9     ...Q.*......&...
    b35c:	7f0e 28dc 157d 73da 066a 175b 8113 7964     ...(}..sj.[...dy
    b36c:	2044 de59 8fe1 a51b 42af 4e7b 60cd 62eb     D Y......B{N.`.b
    b37c:	9022 ef2c c7f0 d28d a157 a73d b066 3175     ".,.....W.=.f.u1
    b38c:	4811 7796 e3f8 e946 d0ab 539e d833 98ba     .H.w..F....S3...
    b39c:	d28d a157 a73d b066 3175 4811 7796 e3f8     ..W.=.f.u1.H.w..
    b3ac:	e946 d0ab 539e d833 98ba 2408 3bcb 71fc     F....S3....$.;.q
    b3bc:	f4a3 6855 a9cf 6c19 4c5d 9204 1de5 b8fe     ..Uh...l]L......
    b3cc:	c5d6 2044 de59 8fe1 a51b 42af 4e7b 60cd     ..D Y......B{N.`
    b3dc:	62eb 9022 ef2c c7f0 d28d a157 a73d b066     .b".,.....W.=.f.
    b3ec:	3175 4811 7796 e3f8 e946 d0ab 539e d833     u1.H.w..F....S3.
    b3fc:	371f 5f4a f685 9a9c d6c1 44c5 5920 e1de     .7J_.......D Y..
    b40c:	1b8f afa5 7b42 cd4e eb60 2262 2c90 f0ef     ....B{N.`.b".,..
    b41c:	8dc7 57d2 3da1 66a7 75b0 1131 9648 f877     ...W.=.f.u1.H.w.

0000b42c <hop_interval_lut>:
    b42c:	0100 1913 0f1c 101f 210e 1b1a 1422 0508     .........!.."...
    b43c:	1807 0223 1e0d 1d20 0311 0b0a 1704 0615     ..#... .........
    b44c:	0916 120c 0124 0000 0000 0000 0000 0000     ....$...........
    b45c:	0000 0000 0100 0000 0001 0000 0000 0000     ................
    b46c:	0000 0000 0100 0100 0000 0000 0000 0000     ................
    b47c:	0000 0000 0100 0100 0001 0000 0000 0000     ................
    b48c:	0000 0000 0000 0000 0001 0000 0001 0000     ................
    b49c:	0001 0000 0001 0000                         ........

0000b4a4 <index1.4027>:
    b4a4:	0200 0301 0100 0300 0001 0102 0100          ..............

0000b4b2 <index2.4028>:
    b4b2:	0301 0402 0304 0402 0304 0304 0203          ..............

0000b4c0 <whitening_index>:
    b4c0:	3e46 6f78 2e4d 650f 2742 1a1f 5350 597d     F>xoM..eB'..PS}Y
    b4d0:	230a 3608 117a 0021 733a 5e06 3156 1434     .#.6z.!.:s.^V14.
    b4e0:	1b28 5a54 703f 662f                         (.TZ?p/f

0000b4e8 <whitening>:
    b4e8:	0101 0101 0100 0100 0100 0000 0000 0001     ................
    b4f8:	0101 0100 0101 0001 0100 0101 0000 0001     ................
    b508:	0001 0101 0000 0101 0000 0000 0100 0001     ................
    b518:	0101 0100 0100 0101 0100 0000 0100 0001     ................
    b528:	0100 0000 0100 0000 0000 0000 0001 0100     ................
    b538:	0000 0101 0100 0000 0101 0101 0100 0101     ................
    b548:	0000 0000 0101 0101 0101 0001 0000 0101     ................
    b558:	0001 0101 0000 0100 0100 0000 0001 7b01     ...............{
    b568:	6138 3463 6137 3838 632d 3263 2d36 6134     8ac47a88-cc26-4a
    b578:	3961 382d 3738 2d62 3234 6163 6338 3066     a9-887b-42ca8cf0
    b588:	6137 3336 007d 7563 5f72 6962 5f74 6f70     7a63}.cur_bit_po
    b598:	3a73 6220 7479 2065 3d3e 5420 5041 5f45     s: byte >= TAPE_
    b5a8:	454c 3a4e 2520 0a64 6300 7275 625f 7479     LEN: %d..cur_byt
    b5b8:	5f65 6f70 3a73 3e20 203d 4154 4550 4c5f     e_pos: >= TAPE_L
    b5c8:	4e45 203a 6425 0a20 7300 7a69 2065 7265     EN: %d ..size er
    b5d8:	6f72 2072 6e69 7420 6761 635f 6e6f 0a73     ror in tag_cons.
    b5e8:	7c00 7420 6761 6176 3a6c 2520 2064 000a     .| tagval: %d ..
    b5f8:	6572 6570 7461 635f 6e6f 3a73 7320 6174     repeat_cons: sta
    b608:	7472 000a 7265 6f72 2072 6e69 2020 6572     rt..error in  re
    b618:	6570 7461 635f 6e6f 0073 207c 656c 206e     peat_cons.| len 
    b628:	6f63 736e 203a 6425 202c 6174 3a67 2520     cons: %d, tag: %
    b638:	3430 2078 000a 6174 2067 6230 3030 3130     04x ..tag 0b0001
    b648:	6120 646e 6120 7664 645f 7269 6365 5f74      and adv_direct_
    b658:	6e69 0a64 7400 6761 3020 3062 3130 2031     ind..tag 0b0011 
    b668:	6e61 2064 6373 6e61 725f 7165 000a 6174     and scan_req..ta
    b678:	2067 3030 3030 6120 646e 4120 5644 495f     g 0000 and ADV_I
    b688:	5644 000a 6174 2067 4f43 4e4e 4345 5f54     DV..tag CONNECT_
    b698:	4e49 0a44 7400 6761 4120 5644 435f 4e4f     IND..tag ADV_CON
    b6a8:	454e 5443 495f 444e 000a 6174 2067 4441     NECT_IND..tag AD
    b6b8:	5f56 5845 5f54 4e49 0a44 7400 6761 4120     V_EXT_IND..tag A
    b6c8:	5855 435f 4e4f 454e 5443 525f 5053 000a     UX_CONNECT_RSP..
    b6d8:	6174 2067 4353 4e41 525f 5053 000a 6174     tag SCAN_RSP..ta
    b6e8:	2067 4441 5f56 4353 4e41 495f 444e 000a     g ADV_SCAN_IND..
    b6f8:	5245 4f52 3a52 4e20 6e6f 2065 616d 6374     ERROR: None matc
    b708:	6568 2064 6163 6573 6520 7078 6572 7373     hed case express
    b718:	6f69 216e 7000 7261 6573 6620 6e69 7369     ion!.parse finis
    b728:	6568 2e64 000a 6163 6c6c 6e69 2067 7572     hed...calling ru
    b738:	5f6e 6170 7372 7265 2e2e 002e               n_parser....

0000b744 <whitening_index>:
    b744:	3e46 6f78 2e4d 650f 2742 1a1f 5350 597d     F>xoM..eB'..PS}Y
    b754:	230a 3608 117a 0021 733a 5e06 3156 1434     .#.6z.!.:s.^V14.
    b764:	1b28 5a54 703f 662f                         (.TZ?p/f

0000b76c <whitening>:
    b76c:	0101 0101 0100 0100 0100 0000 0000 0001     ................
    b77c:	0101 0100 0101 0001 0100 0101 0000 0001     ................
    b78c:	0001 0101 0000 0101 0000 0000 0100 0001     ................
    b79c:	0101 0100 0100 0101 0100 0000 0100 0001     ................
    b7ac:	0100 0000 0100 0000 0000 0000 0001 0100     ................
    b7bc:	0000 0101 0100 0000 0101 0101 0100 0101     ................
    b7cc:	0000 0000 0101 0101 0101 0001 0000 0101     ................
    b7dc:	0001 0101 0000 0100 0100 0000 0001 0001     ................

0000b7ec <channels>:
    b7ec:	0968 0972 0977 09a5                         h.r.w...

0000b7f4 <CSWTCH.38>:
    b7f4:	b830 0000 b818 0000 b800 0000               0...........

0000b800 <jam_handler.4212>:
    b800:	8ac5 0000 8b79 0000 8d8d 0000 8d15 0000     ....y...........
    b810:	8c31 0000 8d35 0000                         1...5...

0000b818 <continuous_rx_handler.4211>:
    b818:	8add 0000 8b79 0000 8df1 0000 8ac1 0000     ....y...........
    b828:	8ac1 0000 8ac1 0000                         ........

0000b830 <follow_handler.4210>:
    b830:	8ac5 0000 8b79 0000 8ae5 0000 8cd5 0000     ....y...........
    b840:	8ac1 0000 8ac1 0000 8ac1 0000 0007 0000     ................
    b850:	0004 0000 0003 0000 0001 0000 0000 0000     ................
    b860:	0007 0000 0004 0000 0003 0000 0002 0000     ................
    b870:	0001 0000 0000 0000 0009 0000 0008 0000     ................
    b880:	0003 0000 0002 0000 0001 0000 0000 0000     ................

0000b890 <iap_entry>:
    b890:	1ff1 1fff                                   ....

0000b894 <abExtendedOsFeatureDescriptor>:
    b894:	0028 0000 0100 0004 0001 0000 0000 0000     (...............
    b8a4:	0100 4957 554e 4253 0000 0000 0000 0000     ..WINUSB........
    b8b4:	0000 0000 0000 0000                         ........

0000b8bc <_init>:
    b8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b8be:	bf00      	nop
    b8c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    b8c2:	bc08      	pop	{r3}
    b8c4:	469e      	mov	lr, r3
    b8c6:	4770      	bx	lr

0000b8c8 <__init_array_start>:
    b8c8:	000042e1 	.word	0x000042e1

0000b8cc <__frame_dummy_init_array_entry>:
    b8cc:	00004135                                5A..

0000b8d0 <_fini>:
    b8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b8d2:	bf00      	nop
    b8d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    b8d6:	bc08      	pop	{r3}
    b8d8:	469e      	mov	lr, r3
    b8da:	4770      	bx	lr

0000b8dc <__do_global_dtors_aux_fini_array_entry>:
    b8dc:	410d 0000                                   .A..
